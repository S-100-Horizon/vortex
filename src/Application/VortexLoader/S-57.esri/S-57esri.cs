/* THIS FILE IS AUTO GENERATED BY UNIT TEST GenerateNisModel */
/* Run test. GenerateNisModel and copy contents from the output file and change the namespace once compiling. */
/* If error in auto generated file just clear it's contents and run again. */
using ArcGIS.Core.Data;
using ArcGIS.Core.Geometry;
using System.ComponentModel;
namespace S100Framework.Applications.S57.esri
{
    internal class PLTS_SpatialAttributeL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified
        /// </summary>
        [Description("Last modified")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Quality of position
        /// </summary>
        [Description("Quality of position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal datum
        /// </summary>
        [Description("Horizontal datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public PLTS_SpatialAttributeL(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class TidesAndVariationsA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Reference year for magnetic variation
        /// </summary>
        [Description("Reference year for magnetic variation")]
        internal string? RYRMGV = default;

        /// <summary>
        /// Value of local magnetic anomaly
        /// </summary>
        [Description("Value of local magnetic anomaly")]
        internal decimal? VALLMA = default;

        /// <summary>
        /// Value of annual change in magnetic variation
        /// </summary>
        [Description("Value of annual change in magnetic variation")]
        internal decimal? VALACM = default;

        /// <summary>
        /// Value of magnetic variation
        /// </summary>
        [Description("Value of magnetic variation")]
        internal decimal? VALMAG = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of Tidal stream
        /// </summary>
        [Description("Category of Tidal stream")]
        internal int? CAT_TS = default;

        /// <summary>
        /// Current velocity
        /// </summary>
        [Description("Current velocity")]
        internal decimal? CURVEL = default;

        /// <summary>
        /// Orientation
        /// </summary>
        [Description("Orientation")]
        internal decimal? ORIENT = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Time end
        /// </summary>
        [Description("Time end")]
        internal string? TIMEND = default;

        /// <summary>
        /// Time start
        /// </summary>
        [Description("Time start")]
        internal string? TIMSTA = default;

        /// <summary>
        /// Tide - accuracy of water level
        /// </summary>
        [Description("Tide - accuracy of water level")]
        internal int? T_ACWL = default;

        /// <summary>
        /// Tide - high and low water values
        /// </summary>
        [Description("Tide - high and low water values")]
        internal string? T_HWLW = default;

        /// <summary>
        /// Tide - method of tidal prediction
        /// </summary>
        [Description("Tide - method of tidal prediction")]
        internal int? T_MTOD = default;

        /// <summary>
        /// Tide - time and height differences
        /// </summary>
        [Description("Tide - time and height differences")]
        internal string? T_THDF = default;

        /// <summary>
        /// Tide - time interval of values
        /// </summary>
        [Description("Tide - time interval of values")]
        internal int? T_TINT = default;

        /// <summary>
        /// Tide - time series values
        /// </summary>
        [Description("Tide - time series values")]
        internal string? T_TSVL = default;

        /// <summary>
        /// Tide - value of harmonic constituents
        /// </summary>
        [Description("Tide - value of harmonic constituents")]
        internal string? T_VAHC = default;

        /// <summary>
        /// Tidal stream - panel values
        /// </summary>
        [Description("Tidal stream - panel values")]
        internal string? TS_TSP = default;

        /// <summary>
        /// Tidal stream - time series values
        /// </summary>
        [Description("Tidal stream - time series values")]
        internal string? TS_TSV = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public TidesAndVariationsA(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["RYRMGV"] && feature["RYRMGV"] is not null) {
                RYRMGV = Convert.ToString(feature["RYRMGV"]);
            }
            if (DBNull.Value != feature["VALLMA"] && feature["VALLMA"] is not null) {
                VALLMA = Convert.ToDecimal(feature["VALLMA"]);
            }
            if (DBNull.Value != feature["VALACM"] && feature["VALACM"] is not null) {
                VALACM = Convert.ToDecimal(feature["VALACM"]);
            }
            if (DBNull.Value != feature["VALMAG"] && feature["VALMAG"] is not null) {
                VALMAG = Convert.ToDecimal(feature["VALMAG"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CAT_TS"] && feature["CAT_TS"] is not null) {
                CAT_TS = Convert.ToInt32(feature["CAT_TS"]);
            }
            if (DBNull.Value != feature["CURVEL"] && feature["CURVEL"] is not null) {
                CURVEL = Convert.ToDecimal(feature["CURVEL"]);
            }
            if (DBNull.Value != feature["ORIENT"] && feature["ORIENT"] is not null) {
                ORIENT = Convert.ToDecimal(feature["ORIENT"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["TIMEND"] && feature["TIMEND"] is not null) {
                TIMEND = Convert.ToString(feature["TIMEND"]);
            }
            if (DBNull.Value != feature["TIMSTA"] && feature["TIMSTA"] is not null) {
                TIMSTA = Convert.ToString(feature["TIMSTA"]);
            }
            if (DBNull.Value != feature["T_ACWL"] && feature["T_ACWL"] is not null) {
                T_ACWL = Convert.ToInt32(feature["T_ACWL"]);
            }
            if (DBNull.Value != feature["T_HWLW"] && feature["T_HWLW"] is not null) {
                T_HWLW = Convert.ToString(feature["T_HWLW"]);
            }
            if (DBNull.Value != feature["T_MTOD"] && feature["T_MTOD"] is not null) {
                T_MTOD = Convert.ToInt32(feature["T_MTOD"]);
            }
            if (DBNull.Value != feature["T_THDF"] && feature["T_THDF"] is not null) {
                T_THDF = Convert.ToString(feature["T_THDF"]);
            }
            if (DBNull.Value != feature["T_TINT"] && feature["T_TINT"] is not null) {
                T_TINT = Convert.ToInt32(feature["T_TINT"]);
            }
            if (DBNull.Value != feature["T_TSVL"] && feature["T_TSVL"] is not null) {
                T_TSVL = Convert.ToString(feature["T_TSVL"]);
            }
            if (DBNull.Value != feature["T_VAHC"] && feature["T_VAHC"] is not null) {
                T_VAHC = Convert.ToString(feature["T_VAHC"]);
            }
            if (DBNull.Value != feature["TS_TSP"] && feature["TS_TSP"] is not null) {
                TS_TSP = Convert.ToString(feature["TS_TSP"]);
            }
            if (DBNull.Value != feature["TS_TSV"] && feature["TS_TSV"] is not null) {
                TS_TSV = Convert.ToString(feature["TS_TSV"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class TidesAndVariationsL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Reference year for magnetic variation
        /// </summary>
        [Description("Reference year for magnetic variation")]
        internal string? RYRMGV = default;

        /// <summary>
        /// Value of local magnetic anomaly
        /// </summary>
        [Description("Value of local magnetic anomaly")]
        internal decimal? VALLMA = default;

        /// <summary>
        /// Value of annual change in magnetic variation
        /// </summary>
        [Description("Value of annual change in magnetic variation")]
        internal decimal? VALACM = default;

        /// <summary>
        /// Value of magnetic variation
        /// </summary>
        [Description("Value of magnetic variation")]
        internal decimal? VALMAG = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public TidesAndVariationsL(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["RYRMGV"] && feature["RYRMGV"] is not null) {
                RYRMGV = Convert.ToString(feature["RYRMGV"]);
            }
            if (DBNull.Value != feature["VALLMA"] && feature["VALLMA"] is not null) {
                VALLMA = Convert.ToDecimal(feature["VALLMA"]);
            }
            if (DBNull.Value != feature["VALACM"] && feature["VALACM"] is not null) {
                VALACM = Convert.ToDecimal(feature["VALACM"]);
            }
            if (DBNull.Value != feature["VALMAG"] && feature["VALMAG"] is not null) {
                VALMAG = Convert.ToDecimal(feature["VALMAG"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class TidesAndVariationsP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Reference year for magnetic variation
        /// </summary>
        [Description("Reference year for magnetic variation")]
        internal string? RYRMGV = default;

        /// <summary>
        /// Value of local magnetic anomaly
        /// </summary>
        [Description("Value of local magnetic anomaly")]
        internal decimal? VALLMA = default;

        /// <summary>
        /// Value of annual change in magnetic variation
        /// </summary>
        [Description("Value of annual change in magnetic variation")]
        internal decimal? VALACM = default;

        /// <summary>
        /// Value of magnetic variation
        /// </summary>
        [Description("Value of magnetic variation")]
        internal decimal? VALMAG = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of Tidal stream
        /// </summary>
        [Description("Category of Tidal stream")]
        internal int? CAT_TS = default;

        /// <summary>
        /// Current velocity
        /// </summary>
        [Description("Current velocity")]
        internal decimal? CURVEL = default;

        /// <summary>
        /// Orientation
        /// </summary>
        [Description("Orientation")]
        internal decimal? ORIENT = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Time end
        /// </summary>
        [Description("Time end")]
        internal string? TIMEND = default;

        /// <summary>
        /// Time start
        /// </summary>
        [Description("Time start")]
        internal string? TIMSTA = default;

        /// <summary>
        /// Tide - accuracy of water level
        /// </summary>
        [Description("Tide - accuracy of water level")]
        internal int? T_ACWL = default;

        /// <summary>
        /// Tide - high and low water values
        /// </summary>
        [Description("Tide - high and low water values")]
        internal string? T_HWLW = default;

        /// <summary>
        /// Tide - method of tidal prediction
        /// </summary>
        [Description("Tide - method of tidal prediction")]
        internal int? T_MTOD = default;

        /// <summary>
        /// Tide - time and height differences
        /// </summary>
        [Description("Tide - time and height differences")]
        internal string? T_THDF = default;

        /// <summary>
        /// Tide - time interval of values
        /// </summary>
        [Description("Tide - time interval of values")]
        internal int? T_TINT = default;

        /// <summary>
        /// Tide - time series values
        /// </summary>
        [Description("Tide - time series values")]
        internal string? T_TSVL = default;

        /// <summary>
        /// Tide - value of harmonic constituents
        /// </summary>
        [Description("Tide - value of harmonic constituents")]
        internal string? T_VAHC = default;

        /// <summary>
        /// Tidal stream - panel values
        /// </summary>
        [Description("Tidal stream - panel values")]
        internal string? TS_TSP = default;

        /// <summary>
        /// Tidal stream - time series values
        /// </summary>
        [Description("Tidal stream - time series values")]
        internal string? TS_TSV = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public TidesAndVariationsP(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["RYRMGV"] && feature["RYRMGV"] is not null) {
                RYRMGV = Convert.ToString(feature["RYRMGV"]);
            }
            if (DBNull.Value != feature["VALLMA"] && feature["VALLMA"] is not null) {
                VALLMA = Convert.ToDecimal(feature["VALLMA"]);
            }
            if (DBNull.Value != feature["VALACM"] && feature["VALACM"] is not null) {
                VALACM = Convert.ToDecimal(feature["VALACM"]);
            }
            if (DBNull.Value != feature["VALMAG"] && feature["VALMAG"] is not null) {
                VALMAG = Convert.ToDecimal(feature["VALMAG"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CAT_TS"] && feature["CAT_TS"] is not null) {
                CAT_TS = Convert.ToInt32(feature["CAT_TS"]);
            }
            if (DBNull.Value != feature["CURVEL"] && feature["CURVEL"] is not null) {
                CURVEL = Convert.ToDecimal(feature["CURVEL"]);
            }
            if (DBNull.Value != feature["ORIENT"] && feature["ORIENT"] is not null) {
                ORIENT = Convert.ToDecimal(feature["ORIENT"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["TIMEND"] && feature["TIMEND"] is not null) {
                TIMEND = Convert.ToString(feature["TIMEND"]);
            }
            if (DBNull.Value != feature["TIMSTA"] && feature["TIMSTA"] is not null) {
                TIMSTA = Convert.ToString(feature["TIMSTA"]);
            }
            if (DBNull.Value != feature["T_ACWL"] && feature["T_ACWL"] is not null) {
                T_ACWL = Convert.ToInt32(feature["T_ACWL"]);
            }
            if (DBNull.Value != feature["T_HWLW"] && feature["T_HWLW"] is not null) {
                T_HWLW = Convert.ToString(feature["T_HWLW"]);
            }
            if (DBNull.Value != feature["T_MTOD"] && feature["T_MTOD"] is not null) {
                T_MTOD = Convert.ToInt32(feature["T_MTOD"]);
            }
            if (DBNull.Value != feature["T_THDF"] && feature["T_THDF"] is not null) {
                T_THDF = Convert.ToString(feature["T_THDF"]);
            }
            if (DBNull.Value != feature["T_TINT"] && feature["T_TINT"] is not null) {
                T_TINT = Convert.ToInt32(feature["T_TINT"]);
            }
            if (DBNull.Value != feature["T_TSVL"] && feature["T_TSVL"] is not null) {
                T_TSVL = Convert.ToString(feature["T_TSVL"]);
            }
            if (DBNull.Value != feature["T_VAHC"] && feature["T_VAHC"] is not null) {
                T_VAHC = Convert.ToString(feature["T_VAHC"]);
            }
            if (DBNull.Value != feature["TS_TSP"] && feature["TS_TSP"] is not null) {
                TS_TSP = Convert.ToString(feature["TS_TSP"]);
            }
            if (DBNull.Value != feature["TS_TSV"] && feature["TS_TSV"] is not null) {
                TS_TSV = Convert.ToString(feature["TS_TSV"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class SeabedL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Nature of surface - qualifying terms
        /// </summary>
        [Description("Nature of surface - qualifying terms")]
        internal string? NATQUA = default;

        /// <summary>
        /// Nature of surface
        /// </summary>
        [Description("Nature of surface")]
        internal string? NATSUR = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public SeabedL(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["NATQUA"] && feature["NATQUA"] is not null) {
                NATQUA = Convert.ToString(feature["NATQUA"]);
            }
            if (DBNull.Value != feature["NATSUR"] && feature["NATSUR"] is not null) {
                NATSUR = Convert.ToString(feature["NATSUR"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class SeabedP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Nature of surface - qualifying terms
        /// </summary>
        [Description("Nature of surface - qualifying terms")]
        internal string? NATQUA = default;

        /// <summary>
        /// Nature of surface
        /// </summary>
        [Description("Nature of surface")]
        internal string? NATSUR = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of weed/kelp
        /// </summary>
        [Description("Category of weed/kelp")]
        internal int? CATWED = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public SeabedP(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["NATQUA"] && feature["NATQUA"] is not null) {
                NATQUA = Convert.ToString(feature["NATQUA"]);
            }
            if (DBNull.Value != feature["NATSUR"] && feature["NATSUR"] is not null) {
                NATSUR = Convert.ToString(feature["NATSUR"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATWED"] && feature["CATWED"] is not null) {
                CATWED = Convert.ToInt32(feature["CATWED"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class SeabedA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Nature of surface - qualifying terms
        /// </summary>
        [Description("Nature of surface - qualifying terms")]
        internal string? NATQUA = default;

        /// <summary>
        /// Nature of surface
        /// </summary>
        [Description("Nature of surface")]
        internal string? NATSUR = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of weed/kelp
        /// </summary>
        [Description("Category of weed/kelp")]
        internal int? CATWED = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public SeabedA(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["NATQUA"] && feature["NATQUA"] is not null) {
                NATQUA = Convert.ToString(feature["NATQUA"]);
            }
            if (DBNull.Value != feature["NATSUR"] && feature["NATSUR"] is not null) {
                NATSUR = Convert.ToString(feature["NATSUR"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATWED"] && feature["CATWED"] is not null) {
                CATWED = Convert.ToInt32(feature["CATWED"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class DangersL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of fishing facility
        /// </summary>
        [Description("Category of fishing facility")]
        internal int? CATFIF = default;

        /// <summary>
        /// Category of obstruction
        /// </summary>
        [Description("Category of obstruction")]
        internal int? CATOBS = default;

        /// <summary>
        /// Category of water turbulence
        /// </summary>
        [Description("Category of water turbulence")]
        internal int? CATWAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Exposition of sounding
        /// </summary>
        [Description("Exposition of sounding")]
        internal int? EXPSOU = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Nature of surface - qualifying terms
        /// </summary>
        [Description("Nature of surface - qualifying terms")]
        internal string? NATQUA = default;

        /// <summary>
        /// Nature of surface
        /// </summary>
        [Description("Nature of surface")]
        internal string? NATSUR = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Product
        /// </summary>
        [Description("Product")]
        internal string? PRODCT = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Technique of sounding measurement
        /// </summary>
        [Description("Technique of sounding measurement")]
        internal string? TECSOU = default;

        /// <summary>
        /// Value of sounding
        /// </summary>
        [Description("Value of sounding")]
        internal decimal? VALSOU = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of oil barrier
        /// </summary>
        [Description("Category of oil barrier")]
        internal int? CATOLB = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public DangersL(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATFIF"] && feature["CATFIF"] is not null) {
                CATFIF = Convert.ToInt32(feature["CATFIF"]);
            }
            if (DBNull.Value != feature["CATOBS"] && feature["CATOBS"] is not null) {
                CATOBS = Convert.ToInt32(feature["CATOBS"]);
            }
            if (DBNull.Value != feature["CATWAT"] && feature["CATWAT"] is not null) {
                CATWAT = Convert.ToInt32(feature["CATWAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["EXPSOU"] && feature["EXPSOU"] is not null) {
                EXPSOU = Convert.ToInt32(feature["EXPSOU"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["NATQUA"] && feature["NATQUA"] is not null) {
                NATQUA = Convert.ToString(feature["NATQUA"]);
            }
            if (DBNull.Value != feature["NATSUR"] && feature["NATSUR"] is not null) {
                NATSUR = Convert.ToString(feature["NATSUR"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["PRODCT"] && feature["PRODCT"] is not null) {
                PRODCT = Convert.ToString(feature["PRODCT"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["TECSOU"] && feature["TECSOU"] is not null) {
                TECSOU = Convert.ToString(feature["TECSOU"]);
            }
            if (DBNull.Value != feature["VALSOU"] && feature["VALSOU"] is not null) {
                VALSOU = Convert.ToDecimal(feature["VALSOU"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATOLB"] && feature["CATOLB"] is not null) {
                CATOLB = Convert.ToInt32(feature["CATOLB"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class DangersP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of fishing facility
        /// </summary>
        [Description("Category of fishing facility")]
        internal int? CATFIF = default;

        /// <summary>
        /// Category of obstruction
        /// </summary>
        [Description("Category of obstruction")]
        internal int? CATOBS = default;

        /// <summary>
        /// Category of water turbulence
        /// </summary>
        [Description("Category of water turbulence")]
        internal int? CATWAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Exposition of sounding
        /// </summary>
        [Description("Exposition of sounding")]
        internal int? EXPSOU = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Nature of surface - qualifying terms
        /// </summary>
        [Description("Nature of surface - qualifying terms")]
        internal string? NATQUA = default;

        /// <summary>
        /// Nature of surface
        /// </summary>
        [Description("Nature of surface")]
        internal string? NATSUR = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Product
        /// </summary>
        [Description("Product")]
        internal string? PRODCT = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Technique of sounding measurement
        /// </summary>
        [Description("Technique of sounding measurement")]
        internal string? TECSOU = default;

        /// <summary>
        /// Value of sounding
        /// </summary>
        [Description("Value of sounding")]
        internal decimal? VALSOU = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of wreck
        /// </summary>
        [Description("Category of wreck")]
        internal int? CATWRK = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public DangersP(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATFIF"] && feature["CATFIF"] is not null) {
                CATFIF = Convert.ToInt32(feature["CATFIF"]);
            }
            if (DBNull.Value != feature["CATOBS"] && feature["CATOBS"] is not null) {
                CATOBS = Convert.ToInt32(feature["CATOBS"]);
            }
            if (DBNull.Value != feature["CATWAT"] && feature["CATWAT"] is not null) {
                CATWAT = Convert.ToInt32(feature["CATWAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["EXPSOU"] && feature["EXPSOU"] is not null) {
                EXPSOU = Convert.ToInt32(feature["EXPSOU"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["NATQUA"] && feature["NATQUA"] is not null) {
                NATQUA = Convert.ToString(feature["NATQUA"]);
            }
            if (DBNull.Value != feature["NATSUR"] && feature["NATSUR"] is not null) {
                NATSUR = Convert.ToString(feature["NATSUR"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["PRODCT"] && feature["PRODCT"] is not null) {
                PRODCT = Convert.ToString(feature["PRODCT"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["TECSOU"] && feature["TECSOU"] is not null) {
                TECSOU = Convert.ToString(feature["TECSOU"]);
            }
            if (DBNull.Value != feature["VALSOU"] && feature["VALSOU"] is not null) {
                VALSOU = Convert.ToDecimal(feature["VALSOU"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATWRK"] && feature["CATWRK"] is not null) {
                CATWRK = Convert.ToInt32(feature["CATWRK"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class DangersA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of fishing facility
        /// </summary>
        [Description("Category of fishing facility")]
        internal int? CATFIF = default;

        /// <summary>
        /// Category of obstruction
        /// </summary>
        [Description("Category of obstruction")]
        internal int? CATOBS = default;

        /// <summary>
        /// Category of water turbulence
        /// </summary>
        [Description("Category of water turbulence")]
        internal int? CATWAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Exposition of sounding
        /// </summary>
        [Description("Exposition of sounding")]
        internal int? EXPSOU = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Nature of surface - qualifying terms
        /// </summary>
        [Description("Nature of surface - qualifying terms")]
        internal string? NATQUA = default;

        /// <summary>
        /// Nature of surface
        /// </summary>
        [Description("Nature of surface")]
        internal string? NATSUR = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Product
        /// </summary>
        [Description("Product")]
        internal string? PRODCT = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Technique of sounding measurement
        /// </summary>
        [Description("Technique of sounding measurement")]
        internal string? TECSOU = default;

        /// <summary>
        /// Value of sounding
        /// </summary>
        [Description("Value of sounding")]
        internal decimal? VALSOU = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of wreck
        /// </summary>
        [Description("Category of wreck")]
        internal int? CATWRK = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public DangersA(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATFIF"] && feature["CATFIF"] is not null) {
                CATFIF = Convert.ToInt32(feature["CATFIF"]);
            }
            if (DBNull.Value != feature["CATOBS"] && feature["CATOBS"] is not null) {
                CATOBS = Convert.ToInt32(feature["CATOBS"]);
            }
            if (DBNull.Value != feature["CATWAT"] && feature["CATWAT"] is not null) {
                CATWAT = Convert.ToInt32(feature["CATWAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["EXPSOU"] && feature["EXPSOU"] is not null) {
                EXPSOU = Convert.ToInt32(feature["EXPSOU"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["NATQUA"] && feature["NATQUA"] is not null) {
                NATQUA = Convert.ToString(feature["NATQUA"]);
            }
            if (DBNull.Value != feature["NATSUR"] && feature["NATSUR"] is not null) {
                NATSUR = Convert.ToString(feature["NATSUR"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["PRODCT"] && feature["PRODCT"] is not null) {
                PRODCT = Convert.ToString(feature["PRODCT"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["TECSOU"] && feature["TECSOU"] is not null) {
                TECSOU = Convert.ToString(feature["TECSOU"]);
            }
            if (DBNull.Value != feature["VALSOU"] && feature["VALSOU"] is not null) {
                VALSOU = Convert.ToDecimal(feature["VALSOU"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATWRK"] && feature["CATWRK"] is not null) {
                CATWRK = Convert.ToInt32(feature["CATWRK"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class DepthsL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Depth range value 1
        /// </summary>
        [Description("Depth range value 1")]
        internal decimal? DRVAL1 = default;

        /// <summary>
        /// Depth range value 2
        /// </summary>
        [Description("Depth range value 2")]
        internal decimal? DRVAL2 = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Value of depth contour
        /// </summary>
        [Description("Value of depth contour")]
        internal decimal? VALDCO = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public DepthsL(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["DRVAL1"] && feature["DRVAL1"] is not null) {
                DRVAL1 = Convert.ToDecimal(feature["DRVAL1"]);
            }
            if (DBNull.Value != feature["DRVAL2"] && feature["DRVAL2"] is not null) {
                DRVAL2 = Convert.ToDecimal(feature["DRVAL2"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["VALDCO"] && feature["VALDCO"] is not null) {
                VALDCO = Convert.ToDecimal(feature["VALDCO"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class OffshoreInstallationsL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of pipeline/pipe
        /// </summary>
        [Description("Category of pipeline/pipe")]
        internal string? CATPIP = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Product
        /// </summary>
        [Description("Product")]
        internal string? PRODCT = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Buried depth
        /// </summary>
        [Description("Buried depth")]
        internal decimal? BURDEP = default;

        /// <summary>
        /// Depth range value 1
        /// </summary>
        [Description("Depth range value 1")]
        internal decimal? DRVAL1 = default;

        /// <summary>
        /// Depth range value 2
        /// </summary>
        [Description("Depth range value 2")]
        internal decimal? DRVAL2 = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of cable
        /// </summary>
        [Description("Category of cable")]
        internal int? CATCBL = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public OffshoreInstallationsL(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATPIP"] && feature["CATPIP"] is not null) {
                CATPIP = Convert.ToString(feature["CATPIP"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["PRODCT"] && feature["PRODCT"] is not null) {
                PRODCT = Convert.ToString(feature["PRODCT"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["BURDEP"] && feature["BURDEP"] is not null) {
                BURDEP = Convert.ToDecimal(feature["BURDEP"]);
            }
            if (DBNull.Value != feature["DRVAL1"] && feature["DRVAL1"] is not null) {
                DRVAL1 = Convert.ToDecimal(feature["DRVAL1"]);
            }
            if (DBNull.Value != feature["DRVAL2"] && feature["DRVAL2"] is not null) {
                DRVAL2 = Convert.ToDecimal(feature["DRVAL2"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATCBL"] && feature["CATCBL"] is not null) {
                CATCBL = Convert.ToInt32(feature["CATCBL"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class OffshoreInstallationsA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of pipeline/pipe
        /// </summary>
        [Description("Category of pipeline/pipe")]
        internal string? CATPIP = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Product
        /// </summary>
        [Description("Product")]
        internal string? PRODCT = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of cable
        /// </summary>
        [Description("Category of cable")]
        internal int? CATCBL = default;

        /// <summary>
        /// Category of offshore platform
        /// </summary>
        [Description("Category of offshore platform")]
        internal string? CATOFP = default;

        /// <summary>
        /// Category of production area
        /// </summary>
        [Description("Category of production area")]
        internal int? CATPRA = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Restriction
        /// </summary>
        [Description("Restriction")]
        internal string? RESTRN = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public OffshoreInstallationsA(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATPIP"] && feature["CATPIP"] is not null) {
                CATPIP = Convert.ToString(feature["CATPIP"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["PRODCT"] && feature["PRODCT"] is not null) {
                PRODCT = Convert.ToString(feature["PRODCT"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATCBL"] && feature["CATCBL"] is not null) {
                CATCBL = Convert.ToInt32(feature["CATCBL"]);
            }
            if (DBNull.Value != feature["CATOFP"] && feature["CATOFP"] is not null) {
                CATOFP = Convert.ToString(feature["CATOFP"]);
            }
            if (DBNull.Value != feature["CATPRA"] && feature["CATPRA"] is not null) {
                CATPRA = Convert.ToInt32(feature["CATPRA"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["RESTRN"] && feature["RESTRN"] is not null) {
                RESTRN = Convert.ToString(feature["RESTRN"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class MetaDataP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Publication reference
        /// </summary>
        [Description("Publication reference")]
        internal string? PUBREF = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;
        public MetaDataP(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["PUBREF"] && feature["PUBREF"] is not null) {
                PUBREF = Convert.ToString(feature["PUBREF"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
        }
    }
    internal class TracksAndRoutesA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Communication channel
        /// </summary>
        [Description("Communication channel")]
        internal string? COMCHA = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Orientation
        /// </summary>
        [Description("Orientation")]
        internal decimal? ORIENT = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Traffic flow
        /// </summary>
        [Description("Traffic flow")]
        internal int? TRAFIC = default;

        /// <summary>
        /// Category of ferry
        /// </summary>
        [Description("Category of ferry")]
        internal int? CATFRY = default;

        /// <summary>
        /// Category of navigation line
        /// </summary>
        [Description("Category of navigation line")]
        internal int? CATNAV = default;

        /// <summary>
        /// Category of recommended track
        /// </summary>
        [Description("Category of recommended track")]
        internal int? CATTRK = default;

        /// <summary>
        /// Category of Traffic Separation Scheme
        /// </summary>
        [Description("Category of Traffic Separation Scheme")]
        internal int? CATTSS = default;

        /// <summary>
        /// Depth range value 1
        /// </summary>
        [Description("Depth range value 1")]
        internal decimal? DRVAL1 = default;

        /// <summary>
        /// Depth range value 2
        /// </summary>
        [Description("Depth range value 2")]
        internal decimal? DRVAL2 = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Technique of sounding measurement
        /// </summary>
        [Description("Technique of sounding measurement")]
        internal string? TECSOU = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Restriction
        /// </summary>
        [Description("Restriction")]
        internal string? RESTRN = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public TracksAndRoutesA(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["COMCHA"] && feature["COMCHA"] is not null) {
                COMCHA = Convert.ToString(feature["COMCHA"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["ORIENT"] && feature["ORIENT"] is not null) {
                ORIENT = Convert.ToDecimal(feature["ORIENT"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["TRAFIC"] && feature["TRAFIC"] is not null) {
                TRAFIC = Convert.ToInt32(feature["TRAFIC"]);
            }
            if (DBNull.Value != feature["CATFRY"] && feature["CATFRY"] is not null) {
                CATFRY = Convert.ToInt32(feature["CATFRY"]);
            }
            if (DBNull.Value != feature["CATNAV"] && feature["CATNAV"] is not null) {
                CATNAV = Convert.ToInt32(feature["CATNAV"]);
            }
            if (DBNull.Value != feature["CATTRK"] && feature["CATTRK"] is not null) {
                CATTRK = Convert.ToInt32(feature["CATTRK"]);
            }
            if (DBNull.Value != feature["CATTSS"] && feature["CATTSS"] is not null) {
                CATTSS = Convert.ToInt32(feature["CATTSS"]);
            }
            if (DBNull.Value != feature["DRVAL1"] && feature["DRVAL1"] is not null) {
                DRVAL1 = Convert.ToDecimal(feature["DRVAL1"]);
            }
            if (DBNull.Value != feature["DRVAL2"] && feature["DRVAL2"] is not null) {
                DRVAL2 = Convert.ToDecimal(feature["DRVAL2"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["TECSOU"] && feature["TECSOU"] is not null) {
                TECSOU = Convert.ToString(feature["TECSOU"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["RESTRN"] && feature["RESTRN"] is not null) {
                RESTRN = Convert.ToString(feature["RESTRN"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class TracksAndRoutesL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Communication channel
        /// </summary>
        [Description("Communication channel")]
        internal string? COMCHA = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Orientation
        /// </summary>
        [Description("Orientation")]
        internal decimal? ORIENT = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Traffic flow
        /// </summary>
        [Description("Traffic flow")]
        internal int? TRAFIC = default;

        /// <summary>
        /// Category of ferry
        /// </summary>
        [Description("Category of ferry")]
        internal int? CATFRY = default;

        /// <summary>
        /// Category of navigation line
        /// </summary>
        [Description("Category of navigation line")]
        internal int? CATNAV = default;

        /// <summary>
        /// Category of recommended track
        /// </summary>
        [Description("Category of recommended track")]
        internal int? CATTRK = default;

        /// <summary>
        /// Category of Traffic Separation Scheme
        /// </summary>
        [Description("Category of Traffic Separation Scheme")]
        internal int? CATTSS = default;

        /// <summary>
        /// Depth range value 1
        /// </summary>
        [Description("Depth range value 1")]
        internal decimal? DRVAL1 = default;

        /// <summary>
        /// Depth range value 2
        /// </summary>
        [Description("Depth range value 2")]
        internal decimal? DRVAL2 = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Technique of sounding measurement
        /// </summary>
        [Description("Technique of sounding measurement")]
        internal string? TECSOU = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public TracksAndRoutesL(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["COMCHA"] && feature["COMCHA"] is not null) {
                COMCHA = Convert.ToString(feature["COMCHA"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["ORIENT"] && feature["ORIENT"] is not null) {
                ORIENT = Convert.ToDecimal(feature["ORIENT"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["TRAFIC"] && feature["TRAFIC"] is not null) {
                TRAFIC = Convert.ToInt32(feature["TRAFIC"]);
            }
            if (DBNull.Value != feature["CATFRY"] && feature["CATFRY"] is not null) {
                CATFRY = Convert.ToInt32(feature["CATFRY"]);
            }
            if (DBNull.Value != feature["CATNAV"] && feature["CATNAV"] is not null) {
                CATNAV = Convert.ToInt32(feature["CATNAV"]);
            }
            if (DBNull.Value != feature["CATTRK"] && feature["CATTRK"] is not null) {
                CATTRK = Convert.ToInt32(feature["CATTRK"]);
            }
            if (DBNull.Value != feature["CATTSS"] && feature["CATTSS"] is not null) {
                CATTSS = Convert.ToInt32(feature["CATTSS"]);
            }
            if (DBNull.Value != feature["DRVAL1"] && feature["DRVAL1"] is not null) {
                DRVAL1 = Convert.ToDecimal(feature["DRVAL1"]);
            }
            if (DBNull.Value != feature["DRVAL2"] && feature["DRVAL2"] is not null) {
                DRVAL2 = Convert.ToDecimal(feature["DRVAL2"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["TECSOU"] && feature["TECSOU"] is not null) {
                TECSOU = Convert.ToString(feature["TECSOU"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class TracksAndRoutesP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Communication channel
        /// </summary>
        [Description("Communication channel")]
        internal string? COMCHA = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Orientation
        /// </summary>
        [Description("Orientation")]
        internal decimal? ORIENT = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Traffic flow
        /// </summary>
        [Description("Traffic flow")]
        internal int? TRAFIC = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Restriction
        /// </summary>
        [Description("Restriction")]
        internal string? RESTRN = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public TracksAndRoutesP(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["COMCHA"] && feature["COMCHA"] is not null) {
                COMCHA = Convert.ToString(feature["COMCHA"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["ORIENT"] && feature["ORIENT"] is not null) {
                ORIENT = Convert.ToDecimal(feature["ORIENT"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["TRAFIC"] && feature["TRAFIC"] is not null) {
                TRAFIC = Convert.ToInt32(feature["TRAFIC"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["RESTRN"] && feature["RESTRN"] is not null) {
                RESTRN = Convert.ToString(feature["RESTRN"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class AidsToNavigationP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Buoy shape
        /// </summary>
        [Description("Buoy shape")]
        internal int? BOYSHP = default;

        /// <summary>
        /// Beacon shape
        /// </summary>
        [Description("Beacon shape")]
        internal int? BCNSHP = default;

        /// <summary>
        /// Call sign
        /// </summary>
        [Description("Call sign")]
        internal string? CALSGN = default;

        /// <summary>
        /// Category of cardinal mark
        /// </summary>
        [Description("Category of cardinal mark")]
        internal int? CATCAM = default;

        /// <summary>
        /// Category of fog signal
        /// </summary>
        [Description("Category of fog signal")]
        internal int? CATFOG = default;

        /// <summary>
        /// Category of installation buoy
        /// </summary>
        [Description("Category of installation buoy")]
        internal int? CATINB = default;

        /// <summary>
        /// Category of lateral mark
        /// </summary>
        [Description("Category of lateral mark")]
        internal int? CATLAM = default;

        /// <summary>
        /// Category of light
        /// </summary>
        [Description("Category of light")]
        internal string? CATLIT = default;

        /// <summary>
        /// Category of radar station
        /// </summary>
        [Description("Category of radar station")]
        internal int? CATRAS = default;

        /// <summary>
        /// Category of radio station
        /// </summary>
        [Description("Category of radio station")]
        internal string? CATROS = default;

        /// <summary>
        /// Category of radar transponder beacon
        /// </summary>
        [Description("Category of radar transponder beacon")]
        internal int? CATRTB = default;

        /// <summary>
        /// Category of special purpose mark
        /// </summary>
        [Description("Category of special purpose mark")]
        internal string? CATSPM = default;

        /// <summary>
        /// Communication channel
        /// </summary>
        [Description("Communication channel")]
        internal string? COMCHA = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Elevation
        /// </summary>
        [Description("Elevation")]
        internal decimal? ELEVAT = default;

        /// <summary>
        /// Estimated range of transmission
        /// </summary>
        [Description("Estimated range of transmission")]
        internal decimal? ESTRNG = default;

        /// <summary>
        /// Exhibition condition of light
        /// </summary>
        [Description("Exhibition condition of light")]
        internal int? EXCLIT = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Horizontal accuracy
        /// </summary>
        [Description("Horizontal accuracy")]
        internal decimal? HORACC = default;

        /// <summary>
        /// Horizontal length
        /// </summary>
        [Description("Horizontal length")]
        internal decimal? HORLEN = default;

        /// <summary>
        /// Horizontal width
        /// </summary>
        [Description("Horizontal width")]
        internal decimal? HORWID = default;

        /// <summary>
        /// Light characteristic
        /// </summary>
        [Description("Light characteristic")]
        internal int? LITCHR = default;

        /// <summary>
        /// Light visibility
        /// </summary>
        [Description("Light visibility")]
        internal string? LITVIS = default;

        /// <summary>
        /// Marks navigational - System of
        /// </summary>
        [Description("Marks navigational - System of")]
        internal int? MARSYS = default;

        /// <summary>
        /// Mulitiplicity of lights
        /// </summary>
        [Description("Mulitiplicity of lights")]
        internal int? MLTYLT = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Orientation
        /// </summary>
        [Description("Orientation")]
        internal decimal? ORIENT = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Product
        /// </summary>
        [Description("Product")]
        internal string? PRODCT = default;

        /// <summary>
        /// Radar wave length
        /// </summary>
        [Description("Radar wave length")]
        internal string? RADWAL = default;

        /// <summary>
        /// Sector limit one
        /// </summary>
        [Description("Sector limit one")]
        internal decimal? SECTR1 = default;

        /// <summary>
        /// Sector limit two
        /// </summary>
        [Description("Sector limit two")]
        internal decimal? SECTR2 = default;

        /// <summary>
        /// Signal frequency
        /// </summary>
        [Description("Signal frequency")]
        internal int? SIGFRQ = default;

        /// <summary>
        /// Signal generation
        /// </summary>
        [Description("Signal generation")]
        internal int? SIGGEN = default;

        /// <summary>
        /// Signal group
        /// </summary>
        [Description("Signal group")]
        internal string? SIGGRP = default;

        /// <summary>
        /// Signal period
        /// </summary>
        [Description("Signal period")]
        internal decimal? SIGPER = default;

        /// <summary>
        /// Signal sequence
        /// </summary>
        [Description("Signal sequence")]
        internal string? SIGSEQ = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Topmark/daymark shape
        /// </summary>
        [Description("Topmark/daymark shape")]
        internal int? TOPSHP = default;

        /// <summary>
        /// Value of maximum range
        /// </summary>
        [Description("Value of maximum range")]
        internal decimal? VALMXR = default;

        /// <summary>
        /// Value of nominal range
        /// </summary>
        [Description("Value of nominal range")]
        internal decimal? VALNMR = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;

        /// <summary>
        /// Validation status
        /// </summary>
        [Description("Validation status")]
        internal int? VALIDATIONSTATUS = default;
        public AidsToNavigationP(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["BOYSHP"] && feature["BOYSHP"] is not null) {
                BOYSHP = Convert.ToInt32(feature["BOYSHP"]);
            }
            if (DBNull.Value != feature["BCNSHP"] && feature["BCNSHP"] is not null) {
                BCNSHP = Convert.ToInt32(feature["BCNSHP"]);
            }
            if (DBNull.Value != feature["CALSGN"] && feature["CALSGN"] is not null) {
                CALSGN = Convert.ToString(feature["CALSGN"]);
            }
            if (DBNull.Value != feature["CATCAM"] && feature["CATCAM"] is not null) {
                CATCAM = Convert.ToInt32(feature["CATCAM"]);
            }
            if (DBNull.Value != feature["CATFOG"] && feature["CATFOG"] is not null) {
                CATFOG = Convert.ToInt32(feature["CATFOG"]);
            }
            if (DBNull.Value != feature["CATINB"] && feature["CATINB"] is not null) {
                CATINB = Convert.ToInt32(feature["CATINB"]);
            }
            if (DBNull.Value != feature["CATLAM"] && feature["CATLAM"] is not null) {
                CATLAM = Convert.ToInt32(feature["CATLAM"]);
            }
            if (DBNull.Value != feature["CATLIT"] && feature["CATLIT"] is not null) {
                CATLIT = Convert.ToString(feature["CATLIT"]);
            }
            if (DBNull.Value != feature["CATRAS"] && feature["CATRAS"] is not null) {
                CATRAS = Convert.ToInt32(feature["CATRAS"]);
            }
            if (DBNull.Value != feature["CATROS"] && feature["CATROS"] is not null) {
                CATROS = Convert.ToString(feature["CATROS"]);
            }
            if (DBNull.Value != feature["CATRTB"] && feature["CATRTB"] is not null) {
                CATRTB = Convert.ToInt32(feature["CATRTB"]);
            }
            if (DBNull.Value != feature["CATSPM"] && feature["CATSPM"] is not null) {
                CATSPM = Convert.ToString(feature["CATSPM"]);
            }
            if (DBNull.Value != feature["COMCHA"] && feature["COMCHA"] is not null) {
                COMCHA = Convert.ToString(feature["COMCHA"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["ELEVAT"] && feature["ELEVAT"] is not null) {
                ELEVAT = Convert.ToDecimal(feature["ELEVAT"]);
            }
            if (DBNull.Value != feature["ESTRNG"] && feature["ESTRNG"] is not null) {
                ESTRNG = Convert.ToDecimal(feature["ESTRNG"]);
            }
            if (DBNull.Value != feature["EXCLIT"] && feature["EXCLIT"] is not null) {
                EXCLIT = Convert.ToInt32(feature["EXCLIT"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["HORACC"] && feature["HORACC"] is not null) {
                HORACC = Convert.ToDecimal(feature["HORACC"]);
            }
            if (DBNull.Value != feature["HORLEN"] && feature["HORLEN"] is not null) {
                HORLEN = Convert.ToDecimal(feature["HORLEN"]);
            }
            if (DBNull.Value != feature["HORWID"] && feature["HORWID"] is not null) {
                HORWID = Convert.ToDecimal(feature["HORWID"]);
            }
            if (DBNull.Value != feature["LITCHR"] && feature["LITCHR"] is not null) {
                LITCHR = Convert.ToInt32(feature["LITCHR"]);
            }
            if (DBNull.Value != feature["LITVIS"] && feature["LITVIS"] is not null) {
                LITVIS = Convert.ToString(feature["LITVIS"]);
            }
            if (DBNull.Value != feature["MARSYS"] && feature["MARSYS"] is not null) {
                MARSYS = Convert.ToInt32(feature["MARSYS"]);
            }
            if (DBNull.Value != feature["MLTYLT"] && feature["MLTYLT"] is not null) {
                MLTYLT = Convert.ToInt32(feature["MLTYLT"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["ORIENT"] && feature["ORIENT"] is not null) {
                ORIENT = Convert.ToDecimal(feature["ORIENT"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["PRODCT"] && feature["PRODCT"] is not null) {
                PRODCT = Convert.ToString(feature["PRODCT"]);
            }
            if (DBNull.Value != feature["RADWAL"] && feature["RADWAL"] is not null) {
                RADWAL = Convert.ToString(feature["RADWAL"]);
            }
            if (DBNull.Value != feature["SECTR1"] && feature["SECTR1"] is not null) {
                SECTR1 = Convert.ToDecimal(feature["SECTR1"]);
            }
            if (DBNull.Value != feature["SECTR2"] && feature["SECTR2"] is not null) {
                SECTR2 = Convert.ToDecimal(feature["SECTR2"]);
            }
            if (DBNull.Value != feature["SIGFRQ"] && feature["SIGFRQ"] is not null) {
                SIGFRQ = Convert.ToInt32(feature["SIGFRQ"]);
            }
            if (DBNull.Value != feature["SIGGEN"] && feature["SIGGEN"] is not null) {
                SIGGEN = Convert.ToInt32(feature["SIGGEN"]);
            }
            if (DBNull.Value != feature["SIGGRP"] && feature["SIGGRP"] is not null) {
                SIGGRP = Convert.ToString(feature["SIGGRP"]);
            }
            if (DBNull.Value != feature["SIGPER"] && feature["SIGPER"] is not null) {
                SIGPER = Convert.ToDecimal(feature["SIGPER"]);
            }
            if (DBNull.Value != feature["SIGSEQ"] && feature["SIGSEQ"] is not null) {
                SIGSEQ = Convert.ToString(feature["SIGSEQ"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["TOPSHP"] && feature["TOPSHP"] is not null) {
                TOPSHP = Convert.ToInt32(feature["TOPSHP"]);
            }
            if (DBNull.Value != feature["VALMXR"] && feature["VALMXR"] is not null) {
                VALMXR = Convert.ToDecimal(feature["VALMXR"]);
            }
            if (DBNull.Value != feature["VALNMR"] && feature["VALNMR"] is not null) {
                VALNMR = Convert.ToDecimal(feature["VALNMR"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
            if (feature.FindField("VALIDATIONSTATUS") > -1) { // NOAA Exception
                if (DBNull.Value != feature["VALIDATIONSTATUS"] && feature["VALIDATIONSTATUS"] is not null) {
                    VALIDATIONSTATUS = Convert.ToInt32(feature["VALIDATIONSTATUS"]);
                }
            }
        }
    }
    internal class IceFeaturesA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of ice
        /// </summary>
        [Description("Category of ice")]
        internal int? CATICE = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Elevation
        /// </summary>
        [Description("Elevation")]
        internal decimal? ELEVAT = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public IceFeaturesA(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATICE"] && feature["CATICE"] is not null) {
                CATICE = Convert.ToInt32(feature["CATICE"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["ELEVAT"] && feature["ELEVAT"] is not null) {
                ELEVAT = Convert.ToDecimal(feature["ELEVAT"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class MilitaryFeaturesA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of military practice area
        /// </summary>
        [Description("Category of military practice area")]
        internal string? CATMPA = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Restriction
        /// </summary>
        [Description("Restriction")]
        internal string? RESTRN = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public MilitaryFeaturesA(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATMPA"] && feature["CATMPA"] is not null) {
                CATMPA = Convert.ToString(feature["CATMPA"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["RESTRN"] && feature["RESTRN"] is not null) {
                RESTRN = Convert.ToString(feature["RESTRN"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class MilitaryFeaturesP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of military practice area
        /// </summary>
        [Description("Category of military practice area")]
        internal string? CATMPA = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Restriction
        /// </summary>
        [Description("Restriction")]
        internal string? RESTRN = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public MilitaryFeaturesP(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATMPA"] && feature["CATMPA"] is not null) {
                CATMPA = Convert.ToString(feature["CATMPA"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["RESTRN"] && feature["RESTRN"] is not null) {
                RESTRN = Convert.ToString(feature["RESTRN"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class UserDefinedFeaturesA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Object Class Definition
        /// </summary>
        [Description("Object Class Definition")]
        internal string? CLSDEF = default;

        /// <summary>
        /// Object Class Name
        /// </summary>
        [Description("Object Class Name")]
        internal string? CLSNAM = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Nationality
        /// </summary>
        [Description("Nationality")]
        internal string? NATION = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Restriction
        /// </summary>
        [Description("Restriction")]
        internal string? RESTRN = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Symbol Instruction
        /// </summary>
        [Description("Symbol Instruction")]
        internal string? SYMINS = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public UserDefinedFeaturesA(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CLSDEF"] && feature["CLSDEF"] is not null) {
                CLSDEF = Convert.ToString(feature["CLSDEF"]);
            }
            if (DBNull.Value != feature["CLSNAM"] && feature["CLSNAM"] is not null) {
                CLSNAM = Convert.ToString(feature["CLSNAM"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["NATION"] && feature["NATION"] is not null) {
                NATION = Convert.ToString(feature["NATION"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["RESTRN"] && feature["RESTRN"] is not null) {
                RESTRN = Convert.ToString(feature["RESTRN"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["SYMINS"] && feature["SYMINS"] is not null) {
                SYMINS = Convert.ToString(feature["SYMINS"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class UserDefinedFeaturesP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Object Class Definition
        /// </summary>
        [Description("Object Class Definition")]
        internal string? CLSDEF = default;

        /// <summary>
        /// Object Class Name
        /// </summary>
        [Description("Object Class Name")]
        internal string? CLSNAM = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Nationality
        /// </summary>
        [Description("Nationality")]
        internal string? NATION = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Restriction
        /// </summary>
        [Description("Restriction")]
        internal string? RESTRN = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Symbol Instruction
        /// </summary>
        [Description("Symbol Instruction")]
        internal string? SYMINS = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public UserDefinedFeaturesP(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CLSDEF"] && feature["CLSDEF"] is not null) {
                CLSDEF = Convert.ToString(feature["CLSDEF"]);
            }
            if (DBNull.Value != feature["CLSNAM"] && feature["CLSNAM"] is not null) {
                CLSNAM = Convert.ToString(feature["CLSNAM"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["NATION"] && feature["NATION"] is not null) {
                NATION = Convert.ToString(feature["NATION"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["RESTRN"] && feature["RESTRN"] is not null) {
                RESTRN = Convert.ToString(feature["RESTRN"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["SYMINS"] && feature["SYMINS"] is not null) {
                SYMINS = Convert.ToString(feature["SYMINS"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class UserDefinedFeaturesL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Object Class Definition
        /// </summary>
        [Description("Object Class Definition")]
        internal string? CLSDEF = default;

        /// <summary>
        /// Object Class Name
        /// </summary>
        [Description("Object Class Name")]
        internal string? CLSNAM = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Nationality
        /// </summary>
        [Description("Nationality")]
        internal string? NATION = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Restriction
        /// </summary>
        [Description("Restriction")]
        internal string? RESTRN = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Symbol Instruction
        /// </summary>
        [Description("Symbol Instruction")]
        internal string? SYMINS = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public UserDefinedFeaturesL(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CLSDEF"] && feature["CLSDEF"] is not null) {
                CLSDEF = Convert.ToString(feature["CLSDEF"]);
            }
            if (DBNull.Value != feature["CLSNAM"] && feature["CLSNAM"] is not null) {
                CLSNAM = Convert.ToString(feature["CLSNAM"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["NATION"] && feature["NATION"] is not null) {
                NATION = Convert.ToString(feature["NATION"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["RESTRN"] && feature["RESTRN"] is not null) {
                RESTRN = Convert.ToString(feature["RESTRN"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["SYMINS"] && feature["SYMINS"] is not null) {
                SYMINS = Convert.ToString(feature["SYMINS"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class DepthsA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Depth range value 1
        /// </summary>
        [Description("Depth range value 1")]
        internal decimal? DRVAL1 = default;

        /// <summary>
        /// Depth range value 2
        /// </summary>
        [Description("Depth range value 2")]
        internal decimal? DRVAL2 = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Restriction
        /// </summary>
        [Description("Restriction")]
        internal string? RESTRN = default;

        /// <summary>
        /// Technique of sounding measurement
        /// </summary>
        [Description("Technique of sounding measurement")]
        internal string? TECSOU = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public DepthsA(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["DRVAL1"] && feature["DRVAL1"] is not null) {
                DRVAL1 = Convert.ToDecimal(feature["DRVAL1"]);
            }
            if (DBNull.Value != feature["DRVAL2"] && feature["DRVAL2"] is not null) {
                DRVAL2 = Convert.ToDecimal(feature["DRVAL2"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["RESTRN"] && feature["RESTRN"] is not null) {
                RESTRN = Convert.ToString(feature["RESTRN"]);
            }
            if (DBNull.Value != feature["TECSOU"] && feature["TECSOU"] is not null) {
                TECSOU = Convert.ToString(feature["TECSOU"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class SoundingsP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Depth
        /// </summary>
        [Description("Depth")]
        internal decimal? DEPTH = default;

        /// <summary>
        /// Exposition of sounding
        /// </summary>
        [Description("Exposition of sounding")]
        internal int? EXPSOU = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Technique of sounding measurement
        /// </summary>
        [Description("Technique of sounding measurement")]
        internal string? TECSOU = default;

        /// <summary>
        /// Quality of position
        /// </summary>
        [Description("Quality of position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Entry date
        /// </summary>
        [Description("Entry date")]
        internal decimal? ENTRY_DATE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;
        public SoundingsP(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["DEPTH"] && feature["DEPTH"] is not null) {
                DEPTH = Convert.ToDecimal(feature["DEPTH"]);
            }
            if (DBNull.Value != feature["EXPSOU"] && feature["EXPSOU"] is not null) {
                EXPSOU = Convert.ToInt32(feature["EXPSOU"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["TECSOU"] && feature["TECSOU"] is not null) {
                TECSOU = Convert.ToString(feature["TECSOU"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["ENTRY_DATE"] && feature["ENTRY_DATE"] is not null) {
                ENTRY_DATE = Convert.ToDecimal(feature["ENTRY_DATE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
        }
    }
    internal class PortsAndServicesP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Buoy shape
        /// </summary>
        [Description("Buoy shape")]
        internal int? BOYSHP = default;

        /// <summary>
        /// Category of gate
        /// </summary>
        [Description("Category of gate")]
        internal int? CATGAT = default;

        /// <summary>
        /// Category of mooring/warping facility
        /// </summary>
        [Description("Category of mooring/warping facility")]
        internal int? CATMOR = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Depth range value 1
        /// </summary>
        [Description("Depth range value 1")]
        internal decimal? DRVAL1 = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Horizontal accuracy
        /// </summary>
        [Description("Horizontal accuracy")]
        internal decimal? HORACC = default;

        /// <summary>
        /// Horizontal clearance
        /// </summary>
        [Description("Horizontal clearance")]
        internal decimal? HORCLR = default;

        /// <summary>
        /// Horizontal length
        /// </summary>
        [Description("Horizontal length")]
        internal decimal? HORLEN = default;

        /// <summary>
        /// Horizontal width
        /// </summary>
        [Description("Horizontal width")]
        internal decimal? HORWID = default;

        /// <summary>
        /// Lifting capacity
        /// </summary>
        [Description("Lifting capacity")]
        internal decimal? LIFCAP = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical clearance
        /// </summary>
        [Description("Vertical clearance")]
        internal decimal? VERCLR = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of checkpoint
        /// </summary>
        [Description("Category of checkpoint")]
        internal int? CATCHP = default;

        /// <summary>
        /// Category of crane
        /// </summary>
        [Description("Category of crane")]
        internal int? CATCRN = default;

        /// <summary>
        /// Category of distance mark
        /// </summary>
        [Description("Category of distance mark")]
        internal int? CATDIS = default;

        /// <summary>
        /// Category of harbour facility
        /// </summary>
        [Description("Category of harbour facility")]
        internal string? CATHAF = default;

        /// <summary>
        /// Category of hulk
        /// </summary>
        [Description("Category of hulk")]
        internal string? CATHLK = default;

        /// <summary>
        /// Category of pilot boarding place
        /// </summary>
        [Description("Category of pilot boarding place")]
        internal int? CATPIL = default;

        /// <summary>
        /// Category of pile
        /// </summary>
        [Description("Category of pile")]
        internal int? CATPLE = default;

        /// <summary>
        /// Category of rescue station
        /// </summary>
        [Description("Category of rescue station")]
        internal string? CATRSC = default;

        /// <summary>
        /// Category of small craft facility
        /// </summary>
        [Description("Category of small craft facility")]
        internal string? CATSCF = default;

        /// <summary>
        /// Category of signal station, traffic
        /// </summary>
        [Description("Category of signal station, traffic")]
        internal string? CATSIT = default;

        /// <summary>
        /// Category of signal station, warning
        /// </summary>
        [Description("Category of signal station, warning")]
        internal string? CATSIW = default;

        /// <summary>
        /// Communication channel
        /// </summary>
        [Description("Communication channel")]
        internal string? COMCHA = default;

        /// <summary>
        /// Pilot district in national language
        /// </summary>
        [Description("Pilot district in national language")]
        internal string? NPLDST = default;

        /// <summary>
        /// Orientation
        /// </summary>
        [Description("Orientation")]
        internal decimal? ORIENT = default;

        /// <summary>
        /// Pilot district
        /// </summary>
        [Description("Pilot district")]
        internal string? PILDST = default;

        /// <summary>
        /// Radius
        /// </summary>
        [Description("Radius")]
        internal decimal? RADIUS = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public PortsAndServicesP(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["BOYSHP"] && feature["BOYSHP"] is not null) {
                BOYSHP = Convert.ToInt32(feature["BOYSHP"]);
            }
            if (DBNull.Value != feature["CATGAT"] && feature["CATGAT"] is not null) {
                CATGAT = Convert.ToInt32(feature["CATGAT"]);
            }
            if (DBNull.Value != feature["CATMOR"] && feature["CATMOR"] is not null) {
                CATMOR = Convert.ToInt32(feature["CATMOR"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["DRVAL1"] && feature["DRVAL1"] is not null) {
                DRVAL1 = Convert.ToDecimal(feature["DRVAL1"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["HORACC"] && feature["HORACC"] is not null) {
                HORACC = Convert.ToDecimal(feature["HORACC"]);
            }
            if (DBNull.Value != feature["HORCLR"] && feature["HORCLR"] is not null) {
                HORCLR = Convert.ToDecimal(feature["HORCLR"]);
            }
            if (DBNull.Value != feature["HORLEN"] && feature["HORLEN"] is not null) {
                HORLEN = Convert.ToDecimal(feature["HORLEN"]);
            }
            if (DBNull.Value != feature["HORWID"] && feature["HORWID"] is not null) {
                HORWID = Convert.ToDecimal(feature["HORWID"]);
            }
            if (DBNull.Value != feature["LIFCAP"] && feature["LIFCAP"] is not null) {
                LIFCAP = Convert.ToDecimal(feature["LIFCAP"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERCLR"] && feature["VERCLR"] is not null) {
                VERCLR = Convert.ToDecimal(feature["VERCLR"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATCHP"] && feature["CATCHP"] is not null) {
                CATCHP = Convert.ToInt32(feature["CATCHP"]);
            }
            if (DBNull.Value != feature["CATCRN"] && feature["CATCRN"] is not null) {
                CATCRN = Convert.ToInt32(feature["CATCRN"]);
            }
            if (DBNull.Value != feature["CATDIS"] && feature["CATDIS"] is not null) {
                CATDIS = Convert.ToInt32(feature["CATDIS"]);
            }
            if (DBNull.Value != feature["CATHAF"] && feature["CATHAF"] is not null) {
                CATHAF = Convert.ToString(feature["CATHAF"]);
            }
            if (DBNull.Value != feature["CATHLK"] && feature["CATHLK"] is not null) {
                CATHLK = Convert.ToString(feature["CATHLK"]);
            }
            if (DBNull.Value != feature["CATPIL"] && feature["CATPIL"] is not null) {
                CATPIL = Convert.ToInt32(feature["CATPIL"]);
            }
            if (DBNull.Value != feature["CATPLE"] && feature["CATPLE"] is not null) {
                CATPLE = Convert.ToInt32(feature["CATPLE"]);
            }
            if (DBNull.Value != feature["CATRSC"] && feature["CATRSC"] is not null) {
                CATRSC = Convert.ToString(feature["CATRSC"]);
            }
            if (DBNull.Value != feature["CATSCF"] && feature["CATSCF"] is not null) {
                CATSCF = Convert.ToString(feature["CATSCF"]);
            }
            if (DBNull.Value != feature["CATSIT"] && feature["CATSIT"] is not null) {
                CATSIT = Convert.ToString(feature["CATSIT"]);
            }
            if (DBNull.Value != feature["CATSIW"] && feature["CATSIW"] is not null) {
                CATSIW = Convert.ToString(feature["CATSIW"]);
            }
            if (DBNull.Value != feature["COMCHA"] && feature["COMCHA"] is not null) {
                COMCHA = Convert.ToString(feature["COMCHA"]);
            }
            if (DBNull.Value != feature["NPLDST"] && feature["NPLDST"] is not null) {
                NPLDST = Convert.ToString(feature["NPLDST"]);
            }
            if (DBNull.Value != feature["ORIENT"] && feature["ORIENT"] is not null) {
                ORIENT = Convert.ToDecimal(feature["ORIENT"]);
            }
            if (DBNull.Value != feature["PILDST"] && feature["PILDST"] is not null) {
                PILDST = Convert.ToString(feature["PILDST"]);
            }
            if (DBNull.Value != feature["RADIUS"] && feature["RADIUS"] is not null) {
                RADIUS = Convert.ToDecimal(feature["RADIUS"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class PortsAndServicesL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Buoy shape
        /// </summary>
        [Description("Buoy shape")]
        internal int? BOYSHP = default;

        /// <summary>
        /// Category of gate
        /// </summary>
        [Description("Category of gate")]
        internal int? CATGAT = default;

        /// <summary>
        /// Category of mooring/warping facility
        /// </summary>
        [Description("Category of mooring/warping facility")]
        internal int? CATMOR = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Depth range value 1
        /// </summary>
        [Description("Depth range value 1")]
        internal decimal? DRVAL1 = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Horizontal accuracy
        /// </summary>
        [Description("Horizontal accuracy")]
        internal decimal? HORACC = default;

        /// <summary>
        /// Horizontal clearance
        /// </summary>
        [Description("Horizontal clearance")]
        internal decimal? HORCLR = default;

        /// <summary>
        /// Horizontal length
        /// </summary>
        [Description("Horizontal length")]
        internal decimal? HORLEN = default;

        /// <summary>
        /// Horizontal width
        /// </summary>
        [Description("Horizontal width")]
        internal decimal? HORWID = default;

        /// <summary>
        /// Lifting capacity
        /// </summary>
        [Description("Lifting capacity")]
        internal decimal? LIFCAP = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical clearance
        /// </summary>
        [Description("Vertical clearance")]
        internal decimal? VERCLR = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of canal
        /// </summary>
        [Description("Category of canal")]
        internal int? CATCAN = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public PortsAndServicesL(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["BOYSHP"] && feature["BOYSHP"] is not null) {
                BOYSHP = Convert.ToInt32(feature["BOYSHP"]);
            }
            if (DBNull.Value != feature["CATGAT"] && feature["CATGAT"] is not null) {
                CATGAT = Convert.ToInt32(feature["CATGAT"]);
            }
            if (DBNull.Value != feature["CATMOR"] && feature["CATMOR"] is not null) {
                CATMOR = Convert.ToInt32(feature["CATMOR"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["DRVAL1"] && feature["DRVAL1"] is not null) {
                DRVAL1 = Convert.ToDecimal(feature["DRVAL1"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["HORACC"] && feature["HORACC"] is not null) {
                HORACC = Convert.ToDecimal(feature["HORACC"]);
            }
            if (DBNull.Value != feature["HORCLR"] && feature["HORCLR"] is not null) {
                HORCLR = Convert.ToDecimal(feature["HORCLR"]);
            }
            if (DBNull.Value != feature["HORLEN"] && feature["HORLEN"] is not null) {
                HORLEN = Convert.ToDecimal(feature["HORLEN"]);
            }
            if (DBNull.Value != feature["HORWID"] && feature["HORWID"] is not null) {
                HORWID = Convert.ToDecimal(feature["HORWID"]);
            }
            if (DBNull.Value != feature["LIFCAP"] && feature["LIFCAP"] is not null) {
                LIFCAP = Convert.ToDecimal(feature["LIFCAP"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERCLR"] && feature["VERCLR"] is not null) {
                VERCLR = Convert.ToDecimal(feature["VERCLR"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATCAN"] && feature["CATCAN"] is not null) {
                CATCAN = Convert.ToInt32(feature["CATCAN"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class PortsAndServicesA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Buoy shape
        /// </summary>
        [Description("Buoy shape")]
        internal int? BOYSHP = default;

        /// <summary>
        /// Category of gate
        /// </summary>
        [Description("Category of gate")]
        internal int? CATGAT = default;

        /// <summary>
        /// Category of mooring/warping facility
        /// </summary>
        [Description("Category of mooring/warping facility")]
        internal int? CATMOR = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Depth range value 1
        /// </summary>
        [Description("Depth range value 1")]
        internal decimal? DRVAL1 = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Horizontal accuracy
        /// </summary>
        [Description("Horizontal accuracy")]
        internal decimal? HORACC = default;

        /// <summary>
        /// Horizontal clearance
        /// </summary>
        [Description("Horizontal clearance")]
        internal decimal? HORCLR = default;

        /// <summary>
        /// Horizontal length
        /// </summary>
        [Description("Horizontal length")]
        internal decimal? HORLEN = default;

        /// <summary>
        /// Horizontal width
        /// </summary>
        [Description("Horizontal width")]
        internal decimal? HORWID = default;

        /// <summary>
        /// Lifting capacity
        /// </summary>
        [Description("Lifting capacity")]
        internal decimal? LIFCAP = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical clearance
        /// </summary>
        [Description("Vertical clearance")]
        internal decimal? VERCLR = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of canal
        /// </summary>
        [Description("Category of canal")]
        internal int? CATCAN = default;

        /// <summary>
        /// Category of checkpoint
        /// </summary>
        [Description("Category of checkpoint")]
        internal int? CATCHP = default;

        /// <summary>
        /// Category of crane
        /// </summary>
        [Description("Category of crane")]
        internal int? CATCRN = default;

        /// <summary>
        /// Category of dock
        /// </summary>
        [Description("Category of dock")]
        internal int? CATDOC = default;

        /// <summary>
        /// Category of harbour facility
        /// </summary>
        [Description("Category of harbour facility")]
        internal string? CATHAF = default;

        /// <summary>
        /// Category of hulk
        /// </summary>
        [Description("Category of hulk")]
        internal string? CATHLK = default;

        /// <summary>
        /// Category of pilot boarding place
        /// </summary>
        [Description("Category of pilot boarding place")]
        internal int? CATPIL = default;

        /// <summary>
        /// Category of small craft facility
        /// </summary>
        [Description("Category of small craft facility")]
        internal string? CATSCF = default;

        /// <summary>
        /// Communication channel
        /// </summary>
        [Description("Communication channel")]
        internal string? COMCHA = default;

        /// <summary>
        /// Pilot district in national language
        /// </summary>
        [Description("Pilot district in national language")]
        internal string? NPLDST = default;

        /// <summary>
        /// Orientation
        /// </summary>
        [Description("Orientation")]
        internal decimal? ORIENT = default;

        /// <summary>
        /// Pilot district
        /// </summary>
        [Description("Pilot district")]
        internal string? PILDST = default;

        /// <summary>
        /// Radius
        /// </summary>
        [Description("Radius")]
        internal decimal? RADIUS = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public PortsAndServicesA(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["BOYSHP"] && feature["BOYSHP"] is not null) {
                BOYSHP = Convert.ToInt32(feature["BOYSHP"]);
            }
            if (DBNull.Value != feature["CATGAT"] && feature["CATGAT"] is not null) {
                CATGAT = Convert.ToInt32(feature["CATGAT"]);
            }
            if (DBNull.Value != feature["CATMOR"] && feature["CATMOR"] is not null) {
                CATMOR = Convert.ToInt32(feature["CATMOR"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["DRVAL1"] && feature["DRVAL1"] is not null) {
                DRVAL1 = Convert.ToDecimal(feature["DRVAL1"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["HORACC"] && feature["HORACC"] is not null) {
                HORACC = Convert.ToDecimal(feature["HORACC"]);
            }
            if (DBNull.Value != feature["HORCLR"] && feature["HORCLR"] is not null) {
                HORCLR = Convert.ToDecimal(feature["HORCLR"]);
            }
            if (DBNull.Value != feature["HORLEN"] && feature["HORLEN"] is not null) {
                HORLEN = Convert.ToDecimal(feature["HORLEN"]);
            }
            if (DBNull.Value != feature["HORWID"] && feature["HORWID"] is not null) {
                HORWID = Convert.ToDecimal(feature["HORWID"]);
            }
            if (DBNull.Value != feature["LIFCAP"] && feature["LIFCAP"] is not null) {
                LIFCAP = Convert.ToDecimal(feature["LIFCAP"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERCLR"] && feature["VERCLR"] is not null) {
                VERCLR = Convert.ToDecimal(feature["VERCLR"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATCAN"] && feature["CATCAN"] is not null) {
                CATCAN = Convert.ToInt32(feature["CATCAN"]);
            }
            if (DBNull.Value != feature["CATCHP"] && feature["CATCHP"] is not null) {
                CATCHP = Convert.ToInt32(feature["CATCHP"]);
            }
            if (DBNull.Value != feature["CATCRN"] && feature["CATCRN"] is not null) {
                CATCRN = Convert.ToInt32(feature["CATCRN"]);
            }
            if (DBNull.Value != feature["CATDOC"] && feature["CATDOC"] is not null) {
                CATDOC = Convert.ToInt32(feature["CATDOC"]);
            }
            if (DBNull.Value != feature["CATHAF"] && feature["CATHAF"] is not null) {
                CATHAF = Convert.ToString(feature["CATHAF"]);
            }
            if (DBNull.Value != feature["CATHLK"] && feature["CATHLK"] is not null) {
                CATHLK = Convert.ToString(feature["CATHLK"]);
            }
            if (DBNull.Value != feature["CATPIL"] && feature["CATPIL"] is not null) {
                CATPIL = Convert.ToInt32(feature["CATPIL"]);
            }
            if (DBNull.Value != feature["CATSCF"] && feature["CATSCF"] is not null) {
                CATSCF = Convert.ToString(feature["CATSCF"]);
            }
            if (DBNull.Value != feature["COMCHA"] && feature["COMCHA"] is not null) {
                COMCHA = Convert.ToString(feature["COMCHA"]);
            }
            if (DBNull.Value != feature["NPLDST"] && feature["NPLDST"] is not null) {
                NPLDST = Convert.ToString(feature["NPLDST"]);
            }
            if (DBNull.Value != feature["ORIENT"] && feature["ORIENT"] is not null) {
                ORIENT = Convert.ToDecimal(feature["ORIENT"]);
            }
            if (DBNull.Value != feature["PILDST"] && feature["PILDST"] is not null) {
                PILDST = Convert.ToString(feature["PILDST"]);
            }
            if (DBNull.Value != feature["RADIUS"] && feature["RADIUS"] is not null) {
                RADIUS = Convert.ToDecimal(feature["RADIUS"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class CulturalFeaturesA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Buried depth
        /// </summary>
        [Description("Buried depth")]
        internal decimal? BURDEP = default;

        /// <summary>
        /// Category of bridge
        /// </summary>
        [Description("Category of bridge")]
        internal string? CATBRG = default;

        /// <summary>
        /// Category of dam
        /// </summary>
        [Description("Category of dam")]
        internal int? CATDAM = default;

        /// <summary>
        /// Category of fortified structure
        /// </summary>
        [Description("Category of fortified structure")]
        internal int? CATFOR = default;

        /// <summary>
        /// Category of landmark
        /// </summary>
        [Description("Category of landmark")]
        internal string? CATLMK = default;

        /// <summary>
        /// Category of road
        /// </summary>
        [Description("Category of road")]
        internal int? CATROD = default;

        /// <summary>
        /// Category of runway
        /// </summary>
        [Description("Category of runway")]
        internal int? CATRUN = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Elevation
        /// </summary>
        [Description("Elevation")]
        internal decimal? ELEVAT = default;

        /// <summary>
        /// Function
        /// </summary>
        [Description("Function")]
        internal string? FUNCTN = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Horizontal accuracy
        /// </summary>
        [Description("Horizontal accuracy")]
        internal decimal? HORACC = default;

        /// <summary>
        /// Horizontal clearance
        /// </summary>
        [Description("Horizontal clearance")]
        internal decimal? HORCLR = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Product
        /// </summary>
        [Description("Product")]
        internal string? PRODCT = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical clearance, closed
        /// </summary>
        [Description("Vertical clearance, closed")]
        internal decimal? VERCCL = default;

        /// <summary>
        /// Vertical clearance
        /// </summary>
        [Description("Vertical clearance")]
        internal decimal? VERCLR = default;

        /// <summary>
        /// Vertical clearance, open
        /// </summary>
        [Description("Vertical clearance, open")]
        internal decimal? VERCOP = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Building shape
        /// </summary>
        [Description("Building shape")]
        internal int? BUISHP = default;

        /// <summary>
        /// Category of airport/airfield
        /// </summary>
        [Description("Category of airport/airfield")]
        internal string? CATAIR = default;

        /// <summary>
        /// Category of built-up area
        /// </summary>
        [Description("Category of built-up area")]
        internal int? CATBUA = default;

        /// <summary>
        /// Category of conveyor
        /// </summary>
        [Description("Category of conveyor")]
        internal int? CATCON = default;

        /// <summary>
        /// Category of production area
        /// </summary>
        [Description("Category of production area")]
        internal int? CATPRA = default;

        /// <summary>
        /// Category of pylon
        /// </summary>
        [Description("Category of pylon")]
        internal int? CATPYL = default;

        /// <summary>
        /// Category of silo/tank
        /// </summary>
        [Description("Category of silo/tank")]
        internal int? CATSIL = default;

        /// <summary>
        /// Lifting capacity
        /// </summary>
        [Description("Lifting capacity")]
        internal decimal? LIFCAP = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public CulturalFeaturesA(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["BURDEP"] && feature["BURDEP"] is not null) {
                BURDEP = Convert.ToDecimal(feature["BURDEP"]);
            }
            if (DBNull.Value != feature["CATBRG"] && feature["CATBRG"] is not null) {
                CATBRG = Convert.ToString(feature["CATBRG"]);
            }
            if (DBNull.Value != feature["CATDAM"] && feature["CATDAM"] is not null) {
                CATDAM = Convert.ToInt32(feature["CATDAM"]);
            }
            if (DBNull.Value != feature["CATFOR"] && feature["CATFOR"] is not null) {
                CATFOR = Convert.ToInt32(feature["CATFOR"]);
            }
            if (DBNull.Value != feature["CATLMK"] && feature["CATLMK"] is not null) {
                CATLMK = Convert.ToString(feature["CATLMK"]);
            }
            if (DBNull.Value != feature["CATROD"] && feature["CATROD"] is not null) {
                CATROD = Convert.ToInt32(feature["CATROD"]);
            }
            if (DBNull.Value != feature["CATRUN"] && feature["CATRUN"] is not null) {
                CATRUN = Convert.ToInt32(feature["CATRUN"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["ELEVAT"] && feature["ELEVAT"] is not null) {
                ELEVAT = Convert.ToDecimal(feature["ELEVAT"]);
            }
            if (DBNull.Value != feature["FUNCTN"] && feature["FUNCTN"] is not null) {
                FUNCTN = Convert.ToString(feature["FUNCTN"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["HORACC"] && feature["HORACC"] is not null) {
                HORACC = Convert.ToDecimal(feature["HORACC"]);
            }
            if (DBNull.Value != feature["HORCLR"] && feature["HORCLR"] is not null) {
                HORCLR = Convert.ToDecimal(feature["HORCLR"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["PRODCT"] && feature["PRODCT"] is not null) {
                PRODCT = Convert.ToString(feature["PRODCT"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERCCL"] && feature["VERCCL"] is not null) {
                VERCCL = Convert.ToDecimal(feature["VERCCL"]);
            }
            if (DBNull.Value != feature["VERCLR"] && feature["VERCLR"] is not null) {
                VERCLR = Convert.ToDecimal(feature["VERCLR"]);
            }
            if (DBNull.Value != feature["VERCOP"] && feature["VERCOP"] is not null) {
                VERCOP = Convert.ToDecimal(feature["VERCOP"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["BUISHP"] && feature["BUISHP"] is not null) {
                BUISHP = Convert.ToInt32(feature["BUISHP"]);
            }
            if (DBNull.Value != feature["CATAIR"] && feature["CATAIR"] is not null) {
                CATAIR = Convert.ToString(feature["CATAIR"]);
            }
            if (DBNull.Value != feature["CATBUA"] && feature["CATBUA"] is not null) {
                CATBUA = Convert.ToInt32(feature["CATBUA"]);
            }
            if (DBNull.Value != feature["CATCON"] && feature["CATCON"] is not null) {
                CATCON = Convert.ToInt32(feature["CATCON"]);
            }
            if (DBNull.Value != feature["CATPRA"] && feature["CATPRA"] is not null) {
                CATPRA = Convert.ToInt32(feature["CATPRA"]);
            }
            if (DBNull.Value != feature["CATPYL"] && feature["CATPYL"] is not null) {
                CATPYL = Convert.ToInt32(feature["CATPYL"]);
            }
            if (DBNull.Value != feature["CATSIL"] && feature["CATSIL"] is not null) {
                CATSIL = Convert.ToInt32(feature["CATSIL"]);
            }
            if (DBNull.Value != feature["LIFCAP"] && feature["LIFCAP"] is not null) {
                LIFCAP = Convert.ToDecimal(feature["LIFCAP"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class CulturalFeaturesL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Buried depth
        /// </summary>
        [Description("Buried depth")]
        internal decimal? BURDEP = default;

        /// <summary>
        /// Category of bridge
        /// </summary>
        [Description("Category of bridge")]
        internal string? CATBRG = default;

        /// <summary>
        /// Category of dam
        /// </summary>
        [Description("Category of dam")]
        internal int? CATDAM = default;

        /// <summary>
        /// Category of fortified structure
        /// </summary>
        [Description("Category of fortified structure")]
        internal int? CATFOR = default;

        /// <summary>
        /// Category of landmark
        /// </summary>
        [Description("Category of landmark")]
        internal string? CATLMK = default;

        /// <summary>
        /// Category of road
        /// </summary>
        [Description("Category of road")]
        internal int? CATROD = default;

        /// <summary>
        /// Category of runway
        /// </summary>
        [Description("Category of runway")]
        internal int? CATRUN = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Elevation
        /// </summary>
        [Description("Elevation")]
        internal decimal? ELEVAT = default;

        /// <summary>
        /// Function
        /// </summary>
        [Description("Function")]
        internal string? FUNCTN = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Horizontal accuracy
        /// </summary>
        [Description("Horizontal accuracy")]
        internal decimal? HORACC = default;

        /// <summary>
        /// Horizontal clearance
        /// </summary>
        [Description("Horizontal clearance")]
        internal decimal? HORCLR = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Product
        /// </summary>
        [Description("Product")]
        internal string? PRODCT = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical clearance, closed
        /// </summary>
        [Description("Vertical clearance, closed")]
        internal decimal? VERCCL = default;

        /// <summary>
        /// Vertical clearance
        /// </summary>
        [Description("Vertical clearance")]
        internal decimal? VERCLR = default;

        /// <summary>
        /// Vertical clearance, open
        /// </summary>
        [Description("Vertical clearance, open")]
        internal decimal? VERCOP = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of cable
        /// </summary>
        [Description("Category of cable")]
        internal int? CATCBL = default;

        /// <summary>
        /// Category of conveyor
        /// </summary>
        [Description("Category of conveyor")]
        internal int? CATCON = default;

        /// <summary>
        /// Category of fence/wall
        /// </summary>
        [Description("Category of fence/wall")]
        internal int? CATFNC = default;

        /// <summary>
        /// Category of pipeline/pipe
        /// </summary>
        [Description("Category of pipeline/pipe")]
        internal string? CATPIP = default;

        /// <summary>
        /// Ice factor
        /// </summary>
        [Description("Ice factor")]
        internal decimal? ICEFAC = default;

        /// <summary>
        /// Lifting capacity
        /// </summary>
        [Description("Lifting capacity")]
        internal decimal? LIFCAP = default;

        /// <summary>
        /// Vertical clearance, safe
        /// </summary>
        [Description("Vertical clearance, safe")]
        internal decimal? VERCSA = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public CulturalFeaturesL(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["BURDEP"] && feature["BURDEP"] is not null) {
                BURDEP = Convert.ToDecimal(feature["BURDEP"]);
            }
            if (DBNull.Value != feature["CATBRG"] && feature["CATBRG"] is not null) {
                CATBRG = Convert.ToString(feature["CATBRG"]);
            }
            if (DBNull.Value != feature["CATDAM"] && feature["CATDAM"] is not null) {
                CATDAM = Convert.ToInt32(feature["CATDAM"]);
            }
            if (DBNull.Value != feature["CATFOR"] && feature["CATFOR"] is not null) {
                CATFOR = Convert.ToInt32(feature["CATFOR"]);
            }
            if (DBNull.Value != feature["CATLMK"] && feature["CATLMK"] is not null) {
                CATLMK = Convert.ToString(feature["CATLMK"]);
            }
            if (DBNull.Value != feature["CATROD"] && feature["CATROD"] is not null) {
                CATROD = Convert.ToInt32(feature["CATROD"]);
            }
            if (DBNull.Value != feature["CATRUN"] && feature["CATRUN"] is not null) {
                CATRUN = Convert.ToInt32(feature["CATRUN"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["ELEVAT"] && feature["ELEVAT"] is not null) {
                ELEVAT = Convert.ToDecimal(feature["ELEVAT"]);
            }
            if (DBNull.Value != feature["FUNCTN"] && feature["FUNCTN"] is not null) {
                FUNCTN = Convert.ToString(feature["FUNCTN"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["HORACC"] && feature["HORACC"] is not null) {
                HORACC = Convert.ToDecimal(feature["HORACC"]);
            }
            if (DBNull.Value != feature["HORCLR"] && feature["HORCLR"] is not null) {
                HORCLR = Convert.ToDecimal(feature["HORCLR"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["PRODCT"] && feature["PRODCT"] is not null) {
                PRODCT = Convert.ToString(feature["PRODCT"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERCCL"] && feature["VERCCL"] is not null) {
                VERCCL = Convert.ToDecimal(feature["VERCCL"]);
            }
            if (DBNull.Value != feature["VERCLR"] && feature["VERCLR"] is not null) {
                VERCLR = Convert.ToDecimal(feature["VERCLR"]);
            }
            if (DBNull.Value != feature["VERCOP"] && feature["VERCOP"] is not null) {
                VERCOP = Convert.ToDecimal(feature["VERCOP"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATCBL"] && feature["CATCBL"] is not null) {
                CATCBL = Convert.ToInt32(feature["CATCBL"]);
            }
            if (DBNull.Value != feature["CATCON"] && feature["CATCON"] is not null) {
                CATCON = Convert.ToInt32(feature["CATCON"]);
            }
            if (DBNull.Value != feature["CATFNC"] && feature["CATFNC"] is not null) {
                CATFNC = Convert.ToInt32(feature["CATFNC"]);
            }
            if (DBNull.Value != feature["CATPIP"] && feature["CATPIP"] is not null) {
                CATPIP = Convert.ToString(feature["CATPIP"]);
            }
            if (DBNull.Value != feature["ICEFAC"] && feature["ICEFAC"] is not null) {
                ICEFAC = Convert.ToDecimal(feature["ICEFAC"]);
            }
            if (DBNull.Value != feature["LIFCAP"] && feature["LIFCAP"] is not null) {
                LIFCAP = Convert.ToDecimal(feature["LIFCAP"]);
            }
            if (DBNull.Value != feature["VERCSA"] && feature["VERCSA"] is not null) {
                VERCSA = Convert.ToDecimal(feature["VERCSA"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class CulturalFeaturesP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Buried depth
        /// </summary>
        [Description("Buried depth")]
        internal decimal? BURDEP = default;

        /// <summary>
        /// Category of bridge
        /// </summary>
        [Description("Category of bridge")]
        internal string? CATBRG = default;

        /// <summary>
        /// Category of dam
        /// </summary>
        [Description("Category of dam")]
        internal int? CATDAM = default;

        /// <summary>
        /// Category of fortified structure
        /// </summary>
        [Description("Category of fortified structure")]
        internal int? CATFOR = default;

        /// <summary>
        /// Category of landmark
        /// </summary>
        [Description("Category of landmark")]
        internal string? CATLMK = default;

        /// <summary>
        /// Category of road
        /// </summary>
        [Description("Category of road")]
        internal int? CATROD = default;

        /// <summary>
        /// Category of runway
        /// </summary>
        [Description("Category of runway")]
        internal int? CATRUN = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Elevation
        /// </summary>
        [Description("Elevation")]
        internal decimal? ELEVAT = default;

        /// <summary>
        /// Function
        /// </summary>
        [Description("Function")]
        internal string? FUNCTN = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Horizontal accuracy
        /// </summary>
        [Description("Horizontal accuracy")]
        internal decimal? HORACC = default;

        /// <summary>
        /// Horizontal clearance
        /// </summary>
        [Description("Horizontal clearance")]
        internal decimal? HORCLR = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Product
        /// </summary>
        [Description("Product")]
        internal string? PRODCT = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical clearance, closed
        /// </summary>
        [Description("Vertical clearance, closed")]
        internal decimal? VERCCL = default;

        /// <summary>
        /// Vertical clearance
        /// </summary>
        [Description("Vertical clearance")]
        internal decimal? VERCLR = default;

        /// <summary>
        /// Vertical clearance, open
        /// </summary>
        [Description("Vertical clearance, open")]
        internal decimal? VERCOP = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Building shape
        /// </summary>
        [Description("Building shape")]
        internal int? BUISHP = default;

        /// <summary>
        /// Category of airport/airfield
        /// </summary>
        [Description("Category of airport/airfield")]
        internal string? CATAIR = default;

        /// <summary>
        /// Category of built-up area
        /// </summary>
        [Description("Category of built-up area")]
        internal int? CATBUA = default;

        /// <summary>
        /// Category of control point
        /// </summary>
        [Description("Category of control point")]
        internal int? CATCTR = default;

        /// <summary>
        /// Category of production area
        /// </summary>
        [Description("Category of production area")]
        internal int? CATPRA = default;

        /// <summary>
        /// Category of pylon
        /// </summary>
        [Description("Category of pylon")]
        internal int? CATPYL = default;

        /// <summary>
        /// Category of silo/tank
        /// </summary>
        [Description("Category of silo/tank")]
        internal int? CATSIL = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public CulturalFeaturesP(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["BURDEP"] && feature["BURDEP"] is not null) {
                BURDEP = Convert.ToDecimal(feature["BURDEP"]);
            }
            if (DBNull.Value != feature["CATBRG"] && feature["CATBRG"] is not null) {
                CATBRG = Convert.ToString(feature["CATBRG"]);
            }
            if (DBNull.Value != feature["CATDAM"] && feature["CATDAM"] is not null) {
                CATDAM = Convert.ToInt32(feature["CATDAM"]);
            }
            if (DBNull.Value != feature["CATFOR"] && feature["CATFOR"] is not null) {
                CATFOR = Convert.ToInt32(feature["CATFOR"]);
            }
            if (DBNull.Value != feature["CATLMK"] && feature["CATLMK"] is not null) {
                CATLMK = Convert.ToString(feature["CATLMK"]);
            }
            if (DBNull.Value != feature["CATROD"] && feature["CATROD"] is not null) {
                CATROD = Convert.ToInt32(feature["CATROD"]);
            }
            if (DBNull.Value != feature["CATRUN"] && feature["CATRUN"] is not null) {
                CATRUN = Convert.ToInt32(feature["CATRUN"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["ELEVAT"] && feature["ELEVAT"] is not null) {
                ELEVAT = Convert.ToDecimal(feature["ELEVAT"]);
            }
            if (DBNull.Value != feature["FUNCTN"] && feature["FUNCTN"] is not null) {
                FUNCTN = Convert.ToString(feature["FUNCTN"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["HORACC"] && feature["HORACC"] is not null) {
                HORACC = Convert.ToDecimal(feature["HORACC"]);
            }
            if (DBNull.Value != feature["HORCLR"] && feature["HORCLR"] is not null) {
                HORCLR = Convert.ToDecimal(feature["HORCLR"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["PRODCT"] && feature["PRODCT"] is not null) {
                PRODCT = Convert.ToString(feature["PRODCT"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERCCL"] && feature["VERCCL"] is not null) {
                VERCCL = Convert.ToDecimal(feature["VERCCL"]);
            }
            if (DBNull.Value != feature["VERCLR"] && feature["VERCLR"] is not null) {
                VERCLR = Convert.ToDecimal(feature["VERCLR"]);
            }
            if (DBNull.Value != feature["VERCOP"] && feature["VERCOP"] is not null) {
                VERCOP = Convert.ToDecimal(feature["VERCOP"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["BUISHP"] && feature["BUISHP"] is not null) {
                BUISHP = Convert.ToInt32(feature["BUISHP"]);
            }
            if (DBNull.Value != feature["CATAIR"] && feature["CATAIR"] is not null) {
                CATAIR = Convert.ToString(feature["CATAIR"]);
            }
            if (DBNull.Value != feature["CATBUA"] && feature["CATBUA"] is not null) {
                CATBUA = Convert.ToInt32(feature["CATBUA"]);
            }
            if (DBNull.Value != feature["CATCTR"] && feature["CATCTR"] is not null) {
                CATCTR = Convert.ToInt32(feature["CATCTR"]);
            }
            if (DBNull.Value != feature["CATPRA"] && feature["CATPRA"] is not null) {
                CATPRA = Convert.ToInt32(feature["CATPRA"]);
            }
            if (DBNull.Value != feature["CATPYL"] && feature["CATPYL"] is not null) {
                CATPYL = Convert.ToInt32(feature["CATPYL"]);
            }
            if (DBNull.Value != feature["CATSIL"] && feature["CATSIL"] is not null) {
                CATSIL = Convert.ToInt32(feature["CATSIL"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class NaturalFeaturesP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of slope
        /// </summary>
        [Description("Category of slope")]
        internal int? CATSLO = default;

        /// <summary>
        /// Category of vegetation
        /// </summary>
        [Description("Category of vegetation")]
        internal string? CATVEG = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Elevation
        /// </summary>
        [Description("Elevation")]
        internal decimal? ELEVAT = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Nature of surface - qualifying terms
        /// </summary>
        [Description("Nature of surface - qualifying terms")]
        internal string? NATQUA = default;

        /// <summary>
        /// Nature of surface
        /// </summary>
        [Description("Nature of surface")]
        internal string? NATSUR = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of land region
        /// </summary>
        [Description("Category of land region")]
        internal string? CATLND = default;

        /// <summary>
        /// Category of sea area
        /// </summary>
        [Description("Category of sea area")]
        internal int? CATSEA = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public NaturalFeaturesP(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATSLO"] && feature["CATSLO"] is not null) {
                CATSLO = Convert.ToInt32(feature["CATSLO"]);
            }
            if (DBNull.Value != feature["CATVEG"] && feature["CATVEG"] is not null) {
                CATVEG = Convert.ToString(feature["CATVEG"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["ELEVAT"] && feature["ELEVAT"] is not null) {
                ELEVAT = Convert.ToDecimal(feature["ELEVAT"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["NATQUA"] && feature["NATQUA"] is not null) {
                NATQUA = Convert.ToString(feature["NATQUA"]);
            }
            if (DBNull.Value != feature["NATSUR"] && feature["NATSUR"] is not null) {
                NATSUR = Convert.ToString(feature["NATSUR"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATLND"] && feature["CATLND"] is not null) {
                CATLND = Convert.ToString(feature["CATLND"]);
            }
            if (DBNull.Value != feature["CATSEA"] && feature["CATSEA"] is not null) {
                CATSEA = Convert.ToInt32(feature["CATSEA"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class NaturalFeaturesL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of slope
        /// </summary>
        [Description("Category of slope")]
        internal int? CATSLO = default;

        /// <summary>
        /// Category of vegetation
        /// </summary>
        [Description("Category of vegetation")]
        internal string? CATVEG = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Elevation
        /// </summary>
        [Description("Elevation")]
        internal decimal? ELEVAT = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Nature of surface - qualifying terms
        /// </summary>
        [Description("Nature of surface - qualifying terms")]
        internal string? NATQUA = default;

        /// <summary>
        /// Nature of surface
        /// </summary>
        [Description("Nature of surface")]
        internal string? NATSUR = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public NaturalFeaturesL(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATSLO"] && feature["CATSLO"] is not null) {
                CATSLO = Convert.ToInt32(feature["CATSLO"]);
            }
            if (DBNull.Value != feature["CATVEG"] && feature["CATVEG"] is not null) {
                CATVEG = Convert.ToString(feature["CATVEG"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["ELEVAT"] && feature["ELEVAT"] is not null) {
                ELEVAT = Convert.ToDecimal(feature["ELEVAT"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["NATQUA"] && feature["NATQUA"] is not null) {
                NATQUA = Convert.ToString(feature["NATQUA"]);
            }
            if (DBNull.Value != feature["NATSUR"] && feature["NATSUR"] is not null) {
                NATSUR = Convert.ToString(feature["NATSUR"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class NaturalFeaturesA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of slope
        /// </summary>
        [Description("Category of slope")]
        internal int? CATSLO = default;

        /// <summary>
        /// Category of vegetation
        /// </summary>
        [Description("Category of vegetation")]
        internal string? CATVEG = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Elevation
        /// </summary>
        [Description("Elevation")]
        internal decimal? ELEVAT = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Nature of surface - qualifying terms
        /// </summary>
        [Description("Nature of surface - qualifying terms")]
        internal string? NATQUA = default;

        /// <summary>
        /// Nature of surface
        /// </summary>
        [Description("Nature of surface")]
        internal string? NATSUR = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of land region
        /// </summary>
        [Description("Category of land region")]
        internal string? CATLND = default;

        /// <summary>
        /// Category of sea area
        /// </summary>
        [Description("Category of sea area")]
        internal int? CATSEA = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public NaturalFeaturesA(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATSLO"] && feature["CATSLO"] is not null) {
                CATSLO = Convert.ToInt32(feature["CATSLO"]);
            }
            if (DBNull.Value != feature["CATVEG"] && feature["CATVEG"] is not null) {
                CATVEG = Convert.ToString(feature["CATVEG"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["ELEVAT"] && feature["ELEVAT"] is not null) {
                ELEVAT = Convert.ToDecimal(feature["ELEVAT"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["NATQUA"] && feature["NATQUA"] is not null) {
                NATQUA = Convert.ToString(feature["NATQUA"]);
            }
            if (DBNull.Value != feature["NATSUR"] && feature["NATSUR"] is not null) {
                NATSUR = Convert.ToString(feature["NATSUR"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATLND"] && feature["CATLND"] is not null) {
                CATLND = Convert.ToString(feature["CATLND"]);
            }
            if (DBNull.Value != feature["CATSEA"] && feature["CATSEA"] is not null) {
                CATSEA = Convert.ToInt32(feature["CATSEA"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class CoastlineL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of shoreline construction
        /// </summary>
        [Description("Category of shoreline construction")]
        internal int? CATSLC = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Horizontal accuracy
        /// </summary>
        [Description("Horizontal accuracy")]
        internal decimal? HORACC = default;

        /// <summary>
        /// Horizontal clearance
        /// </summary>
        [Description("Horizontal clearance")]
        internal decimal? HORCLR = default;

        /// <summary>
        /// Horizontal length
        /// </summary>
        [Description("Horizontal length")]
        internal decimal? HORLEN = default;

        /// <summary>
        /// Horizontal width
        /// </summary>
        [Description("Horizontal width")]
        internal decimal? HORWID = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of coastline
        /// </summary>
        [Description("Category of coastline")]
        internal int? CATCOA = default;

        /// <summary>
        /// Elevation
        /// </summary>
        [Description("Elevation")]
        internal decimal? ELEVAT = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public CoastlineL(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATSLC"] && feature["CATSLC"] is not null) {
                CATSLC = Convert.ToInt32(feature["CATSLC"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["HORACC"] && feature["HORACC"] is not null) {
                HORACC = Convert.ToDecimal(feature["HORACC"]);
            }
            if (DBNull.Value != feature["HORCLR"] && feature["HORCLR"] is not null) {
                HORCLR = Convert.ToDecimal(feature["HORCLR"]);
            }
            if (DBNull.Value != feature["HORLEN"] && feature["HORLEN"] is not null) {
                HORLEN = Convert.ToDecimal(feature["HORLEN"]);
            }
            if (DBNull.Value != feature["HORWID"] && feature["HORWID"] is not null) {
                HORWID = Convert.ToDecimal(feature["HORWID"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATCOA"] && feature["CATCOA"] is not null) {
                CATCOA = Convert.ToInt32(feature["CATCOA"]);
            }
            if (DBNull.Value != feature["ELEVAT"] && feature["ELEVAT"] is not null) {
                ELEVAT = Convert.ToDecimal(feature["ELEVAT"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class CoastlineP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of shoreline construction
        /// </summary>
        [Description("Category of shoreline construction")]
        internal int? CATSLC = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Horizontal accuracy
        /// </summary>
        [Description("Horizontal accuracy")]
        internal decimal? HORACC = default;

        /// <summary>
        /// Horizontal clearance
        /// </summary>
        [Description("Horizontal clearance")]
        internal decimal? HORCLR = default;

        /// <summary>
        /// Horizontal length
        /// </summary>
        [Description("Horizontal length")]
        internal decimal? HORLEN = default;

        /// <summary>
        /// Horizontal width
        /// </summary>
        [Description("Horizontal width")]
        internal decimal? HORWID = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public CoastlineP(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATSLC"] && feature["CATSLC"] is not null) {
                CATSLC = Convert.ToInt32(feature["CATSLC"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["HORACC"] && feature["HORACC"] is not null) {
                HORACC = Convert.ToDecimal(feature["HORACC"]);
            }
            if (DBNull.Value != feature["HORCLR"] && feature["HORCLR"] is not null) {
                HORCLR = Convert.ToDecimal(feature["HORCLR"]);
            }
            if (DBNull.Value != feature["HORLEN"] && feature["HORLEN"] is not null) {
                HORLEN = Convert.ToDecimal(feature["HORLEN"]);
            }
            if (DBNull.Value != feature["HORWID"] && feature["HORWID"] is not null) {
                HORWID = Convert.ToDecimal(feature["HORWID"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class CoastlineA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of shoreline construction
        /// </summary>
        [Description("Category of shoreline construction")]
        internal int? CATSLC = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Horizontal accuracy
        /// </summary>
        [Description("Horizontal accuracy")]
        internal decimal? HORACC = default;

        /// <summary>
        /// Horizontal clearance
        /// </summary>
        [Description("Horizontal clearance")]
        internal decimal? HORCLR = default;

        /// <summary>
        /// Horizontal length
        /// </summary>
        [Description("Horizontal length")]
        internal decimal? HORLEN = default;

        /// <summary>
        /// Horizontal width
        /// </summary>
        [Description("Horizontal width")]
        internal decimal? HORWID = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public CoastlineA(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATSLC"] && feature["CATSLC"] is not null) {
                CATSLC = Convert.ToInt32(feature["CATSLC"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["HORACC"] && feature["HORACC"] is not null) {
                HORACC = Convert.ToDecimal(feature["HORACC"]);
            }
            if (DBNull.Value != feature["HORCLR"] && feature["HORCLR"] is not null) {
                HORCLR = Convert.ToDecimal(feature["HORCLR"]);
            }
            if (DBNull.Value != feature["HORLEN"] && feature["HORLEN"] is not null) {
                HORLEN = Convert.ToDecimal(feature["HORLEN"]);
            }
            if (DBNull.Value != feature["HORWID"] && feature["HORWID"] is not null) {
                HORWID = Convert.ToDecimal(feature["HORWID"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class RegulatedAreasAndLimitsL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category marine farm/culture
        /// </summary>
        [Description("Category marine farm/culture")]
        internal int? CATMFA = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Exposition of sounding
        /// </summary>
        [Description("Exposition of sounding")]
        internal int? EXPSOU = default;

        /// <summary>
        /// Nationality
        /// </summary>
        [Description("Nationality")]
        internal string? NATION = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Restriction
        /// </summary>
        [Description("Restriction")]
        internal string? RESTRN = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Value of sounding
        /// </summary>
        [Description("Value of sounding")]
        internal decimal? VALSOU = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public RegulatedAreasAndLimitsL(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATMFA"] && feature["CATMFA"] is not null) {
                CATMFA = Convert.ToInt32(feature["CATMFA"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["EXPSOU"] && feature["EXPSOU"] is not null) {
                EXPSOU = Convert.ToInt32(feature["EXPSOU"]);
            }
            if (DBNull.Value != feature["NATION"] && feature["NATION"] is not null) {
                NATION = Convert.ToString(feature["NATION"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["RESTRN"] && feature["RESTRN"] is not null) {
                RESTRN = Convert.ToString(feature["RESTRN"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VALSOU"] && feature["VALSOU"] is not null) {
                VALSOU = Convert.ToDecimal(feature["VALSOU"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class RegulatedAreasAndLimitsP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category marine farm/culture
        /// </summary>
        [Description("Category marine farm/culture")]
        internal int? CATMFA = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Exposition of sounding
        /// </summary>
        [Description("Exposition of sounding")]
        internal int? EXPSOU = default;

        /// <summary>
        /// Nationality
        /// </summary>
        [Description("Nationality")]
        internal string? NATION = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Restriction
        /// </summary>
        [Description("Restriction")]
        internal string? RESTRN = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Value of sounding
        /// </summary>
        [Description("Value of sounding")]
        internal decimal? VALSOU = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of anchorage
        /// </summary>
        [Description("Category of anchorage")]
        internal string? CATACH = default;

        /// <summary>
        /// Category of dumping ground
        /// </summary>
        [Description("Category of dumping ground")]
        internal string? CATDPG = default;

        /// <summary>
        /// Radius
        /// </summary>
        [Description("Radius")]
        internal decimal? RADIUS = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public RegulatedAreasAndLimitsP(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATMFA"] && feature["CATMFA"] is not null) {
                CATMFA = Convert.ToInt32(feature["CATMFA"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["EXPSOU"] && feature["EXPSOU"] is not null) {
                EXPSOU = Convert.ToInt32(feature["EXPSOU"]);
            }
            if (DBNull.Value != feature["NATION"] && feature["NATION"] is not null) {
                NATION = Convert.ToString(feature["NATION"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["RESTRN"] && feature["RESTRN"] is not null) {
                RESTRN = Convert.ToString(feature["RESTRN"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VALSOU"] && feature["VALSOU"] is not null) {
                VALSOU = Convert.ToDecimal(feature["VALSOU"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATACH"] && feature["CATACH"] is not null) {
                CATACH = Convert.ToString(feature["CATACH"]);
            }
            if (DBNull.Value != feature["CATDPG"] && feature["CATDPG"] is not null) {
                CATDPG = Convert.ToString(feature["CATDPG"]);
            }
            if (DBNull.Value != feature["RADIUS"] && feature["RADIUS"] is not null) {
                RADIUS = Convert.ToDecimal(feature["RADIUS"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class RegulatedAreasAndLimitsA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category marine farm/culture
        /// </summary>
        [Description("Category marine farm/culture")]
        internal int? CATMFA = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Exposition of sounding
        /// </summary>
        [Description("Exposition of sounding")]
        internal int? EXPSOU = default;

        /// <summary>
        /// Nationality
        /// </summary>
        [Description("Nationality")]
        internal string? NATION = default;

        /// <summary>
        /// Periodic date end
        /// </summary>
        [Description("Periodic date end")]
        internal string? PEREND = default;

        /// <summary>
        /// Periodic date start
        /// </summary>
        [Description("Periodic date start")]
        internal string? PERSTA = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Restriction
        /// </summary>
        [Description("Restriction")]
        internal string? RESTRN = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Value of sounding
        /// </summary>
        [Description("Value of sounding")]
        internal decimal? VALSOU = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Water level effect
        /// </summary>
        [Description("Water level effect")]
        internal int? WATLEV = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of anchorage
        /// </summary>
        [Description("Category of anchorage")]
        internal string? CATACH = default;

        /// <summary>
        /// Category of dumping ground
        /// </summary>
        [Description("Category of dumping ground")]
        internal string? CATDPG = default;

        /// <summary>
        /// Category of restricted area
        /// </summary>
        [Description("Category of restricted area")]
        internal string? CATREA = default;

        /// <summary>
        /// Jurisdiction
        /// </summary>
        [Description("Jurisdiction")]
        internal int? JRSDTN = default;

        /// <summary>
        /// Radius
        /// </summary>
        [Description("Radius")]
        internal decimal? RADIUS = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public RegulatedAreasAndLimitsA(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATMFA"] && feature["CATMFA"] is not null) {
                CATMFA = Convert.ToInt32(feature["CATMFA"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["EXPSOU"] && feature["EXPSOU"] is not null) {
                EXPSOU = Convert.ToInt32(feature["EXPSOU"]);
            }
            if (DBNull.Value != feature["NATION"] && feature["NATION"] is not null) {
                NATION = Convert.ToString(feature["NATION"]);
            }
            if (DBNull.Value != feature["PEREND"] && feature["PEREND"] is not null) {
                PEREND = Convert.ToString(feature["PEREND"]);
            }
            if (DBNull.Value != feature["PERSTA"] && feature["PERSTA"] is not null) {
                PERSTA = Convert.ToString(feature["PERSTA"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["RESTRN"] && feature["RESTRN"] is not null) {
                RESTRN = Convert.ToString(feature["RESTRN"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VALSOU"] && feature["VALSOU"] is not null) {
                VALSOU = Convert.ToDecimal(feature["VALSOU"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["WATLEV"] && feature["WATLEV"] is not null) {
                WATLEV = Convert.ToInt32(feature["WATLEV"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATACH"] && feature["CATACH"] is not null) {
                CATACH = Convert.ToString(feature["CATACH"]);
            }
            if (DBNull.Value != feature["CATDPG"] && feature["CATDPG"] is not null) {
                CATDPG = Convert.ToString(feature["CATDPG"]);
            }
            if (DBNull.Value != feature["CATREA"] && feature["CATREA"] is not null) {
                CATREA = Convert.ToString(feature["CATREA"]);
            }
            if (DBNull.Value != feature["JRSDTN"] && feature["JRSDTN"] is not null) {
                JRSDTN = Convert.ToInt32(feature["JRSDTN"]);
            }
            if (DBNull.Value != feature["RADIUS"] && feature["RADIUS"] is not null) {
                RADIUS = Convert.ToDecimal(feature["RADIUS"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class MetaDataA : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Quality of position
        /// </summary>
        [Description("Quality of position")]
        internal int? QUAPOS = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Scale value one
        /// </summary>
        [Description("Scale value one")]
        internal int? SCVAL1 = default;

        /// <summary>
        /// Scale value two
        /// </summary>
        [Description("Scale value two")]
        internal int? SCVAL2 = default;

        /// <summary>
        /// Sounding distance - minimum
        /// </summary>
        [Description("Sounding distance - minimum")]
        internal decimal? SDISMN = default;

        /// <summary>
        /// Sounding distance - maximum
        /// </summary>
        [Description("Sounding distance - maximum")]
        internal decimal? SDISMX = default;

        /// <summary>
        /// Survey authority
        /// </summary>
        [Description("Survey authority")]
        internal string? SURATH = default;

        /// <summary>
        /// Survey date - end
        /// </summary>
        [Description("Survey date - end")]
        internal string? SUREND = default;

        /// <summary>
        /// Survey date - start
        /// </summary>
        [Description("Survey date - start")]
        internal string? SURSTA = default;

        /// <summary>
        /// Survey type
        /// </summary>
        [Description("Survey type")]
        internal string? SURTYP = default;

        /// <summary>
        /// Technique of sounding measurement
        /// </summary>
        [Description("Technique of sounding measurement")]
        internal string? TECSOU = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of quality of data
        /// </summary>
        [Description("Category of quality of data")]
        internal int? CATQUA = default;

        /// <summary>
        /// Category of zone of confidence in data
        /// </summary>
        [Description("Category of zone of confidence in data")]
        internal int? CATZOC = default;

        /// <summary>
        /// Compilation scale of data
        /// </summary>
        [Description("Compilation scale of data")]
        internal int? CSCALE = default;

        /// <summary>
        /// Depth range value 1
        /// </summary>
        [Description("Depth range value 1")]
        internal decimal? DRVAL1 = default;

        /// <summary>
        /// Depth range value 2
        /// </summary>
        [Description("Depth range value 2")]
        internal decimal? DRVAL2 = default;

        /// <summary>
        /// Horizontal accuracy
        /// </summary>
        [Description("Horizontal accuracy")]
        internal decimal? HORACC = default;

        /// <summary>
        /// Horizontal datum
        /// </summary>
        [Description("Horizontal datum")]
        internal int? HORDAT = default;

        /// <summary>
        /// Marks navigational - System of
        /// </summary>
        [Description("Marks navigational - System of")]
        internal int? MARSYS = default;

        /// <summary>
        /// Orientation
        /// </summary>
        [Description("Orientation")]
        internal decimal? ORIENT = default;

        /// <summary>
        /// Publication reference
        /// </summary>
        [Description("Publication reference")]
        internal string? PUBREF = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? POSACC = default;

        /// <summary>
        /// Shift parameters
        /// </summary>
        [Description("Shift parameters")]
        internal string? SHIPAM = default;

        /// <summary>
        /// Sounding accuracy
        /// </summary>
        [Description("Sounding accuracy")]
        internal decimal? SOUACC = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public MetaDataA(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["QUAPOS"] && feature["QUAPOS"] is not null) {
                QUAPOS = Convert.ToInt32(feature["QUAPOS"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["SCVAL1"] && feature["SCVAL1"] is not null) {
                SCVAL1 = Convert.ToInt32(feature["SCVAL1"]);
            }
            if (DBNull.Value != feature["SCVAL2"] && feature["SCVAL2"] is not null) {
                SCVAL2 = Convert.ToInt32(feature["SCVAL2"]);
            }
            if (DBNull.Value != feature["SDISMN"] && feature["SDISMN"] is not null) {
                SDISMN = Convert.ToDecimal(feature["SDISMN"]);
            }
            if (DBNull.Value != feature["SDISMX"] && feature["SDISMX"] is not null) {
                SDISMX = Convert.ToDecimal(feature["SDISMX"]);
            }
            if (DBNull.Value != feature["SURATH"] && feature["SURATH"] is not null) {
                SURATH = Convert.ToString(feature["SURATH"]);
            }
            if (DBNull.Value != feature["SUREND"] && feature["SUREND"] is not null) {
                SUREND = Convert.ToString(feature["SUREND"]);
            }
            if (DBNull.Value != feature["SURSTA"] && feature["SURSTA"] is not null) {
                SURSTA = Convert.ToString(feature["SURSTA"]);
            }
            if (DBNull.Value != feature["SURTYP"] && feature["SURTYP"] is not null) {
                SURTYP = Convert.ToString(feature["SURTYP"]);
            }
            if (DBNull.Value != feature["TECSOU"] && feature["TECSOU"] is not null) {
                TECSOU = Convert.ToString(feature["TECSOU"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATQUA"] && feature["CATQUA"] is not null) {
                CATQUA = Convert.ToInt32(feature["CATQUA"]);
            }
            if (DBNull.Value != feature["CATZOC"] && feature["CATZOC"] is not null) {
                CATZOC = Convert.ToInt32(feature["CATZOC"]);
            }
            if (DBNull.Value != feature["CSCALE"] && feature["CSCALE"] is not null) {
                CSCALE = Convert.ToInt32(feature["CSCALE"]);
            }
            if (DBNull.Value != feature["DRVAL1"] && feature["DRVAL1"] is not null) {
                DRVAL1 = Convert.ToDecimal(feature["DRVAL1"]);
            }
            if (DBNull.Value != feature["DRVAL2"] && feature["DRVAL2"] is not null) {
                DRVAL2 = Convert.ToDecimal(feature["DRVAL2"]);
            }
            if (DBNull.Value != feature["HORACC"] && feature["HORACC"] is not null) {
                HORACC = Convert.ToDecimal(feature["HORACC"]);
            }
            if (DBNull.Value != feature["HORDAT"] && feature["HORDAT"] is not null) {
                HORDAT = Convert.ToInt32(feature["HORDAT"]);
            }
            if (DBNull.Value != feature["MARSYS"] && feature["MARSYS"] is not null) {
                MARSYS = Convert.ToInt32(feature["MARSYS"]);
            }
            if (DBNull.Value != feature["ORIENT"] && feature["ORIENT"] is not null) {
                ORIENT = Convert.ToDecimal(feature["ORIENT"]);
            }
            if (DBNull.Value != feature["PUBREF"] && feature["PUBREF"] is not null) {
                PUBREF = Convert.ToString(feature["PUBREF"]);
            }
            if (DBNull.Value != feature["POSACC"] && feature["POSACC"] is not null) {
                POSACC = Convert.ToDecimal(feature["POSACC"]);
            }
            if (DBNull.Value != feature["SHIPAM"] && feature["SHIPAM"] is not null) {
                SHIPAM = Convert.ToString(feature["SHIPAM"]);
            }
            if (DBNull.Value != feature["SOUACC"] && feature["SOUACC"] is not null) {
                SOUACC = Convert.ToDecimal(feature["SOUACC"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class MetaDataL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Quality of position
        /// </summary>
        [Description("Quality of position")]
        internal int? QUAPOS = default;

        /// <summary>
        /// Quality of sounding measurement
        /// </summary>
        [Description("Quality of sounding measurement")]
        internal string? QUASOU = default;

        /// <summary>
        /// Scale value one
        /// </summary>
        [Description("Scale value one")]
        internal int? SCVAL1 = default;

        /// <summary>
        /// Scale value two
        /// </summary>
        [Description("Scale value two")]
        internal int? SCVAL2 = default;

        /// <summary>
        /// Sounding distance - minimum
        /// </summary>
        [Description("Sounding distance - minimum")]
        internal decimal? SDISMN = default;

        /// <summary>
        /// Sounding distance - maximum
        /// </summary>
        [Description("Sounding distance - maximum")]
        internal decimal? SDISMX = default;

        /// <summary>
        /// Survey authority
        /// </summary>
        [Description("Survey authority")]
        internal string? SURATH = default;

        /// <summary>
        /// Survey date - end
        /// </summary>
        [Description("Survey date - end")]
        internal string? SUREND = default;

        /// <summary>
        /// Survey date - start
        /// </summary>
        [Description("Survey date - start")]
        internal string? SURSTA = default;

        /// <summary>
        /// Survey type
        /// </summary>
        [Description("Survey type")]
        internal string? SURTYP = default;

        /// <summary>
        /// Technique of sounding measurement
        /// </summary>
        [Description("Technique of sounding measurement")]
        internal string? TECSOU = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public MetaDataL(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["QUAPOS"] && feature["QUAPOS"] is not null) {
                QUAPOS = Convert.ToInt32(feature["QUAPOS"]);
            }
            if (DBNull.Value != feature["QUASOU"] && feature["QUASOU"] is not null) {
                QUASOU = Convert.ToString(feature["QUASOU"]);
            }
            if (DBNull.Value != feature["SCVAL1"] && feature["SCVAL1"] is not null) {
                SCVAL1 = Convert.ToInt32(feature["SCVAL1"]);
            }
            if (DBNull.Value != feature["SCVAL2"] && feature["SCVAL2"] is not null) {
                SCVAL2 = Convert.ToInt32(feature["SCVAL2"]);
            }
            if (DBNull.Value != feature["SDISMN"] && feature["SDISMN"] is not null) {
                SDISMN = Convert.ToDecimal(feature["SDISMN"]);
            }
            if (DBNull.Value != feature["SDISMX"] && feature["SDISMX"] is not null) {
                SDISMX = Convert.ToDecimal(feature["SDISMX"]);
            }
            if (DBNull.Value != feature["SURATH"] && feature["SURATH"] is not null) {
                SURATH = Convert.ToString(feature["SURATH"]);
            }
            if (DBNull.Value != feature["SUREND"] && feature["SUREND"] is not null) {
                SUREND = Convert.ToString(feature["SUREND"]);
            }
            if (DBNull.Value != feature["SURSTA"] && feature["SURSTA"] is not null) {
                SURSTA = Convert.ToString(feature["SURSTA"]);
            }
            if (DBNull.Value != feature["SURTYP"] && feature["SURTYP"] is not null) {
                SURTYP = Convert.ToString(feature["SURTYP"]);
            }
            if (DBNull.Value != feature["TECSOU"] && feature["TECSOU"] is not null) {
                TECSOU = Convert.ToString(feature["TECSOU"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class OffshoreInstallationsP : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Nautical Object ID
        /// </summary>
        [Description("Nautical Object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified date
        /// </summary>
        [Description("Last modified date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// Category of pipeline/pipe
        /// </summary>
        [Description("Category of pipeline/pipe")]
        internal string? CATPIP = default;

        /// <summary>
        /// Condition
        /// </summary>
        [Description("Condition")]
        internal int? CONDTN = default;

        /// <summary>
        /// Date end
        /// </summary>
        [Description("Date end")]
        internal string? DATEND = default;

        /// <summary>
        /// Date start
        /// </summary>
        [Description("Date start")]
        internal string? DATSTA = default;

        /// <summary>
        /// Product
        /// </summary>
        [Description("Product")]
        internal string? PRODCT = default;

        /// <summary>
        /// Status
        /// </summary>
        [Description("Status")]
        internal string? STATUS = default;

        /// <summary>
        /// Vertical accuracy
        /// </summary>
        [Description("Vertical accuracy")]
        internal decimal? VERACC = default;

        /// <summary>
        /// Vertical datum
        /// </summary>
        [Description("Vertical datum")]
        internal int? VERDAT = default;

        /// <summary>
        /// Vertical length
        /// </summary>
        [Description("Vertical length")]
        internal decimal? VERLEN = default;

        /// <summary>
        /// Buried depth
        /// </summary>
        [Description("Buried depth")]
        internal decimal? BURDEP = default;

        /// <summary>
        /// Depth range value 1
        /// </summary>
        [Description("Depth range value 1")]
        internal decimal? DRVAL1 = default;

        /// <summary>
        /// Depth range value 2
        /// </summary>
        [Description("Depth range value 2")]
        internal decimal? DRVAL2 = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Category of offshore platform
        /// </summary>
        [Description("Category of offshore platform")]
        internal string? CATOFP = default;

        /// <summary>
        /// Colour
        /// </summary>
        [Description("Colour")]
        internal string? COLOUR = default;

        /// <summary>
        /// Colour pattern
        /// </summary>
        [Description("Colour pattern")]
        internal string? COLPAT = default;

        /// <summary>
        /// Conspicuous, radar
        /// </summary>
        [Description("Conspicuous, radar")]
        internal int? CONRAD = default;

        /// <summary>
        /// Conspicuous, visually
        /// </summary>
        [Description("Conspicuous, visually")]
        internal int? CONVIS = default;

        /// <summary>
        /// Height
        /// </summary>
        [Description("Height")]
        internal decimal? HEIGHT = default;

        /// <summary>
        /// Nature of construction
        /// </summary>
        [Description("Nature of construction")]
        internal string? NATCON = default;

        /// <summary>
        /// Restriction
        /// </summary>
        [Description("Restriction")]
        internal string? RESTRN = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// Quality of Position
        /// </summary>
        [Description("Quality of Position")]
        internal int? P_QUAPOS = default;

        /// <summary>
        /// Positional Accuracy
        /// </summary>
        [Description("Positional Accuracy")]
        internal decimal? P_POSACC = default;

        /// <summary>
        /// Horizontal Datum
        /// </summary>
        [Description("Horizontal Datum")]
        internal int? P_HORDAT = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public OffshoreInstallationsP(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["NOID"] && feature["NOID"] is not null) {
                NOID = Convert.ToString(feature["NOID"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["NTXTDS"] && feature["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(feature["NTXTDS"]);
            }
            if (DBNull.Value != feature["PICREP"] && feature["PICREP"] is not null) {
                PICREP = Convert.ToString(feature["PICREP"]);
            }
            if (DBNull.Value != feature["TXTDSC"] && feature["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(feature["TXTDSC"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["OBJNAM"] && feature["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(feature["OBJNAM"]);
            }
            if (DBNull.Value != feature["NOBJNM"] && feature["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(feature["NOBJNM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["CATPIP"] && feature["CATPIP"] is not null) {
                CATPIP = Convert.ToString(feature["CATPIP"]);
            }
            if (DBNull.Value != feature["CONDTN"] && feature["CONDTN"] is not null) {
                CONDTN = Convert.ToInt32(feature["CONDTN"]);
            }
            if (DBNull.Value != feature["DATEND"] && feature["DATEND"] is not null) {
                DATEND = Convert.ToString(feature["DATEND"]);
            }
            if (DBNull.Value != feature["DATSTA"] && feature["DATSTA"] is not null) {
                DATSTA = Convert.ToString(feature["DATSTA"]);
            }
            if (DBNull.Value != feature["PRODCT"] && feature["PRODCT"] is not null) {
                PRODCT = Convert.ToString(feature["PRODCT"]);
            }
            if (DBNull.Value != feature["STATUS"] && feature["STATUS"] is not null) {
                STATUS = Convert.ToString(feature["STATUS"]);
            }
            if (DBNull.Value != feature["VERACC"] && feature["VERACC"] is not null) {
                VERACC = Convert.ToDecimal(feature["VERACC"]);
            }
            if (DBNull.Value != feature["VERDAT"] && feature["VERDAT"] is not null) {
                VERDAT = Convert.ToInt32(feature["VERDAT"]);
            }
            if (DBNull.Value != feature["VERLEN"] && feature["VERLEN"] is not null) {
                VERLEN = Convert.ToDecimal(feature["VERLEN"]);
            }
            if (DBNull.Value != feature["BURDEP"] && feature["BURDEP"] is not null) {
                BURDEP = Convert.ToDecimal(feature["BURDEP"]);
            }
            if (DBNull.Value != feature["DRVAL1"] && feature["DRVAL1"] is not null) {
                DRVAL1 = Convert.ToDecimal(feature["DRVAL1"]);
            }
            if (DBNull.Value != feature["DRVAL2"] && feature["DRVAL2"] is not null) {
                DRVAL2 = Convert.ToDecimal(feature["DRVAL2"]);
            }
            if (DBNull.Value != feature["FCSUBTYPE"] && feature["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(feature["FCSUBTYPE"]);
            }
            if (DBNull.Value != feature["CATOFP"] && feature["CATOFP"] is not null) {
                CATOFP = Convert.ToString(feature["CATOFP"]);
            }
            if (DBNull.Value != feature["COLOUR"] && feature["COLOUR"] is not null) {
                COLOUR = Convert.ToString(feature["COLOUR"]);
            }
            if (DBNull.Value != feature["COLPAT"] && feature["COLPAT"] is not null) {
                COLPAT = Convert.ToString(feature["COLPAT"]);
            }
            if (DBNull.Value != feature["CONRAD"] && feature["CONRAD"] is not null) {
                CONRAD = Convert.ToInt32(feature["CONRAD"]);
            }
            if (DBNull.Value != feature["CONVIS"] && feature["CONVIS"] is not null) {
                CONVIS = Convert.ToInt32(feature["CONVIS"]);
            }
            if (DBNull.Value != feature["HEIGHT"] && feature["HEIGHT"] is not null) {
                HEIGHT = Convert.ToDecimal(feature["HEIGHT"]);
            }
            if (DBNull.Value != feature["NATCON"] && feature["NATCON"] is not null) {
                NATCON = Convert.ToString(feature["NATCON"]);
            }
            if (DBNull.Value != feature["RESTRN"] && feature["RESTRN"] is not null) {
                RESTRN = Convert.ToString(feature["RESTRN"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["P_QUAPOS"] && feature["P_QUAPOS"] is not null) {
                P_QUAPOS = Convert.ToInt32(feature["P_QUAPOS"]);
            }
            if (DBNull.Value != feature["P_POSACC"] && feature["P_POSACC"] is not null) {
                P_POSACC = Convert.ToDecimal(feature["P_POSACC"]);
            }
            if (DBNull.Value != feature["P_HORDAT"] && feature["P_HORDAT"] is not null) {
                P_HORDAT = Convert.ToInt32(feature["P_HORDAT"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class ClosingLinesL : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified
        /// </summary>
        [Description("Last modified")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public ClosingLinesL(Feature feature) {
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["EDITOR_COMMENT"] && feature["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(feature["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != feature["VERIFIED"] && feature["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(feature["VERIFIED"]);
            }
            if (DBNull.Value != feature["VERIFIER"] && feature["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(feature["VERIFIER"]);
            }
            if (DBNull.Value != feature["VERIFIED_DATE"] && feature["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(feature["VERIFIED_DATE"]);
            }
            if (DBNull.Value != feature["DELETE_COMMENT"] && feature["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(feature["DELETE_COMMENT"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["SCAMIN_STEP"] && feature["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(feature["SCAMIN_STEP"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIED"] && feature["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(feature["NIS_VERIFIED"]);
            }
            if (DBNull.Value != feature["NIS_VERIFIER"] && feature["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(feature["NIS_VERIFIER"]);
            }
            if (DBNull.Value != feature["NIS_VERIFY_DATE"] && feature["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(feature["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR_COMMENT"] && feature["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(feature["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class ProductCoverage : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// Shape
        /// </summary>
        [Description("Shape")]
        internal Geometry? SHAPE = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Dataset Name
        /// </summary>
        [Description("Dataset Name")]
        internal string? DSNM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// EDITOR
        /// </summary>
        [Description("EDITOR")]
        internal string? EDITOR = default;

        /// <summary>
        /// LAST_MOD
        /// </summary>
        [Description("LAST_MOD")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Product_GUID
        /// </summary>
        [Description("Product_GUID")]
        internal Guid PRODUCT_GUID = Guid.Empty;

        /// <summary>
        /// Category of coverage
        /// </summary>
        [Description("Category of coverage")]
        internal int? CATCOV = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;
        public ProductCoverage(Feature feature) {
            if (DBNull.Value != feature["OBJECTID"] && feature["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(feature["OBJECTID"]);
            }
            if (DBNull.Value != feature["SHAPE"] && feature["SHAPE"] is not null) {
                SHAPE = (Geometry?)(feature["SHAPE"]);
            }
            if (DBNull.Value != feature["GLOBALID"] && feature["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != feature["DSNM"] && feature["DSNM"] is not null) {
                DSNM = Convert.ToString(feature["DSNM"]);
            }
            if (DBNull.Value != feature["LNAM"] && feature["LNAM"] is not null) {
                LNAM = Convert.ToString(feature["LNAM"]);
            }
            if (DBNull.Value != feature["EDITOR"] && feature["EDITOR"] is not null) {
                EDITOR = Convert.ToString(feature["EDITOR"]);
            }
            if (DBNull.Value != feature["LAST_MOD"] && feature["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(feature["LAST_MOD"]);
            }
            if (DBNull.Value != feature["PRODUCT_GUID"] && feature["PRODUCT_GUID"] is not null) {
                Guid.TryParse(Convert.ToString(feature["PRODUCT_GUID"]), out PRODUCT_GUID);
            }
            if (DBNull.Value != feature["CATCOV"] && feature["CATCOV"] is not null) {
                CATCOV = Convert.ToInt32(feature["CATCOV"]);
            }
            if (DBNull.Value != feature["INFORM"] && feature["INFORM"] is not null) {
                INFORM = Convert.ToString(feature["INFORM"]);
            }
            if (DBNull.Value != feature["NINFOM"] && feature["NINFOM"] is not null) {
                NINFOM = Convert.ToString(feature["NINFOM"]);
            }
            if (DBNull.Value != feature["SORDAT"] && feature["SORDAT"] is not null) {
                SORDAT = Convert.ToString(feature["SORDAT"]);
            }
            if (DBNull.Value != feature["SORIND"] && feature["SORIND"] is not null) {
                SORIND = Convert.ToString(feature["SORIND"]);
            }
            if (DBNull.Value != feature["PLTS_COMP_SCALE"] && feature["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(feature["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != feature["IS_CONFLATE"] && feature["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(feature["IS_CONFLATE"]);
            }
            if (DBNull.Value != feature["NIS_PRODUCTS"] && feature["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(feature["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != feature["NIS_EDITOR"] && feature["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(feature["NIS_EDITOR"]);
            }
            if (DBNull.Value != feature["NIS_LAST_MOD"] && feature["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(feature["NIS_LAST_MOD"]);
            }
        }
    }
    internal class ProductDefinitions : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last Modified Date
        /// </summary>
        [Description("Last Modified Date")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Compilation Scale
        /// </summary>
        [Description("Compilation Scale")]
        internal int? CSCL = default;

        /// <summary>
        /// Dataset Name
        /// </summary>
        [Description("Dataset Name")]
        internal string? DSNM = default;

        /// <summary>
        /// Export Type
        /// </summary>
        [Description("Export Type")]
        internal string? EXPORTTYPE = default;

        /// <summary>
        /// Edition Number
        /// </summary>
        [Description("Edition Number")]
        internal int? EDTN = default;

        /// <summary>
        /// Update Number
        /// </summary>
        [Description("Update Number")]
        internal int? UPDN = default;

        /// <summary>
        /// Application Profile
        /// </summary>
        [Description("Application Profile")]
        internal int? PROF = default;

        /// <summary>
        /// INTU
        /// </summary>
        [Description("INTU")]
        internal int? INTU = default;

        /// <summary>
        /// Update Application Date
        /// </summary>
        [Description("Update Application Date")]
        internal DateTime? UADT = default;

        /// <summary>
        /// Issue Date
        /// </summary>
        [Description("Issue Date")]
        internal DateTime? ISDT = default;

        /// <summary>
        /// S-57 Edition
        /// </summary>
        [Description("S-57 Edition")]
        internal string? STED = default;

        /// <summary>
        /// Product Specification
        /// </summary>
        [Description("Product Specification")]
        internal int? PRSP = default;

        /// <summary>
        /// Product Spec Description
        /// </summary>
        [Description("Product Spec Description")]
        internal string? PSDN = default;

        /// <summary>
        /// Product Spec Edition
        /// </summary>
        [Description("Product Spec Edition")]
        internal string? PRED = default;

        /// <summary>
        /// Agency
        /// </summary>
        [Description("Agency")]
        internal string? AGEN = default;

        /// <summary>
        /// Comment
        /// </summary>
        [Description("Comment")]
        internal string? COMT = default;

        /// <summary>
        /// ATTF Lexical Level
        /// </summary>
        [Description("ATTF Lexical Level")]
        internal int? AALL = default;

        /// <summary>
        /// NATF Lexical Level
        /// </summary>
        [Description("NATF Lexical Level")]
        internal int? NALL = default;

        /// <summary>
        /// Horizontal Geodetic Datum
        /// </summary>
        [Description("Horizontal Geodetic Datum")]
        internal int? HDAT = default;

        /// <summary>
        /// Vertical Datum
        /// </summary>
        [Description("Vertical Datum")]
        internal int? VDAT = default;

        /// <summary>
        /// Sounding Datum
        /// </summary>
        [Description("Sounding Datum")]
        internal int? SDAT = default;

        /// <summary>
        /// Depth Units
        /// </summary>
        [Description("Depth Units")]
        internal int? DUNI = default;

        /// <summary>
        /// Height Units
        /// </summary>
        [Description("Height Units")]
        internal int? HUNI = default;

        /// <summary>
        /// Precision Units
        /// </summary>
        [Description("Precision Units")]
        internal int? PUNI = default;

        /// <summary>
        /// Coordinate Units
        /// </summary>
        [Description("Coordinate Units")]
        internal int? COUN = default;

        /// <summary>
        /// Coordinate Multiplication Factor
        /// </summary>
        [Description("Coordinate Multiplication Factor")]
        internal int? COMF = default;

        /// <summary>
        /// Sounding Multiplication Factor
        /// </summary>
        [Description("Sounding Multiplication Factor")]
        internal int? SOMF = default;

        /// <summary>
        /// DSPM Comment
        /// </summary>
        [Description("DSPM Comment")]
        internal string? DSPM_COMT = default;

        /// <summary>
        /// Series
        /// </summary>
        [Description("Series")]
        internal string? SERIES = default;

        /// <summary>
        /// Where Clause
        /// </summary>
        [Description("Where Clause")]
        internal string? WHERECLAUSE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;
        public ProductDefinitions(Row row) {
            if (DBNull.Value != row["OBJECTID"] && row["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(row["OBJECTID"]);
            }
            if (DBNull.Value != row["GLOBALID"] && row["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(row["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != row["EDITOR"] && row["EDITOR"] is not null) {
                EDITOR = Convert.ToString(row["EDITOR"]);
            }
            if (DBNull.Value != row["LAST_MOD"] && row["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(row["LAST_MOD"]);
            }
            if (DBNull.Value != row["CSCL"] && row["CSCL"] is not null) {
                CSCL = Convert.ToInt32(row["CSCL"]);
            }
            if (DBNull.Value != row["DSNM"] && row["DSNM"] is not null) {
                DSNM = Convert.ToString(row["DSNM"]);
            }
            if (DBNull.Value != row["EXPORTTYPE"] && row["EXPORTTYPE"] is not null) {
                EXPORTTYPE = Convert.ToString(row["EXPORTTYPE"]);
            }
            if (DBNull.Value != row["EDTN"] && row["EDTN"] is not null) {
                EDTN = Convert.ToInt32(row["EDTN"]);
            }
            if (DBNull.Value != row["UPDN"] && row["UPDN"] is not null) {
                UPDN = Convert.ToInt32(row["UPDN"]);
            }
            if (DBNull.Value != row["PROF"] && row["PROF"] is not null) {
                PROF = Convert.ToInt32(row["PROF"]);
            }
            if (DBNull.Value != row["INTU"] && row["INTU"] is not null) {
                INTU = Convert.ToInt32(row["INTU"]);
            }
            if (DBNull.Value != row["UADT"] && row["UADT"] is not null) {
                UADT = Convert.ToDateTime(row["UADT"]);
            }
            if (DBNull.Value != row["ISDT"] && row["ISDT"] is not null) {
                ISDT = Convert.ToDateTime(row["ISDT"]);
            }
            if (DBNull.Value != row["STED"] && row["STED"] is not null) {
                STED = Convert.ToString(row["STED"]);
            }
            if (DBNull.Value != row["PRSP"] && row["PRSP"] is not null) {
                PRSP = Convert.ToInt32(row["PRSP"]);
            }
            if (DBNull.Value != row["PSDN"] && row["PSDN"] is not null) {
                PSDN = Convert.ToString(row["PSDN"]);
            }
            if (DBNull.Value != row["PRED"] && row["PRED"] is not null) {
                PRED = Convert.ToString(row["PRED"]);
            }
            if (DBNull.Value != row["AGEN"] && row["AGEN"] is not null) {
                AGEN = Convert.ToString(row["AGEN"]);
            }
            if (DBNull.Value != row["COMT"] && row["COMT"] is not null) {
                COMT = Convert.ToString(row["COMT"]);
            }
            if (DBNull.Value != row["AALL"] && row["AALL"] is not null) {
                AALL = Convert.ToInt32(row["AALL"]);
            }
            if (DBNull.Value != row["NALL"] && row["NALL"] is not null) {
                NALL = Convert.ToInt32(row["NALL"]);
            }
            if (DBNull.Value != row["HDAT"] && row["HDAT"] is not null) {
                HDAT = Convert.ToInt32(row["HDAT"]);
            }
            if (DBNull.Value != row["VDAT"] && row["VDAT"] is not null) {
                VDAT = Convert.ToInt32(row["VDAT"]);
            }
            if (DBNull.Value != row["SDAT"] && row["SDAT"] is not null) {
                SDAT = Convert.ToInt32(row["SDAT"]);
            }
            if (DBNull.Value != row["DUNI"] && row["DUNI"] is not null) {
                DUNI = Convert.ToInt32(row["DUNI"]);
            }
            if (DBNull.Value != row["HUNI"] && row["HUNI"] is not null) {
                HUNI = Convert.ToInt32(row["HUNI"]);
            }
            if (DBNull.Value != row["PUNI"] && row["PUNI"] is not null) {
                PUNI = Convert.ToInt32(row["PUNI"]);
            }
            if (DBNull.Value != row["COUN"] && row["COUN"] is not null) {
                COUN = Convert.ToInt32(row["COUN"]);
            }
            if (DBNull.Value != row["COMF"] && row["COMF"] is not null) {
                COMF = Convert.ToInt32(row["COMF"]);
            }
            if (DBNull.Value != row["SOMF"] && row["SOMF"] is not null) {
                SOMF = Convert.ToInt32(row["SOMF"]);
            }
            if (DBNull.Value != row["DSPM_COMT"] && row["DSPM_COMT"] is not null) {
                DSPM_COMT = Convert.ToString(row["DSPM_COMT"]);
            }
            if (DBNull.Value != row["SERIES"] && row["SERIES"] is not null) {
                SERIES = Convert.ToString(row["SERIES"]);
            }
            if (DBNull.Value != row["WHERECLAUSE"] && row["WHERECLAUSE"] is not null) {
                WHERECLAUSE = Convert.ToString(row["WHERECLAUSE"]);
            }
            if (DBNull.Value != row["NIS_EDITOR"] && row["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(row["NIS_EDITOR"]);
            }
            if (DBNull.Value != row["NIS_LAST_MOD"] && row["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(row["NIS_LAST_MOD"]);
            }
        }
    }
    internal class PLTS_Collections : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last modified
        /// </summary>
        [Description("Last modified")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// Editor comments
        /// </summary>
        [Description("Editor comments")]
        internal string? EDITOR_COMMENT = default;

        /// <summary>
        /// Verified state
        /// </summary>
        [Description("Verified state")]
        internal int? VERIFIED = default;

        /// <summary>
        /// Verifier
        /// </summary>
        [Description("Verifier")]
        internal string? VERIFIER = default;

        /// <summary>
        /// Verified date
        /// </summary>
        [Description("Verified date")]
        internal DateTime? VERIFIED_DATE = default;

        /// <summary>
        /// Delete comment
        /// </summary>
        [Description("Delete comment")]
        internal string? DELETE_COMMENT = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// Information
        /// </summary>
        [Description("Information")]
        internal string? INFORM = default;

        /// <summary>
        /// Long name
        /// </summary>
        [Description("Long name")]
        internal string? LNAM = default;

        /// <summary>
        /// Name
        /// </summary>
        [Description("Name")]
        internal string? NAME = default;

        /// <summary>
        /// Data set name
        /// </summary>
        [Description("Data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Nautical object ID
        /// </summary>
        [Description("Nautical object ID")]
        internal string? NOID = default;

        /// <summary>
        /// Information in national language
        /// </summary>
        [Description("Information in national language")]
        internal string? NINFOM = default;

        /// <summary>
        /// Object name in national language
        /// </summary>
        [Description("Object name in national language")]
        internal string? NOBJNM = default;

        /// <summary>
        /// Textual description in national language
        /// </summary>
        [Description("Textual description in national language")]
        internal string? NTXTDS = default;

        /// <summary>
        /// Object name
        /// </summary>
        [Description("Object name")]
        internal string? OBJNAM = default;

        /// <summary>
        /// Pictorial representation
        /// </summary>
        [Description("Pictorial representation")]
        internal string? PICREP = default;

        /// <summary>
        /// Source date
        /// </summary>
        [Description("Source date")]
        internal string? SORDAT = default;

        /// <summary>
        /// Source indication
        /// </summary>
        [Description("Source indication")]
        internal string? SORIND = default;

        /// <summary>
        /// Textual description
        /// </summary>
        [Description("Textual description")]
        internal string? TXTDSC = default;

        /// <summary>
        /// Collection type
        /// </summary>
        [Description("Collection type")]
        internal int? COLLECTION_TYPE = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// SCAMIN step
        /// </summary>
        [Description("SCAMIN step")]
        internal int? SCAMIN_STEP = default;

        /// <summary>
        /// NIS Verified state
        /// </summary>
        [Description("NIS Verified state")]
        internal int? NIS_VERIFIED = default;

        /// <summary>
        /// NIS Verifier
        /// </summary>
        [Description("NIS Verifier")]
        internal string? NIS_VERIFIER = default;

        /// <summary>
        /// NIS Verified date
        /// </summary>
        [Description("NIS Verified date")]
        internal DateTime? NIS_VERIFY_DATE = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;

        /// <summary>
        /// NIS editor comments
        /// </summary>
        [Description("NIS editor comments")]
        internal string? NIS_EDITOR_COMMENT = default;
        public PLTS_Collections(Row row) {
            if (DBNull.Value != row["OBJECTID"] && row["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(row["OBJECTID"]);
            }
            if (DBNull.Value != row["GLOBALID"] && row["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(row["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != row["EDITOR"] && row["EDITOR"] is not null) {
                EDITOR = Convert.ToString(row["EDITOR"]);
            }
            if (DBNull.Value != row["LAST_MOD"] && row["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(row["LAST_MOD"]);
            }
            if (DBNull.Value != row["EDITOR_COMMENT"] && row["EDITOR_COMMENT"] is not null) {
                EDITOR_COMMENT = Convert.ToString(row["EDITOR_COMMENT"]);
            }
            if (DBNull.Value != row["VERIFIED"] && row["VERIFIED"] is not null) {
                VERIFIED = Convert.ToInt32(row["VERIFIED"]);
            }
            if (DBNull.Value != row["VERIFIER"] && row["VERIFIER"] is not null) {
                VERIFIER = Convert.ToString(row["VERIFIER"]);
            }
            if (DBNull.Value != row["VERIFIED_DATE"] && row["VERIFIED_DATE"] is not null) {
                VERIFIED_DATE = Convert.ToDateTime(row["VERIFIED_DATE"]);
            }
            if (DBNull.Value != row["DELETE_COMMENT"] && row["DELETE_COMMENT"] is not null) {
                DELETE_COMMENT = Convert.ToString(row["DELETE_COMMENT"]);
            }
            if (DBNull.Value != row["PLTS_COMP_SCALE"] && row["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(row["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != row["NIS_PRODUCTS"] && row["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(row["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != row["FCSUBTYPE"] && row["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(row["FCSUBTYPE"]);
            }
            if (DBNull.Value != row["INFORM"] && row["INFORM"] is not null) {
                INFORM = Convert.ToString(row["INFORM"]);
            }
            if (DBNull.Value != row["LNAM"] && row["LNAM"] is not null) {
                LNAM = Convert.ToString(row["LNAM"]);
            }
            if (DBNull.Value != row["NAME"] && row["NAME"] is not null) {
                NAME = Convert.ToString(row["NAME"]);
            }
            if (DBNull.Value != row["DSNM"] && row["DSNM"] is not null) {
                DSNM = Convert.ToString(row["DSNM"]);
            }
            if (DBNull.Value != row["NOID"] && row["NOID"] is not null) {
                NOID = Convert.ToString(row["NOID"]);
            }
            if (DBNull.Value != row["NINFOM"] && row["NINFOM"] is not null) {
                NINFOM = Convert.ToString(row["NINFOM"]);
            }
            if (DBNull.Value != row["NOBJNM"] && row["NOBJNM"] is not null) {
                NOBJNM = Convert.ToString(row["NOBJNM"]);
            }
            if (DBNull.Value != row["NTXTDS"] && row["NTXTDS"] is not null) {
                NTXTDS = Convert.ToString(row["NTXTDS"]);
            }
            if (DBNull.Value != row["OBJNAM"] && row["OBJNAM"] is not null) {
                OBJNAM = Convert.ToString(row["OBJNAM"]);
            }
            if (DBNull.Value != row["PICREP"] && row["PICREP"] is not null) {
                PICREP = Convert.ToString(row["PICREP"]);
            }
            if (DBNull.Value != row["SORDAT"] && row["SORDAT"] is not null) {
                SORDAT = Convert.ToString(row["SORDAT"]);
            }
            if (DBNull.Value != row["SORIND"] && row["SORIND"] is not null) {
                SORIND = Convert.ToString(row["SORIND"]);
            }
            if (DBNull.Value != row["TXTDSC"] && row["TXTDSC"] is not null) {
                TXTDSC = Convert.ToString(row["TXTDSC"]);
            }
            if (DBNull.Value != row["COLLECTION_TYPE"] && row["COLLECTION_TYPE"] is not null) {
                COLLECTION_TYPE = Convert.ToInt32(row["COLLECTION_TYPE"]);
            }
            if (DBNull.Value != row["IS_CONFLATE"] && row["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(row["IS_CONFLATE"]);
            }
            if (DBNull.Value != row["SCAMIN_STEP"] && row["SCAMIN_STEP"] is not null) {
                SCAMIN_STEP = Convert.ToInt32(row["SCAMIN_STEP"]);
            }
            if (DBNull.Value != row["NIS_VERIFIED"] && row["NIS_VERIFIED"] is not null) {
                NIS_VERIFIED = Convert.ToInt32(row["NIS_VERIFIED"]);
            }
            if (DBNull.Value != row["NIS_VERIFIER"] && row["NIS_VERIFIER"] is not null) {
                NIS_VERIFIER = Convert.ToString(row["NIS_VERIFIER"]);
            }
            if (DBNull.Value != row["NIS_VERIFY_DATE"] && row["NIS_VERIFY_DATE"] is not null) {
                NIS_VERIFY_DATE = Convert.ToDateTime(row["NIS_VERIFY_DATE"]);
            }
            if (DBNull.Value != row["NIS_EDITOR"] && row["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(row["NIS_EDITOR"]);
            }
            if (DBNull.Value != row["NIS_LAST_MOD"] && row["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(row["NIS_LAST_MOD"]);
            }
            if (DBNull.Value != row["NIS_EDITOR_COMMENT"] && row["NIS_EDITOR_COMMENT"] is not null) {
                NIS_EDITOR_COMMENT = Convert.ToString(row["NIS_EDITOR_COMMENT"]);
            }
        }
    }
    internal class PLTS_Frel : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// OBJECTID
        /// </summary>
        [Description("OBJECTID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// GlobalID
        /// </summary>
        [Description("GlobalID")]
        internal Guid GLOBALID = Guid.Empty;

        /// <summary>
        /// Relationship indicator
        /// </summary>
        [Description("Relationship indicator")]
        internal int? RIND = default;

        /// <summary>
        /// data set name
        /// </summary>
        [Description("data set name")]
        internal string? DSNM = default;

        /// <summary>
        /// Comment
        /// </summary>
        [Description("Comment")]
        internal string? COMT = default;

        /// <summary>
        /// Destination universal ID
        /// </summary>
        [Description("Destination universal ID")]
        internal string? DEST_UID = default;

        /// <summary>
        /// Entry date
        /// </summary>
        [Description("Entry date")]
        internal decimal? ENTRY_DATE = default;

        /// <summary>
        /// Source universal ID
        /// </summary>
        [Description("Source universal ID")]
        internal string? SRC_UID = default;

        /// <summary>
        /// Source feature class
        /// </summary>
        [Description("Source feature class")]
        internal string? SRC_FC = default;

        /// <summary>
        /// Source subtype
        /// </summary>
        [Description("Source subtype")]
        internal string? SRC_SUB = default;

        /// <summary>
        /// Destination feature class
        /// </summary>
        [Description("Destination feature class")]
        internal string? DEST_FC = default;

        /// <summary>
        /// Destination subtype
        /// </summary>
        [Description("Destination subtype")]
        internal string? DEST_SUB = default;

        /// <summary>
        /// Source long name
        /// </summary>
        [Description("Source long name")]
        internal string? SRC_LNAM = default;

        /// <summary>
        /// Destination long name
        /// </summary>
        [Description("Destination long name")]
        internal string? DEST_LNAM = default;

        /// <summary>
        /// PLTS compilation scale
        /// </summary>
        [Description("PLTS compilation scale")]
        internal int? PLTS_COMP_SCALE = default;

        /// <summary>
        /// Is Conflate
        /// </summary>
        [Description("Is Conflate")]
        internal int? IS_CONFLATE = default;

        /// <summary>
        /// NIS product type
        /// </summary>
        [Description("NIS product type")]
        internal int? NIS_PRODUCTS = default;

        /// <summary>
        /// Editor
        /// </summary>
        [Description("Editor")]
        internal string? EDITOR = default;

        /// <summary>
        /// Last Modified
        /// </summary>
        [Description("Last Modified")]
        internal DateTime? LAST_MOD = default;

        /// <summary>
        /// NIS_EDITOR
        /// </summary>
        [Description("NIS_EDITOR")]
        internal string? NIS_EDITOR = default;

        /// <summary>
        /// NIS_LAST_MOD
        /// </summary>
        [Description("NIS_LAST_MOD")]
        internal DateTime? NIS_LAST_MOD = default;
        public PLTS_Frel(Row row) {
            if (DBNull.Value != row["OBJECTID"] && row["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(row["OBJECTID"]);
            }
            if (DBNull.Value != row["GLOBALID"] && row["GLOBALID"] is not null) {
                Guid.TryParse(Convert.ToString(row["GLOBALID"]), out GLOBALID);
            }
            if (DBNull.Value != row["RIND"] && row["RIND"] is not null) {
                RIND = Convert.ToInt32(row["RIND"]);
            }
            if (DBNull.Value != row["DSNM"] && row["DSNM"] is not null) {
                DSNM = Convert.ToString(row["DSNM"]);
            }
            if (DBNull.Value != row["COMT"] && row["COMT"] is not null) {
                COMT = Convert.ToString(row["COMT"]);
            }
            if (DBNull.Value != row["DEST_UID"] && row["DEST_UID"] is not null) {
                DEST_UID = Convert.ToString(row["DEST_UID"]);
            }
            if (DBNull.Value != row["ENTRY_DATE"] && row["ENTRY_DATE"] is not null) {
                ENTRY_DATE = Convert.ToDecimal(row["ENTRY_DATE"]);
            }
            if (DBNull.Value != row["SRC_UID"] && row["SRC_UID"] is not null) {
                SRC_UID = Convert.ToString(row["SRC_UID"]);
            }
            if (DBNull.Value != row["SRC_FC"] && row["SRC_FC"] is not null) {
                SRC_FC = Convert.ToString(row["SRC_FC"]);
            }
            if (DBNull.Value != row["SRC_SUB"] && row["SRC_SUB"] is not null) {
                SRC_SUB = Convert.ToString(row["SRC_SUB"]);
            }
            if (DBNull.Value != row["DEST_FC"] && row["DEST_FC"] is not null) {
                DEST_FC = Convert.ToString(row["DEST_FC"]);
            }
            if (DBNull.Value != row["DEST_SUB"] && row["DEST_SUB"] is not null) {
                DEST_SUB = Convert.ToString(row["DEST_SUB"]);
            }
            if (DBNull.Value != row["SRC_LNAM"] && row["SRC_LNAM"] is not null) {
                SRC_LNAM = Convert.ToString(row["SRC_LNAM"]);
            }
            if (DBNull.Value != row["DEST_LNAM"] && row["DEST_LNAM"] is not null) {
                DEST_LNAM = Convert.ToString(row["DEST_LNAM"]);
            }
            if (DBNull.Value != row["PLTS_COMP_SCALE"] && row["PLTS_COMP_SCALE"] is not null) {
                PLTS_COMP_SCALE = Convert.ToInt32(row["PLTS_COMP_SCALE"]);
            }
            if (DBNull.Value != row["IS_CONFLATE"] && row["IS_CONFLATE"] is not null) {
                IS_CONFLATE = Convert.ToInt32(row["IS_CONFLATE"]);
            }
            if (DBNull.Value != row["NIS_PRODUCTS"] && row["NIS_PRODUCTS"] is not null) {
                NIS_PRODUCTS = Convert.ToInt32(row["NIS_PRODUCTS"]);
            }
            if (DBNull.Value != row["EDITOR"] && row["EDITOR"] is not null) {
                EDITOR = Convert.ToString(row["EDITOR"]);
            }
            if (DBNull.Value != row["LAST_MOD"] && row["LAST_MOD"] is not null) {
                LAST_MOD = Convert.ToDateTime(row["LAST_MOD"]);
            }
            if (DBNull.Value != row["NIS_EDITOR"] && row["NIS_EDITOR"] is not null) {
                NIS_EDITOR = Convert.ToString(row["NIS_EDITOR"]);
            }
            if (DBNull.Value != row["NIS_LAST_MOD"] && row["NIS_LAST_MOD"] is not null) {
                NIS_LAST_MOD = Convert.ToDateTime(row["NIS_LAST_MOD"]);
            }
        }
    }
    internal class PLTS_Master_Slaves : S100Framework.Applications.S57.esri.S57Object
    {

        /// <summary>
        /// ObjectID
        /// </summary>
        [Description("ObjectID")]
        internal int? OBJECTID = default;

        /// <summary>
        /// FCSubtype
        /// </summary>
        [Description("FCSubtype")]
        internal int? FCSUBTYPE = default;

        /// <summary>
        /// ObjectClass
        /// </summary>
        [Description("ObjectClass")]
        internal string? OBJECTCLASS = default;

        /// <summary>
        /// RIND
        /// </summary>
        [Description("RIND")]
        internal int? RIND = default;

        /// <summary>
        /// Priority
        /// </summary>
        [Description("Priority")]
        internal int? PRIORITY = default;

        /// <summary>
        /// FEATURECLASS
        /// </summary>
        [Description("FEATURECLASS")]
        internal string? FEATURECLASS = default;

        /// <summary>
        /// PRIM
        /// </summary>
        [Description("PRIM")]
        internal int? PRIM = default;
        public PLTS_Master_Slaves(Row row) {
            if (DBNull.Value != row["OBJECTID"] && row["OBJECTID"] is not null) {
                OBJECTID = Convert.ToInt32(row["OBJECTID"]);
            }
            if (DBNull.Value != row["FCSUBTYPE"] && row["FCSUBTYPE"] is not null) {
                FCSUBTYPE = Convert.ToInt32(row["FCSUBTYPE"]);
            }
            if (DBNull.Value != row["OBJECTCLASS"] && row["OBJECTCLASS"] is not null) {
                OBJECTCLASS = Convert.ToString(row["OBJECTCLASS"]);
            }
            if (DBNull.Value != row["RIND"] && row["RIND"] is not null) {
                RIND = Convert.ToInt32(row["RIND"]);
            }
            if (DBNull.Value != row["PRIORITY"] && row["PRIORITY"] is not null) {
                PRIORITY = Convert.ToInt32(row["PRIORITY"]);
            }
            if (DBNull.Value != row["FEATURECLASS"] && row["FEATURECLASS"] is not null) {
                FEATURECLASS = Convert.ToString(row["FEATURECLASS"]);
            }
            if (DBNull.Value != row["PRIM"] && row["PRIM"] is not null) {
                PRIM = Convert.ToInt32(row["PRIM"]);
            }
        }
    }
}

