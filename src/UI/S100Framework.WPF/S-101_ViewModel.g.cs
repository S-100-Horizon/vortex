using System;
using System.Linq;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Collections.Immutable;
using System.Collections.ObjectModel;
using System.Reflection;
using S100Framework.DomainModel;
using S100Framework.DomainModel.Bindings;
using S100Framework.DomainModel.S101;
using S100Framework.DomainModel.S101.ComplexAttributes;
using S100Framework.DomainModel.S101.InformationTypes;
using S100Framework.DomainModel.S101.FeatureTypes;
using Xceed.Wpf.Toolkit.PropertyGrid.Attributes;

#nullable enable
namespace S100Framework.WPF.ViewModel.S101
{
    internal static class Preamble
    {
        public static ImmutableDictionary<string, Func<ViewModelBase>> _creators => ImmutableDictionary.Create<string, Func<ViewModelBase>>().AddRange(new Dictionary<string, Func<ViewModelBase>> { { typeof(DomainModel.S101.InformationTypes.ContactDetails).Name, () =>
        {
            return new ContactDetailsViewModel();
        } }, { typeof(DomainModel.S101.InformationTypes.ServiceHours).Name, () =>
        {
            return new ServiceHoursViewModel();
        } }, { typeof(DomainModel.S101.InformationTypes.NonStandardWorkingDay).Name, () =>
        {
            return new NonStandardWorkingDayViewModel();
        } }, { typeof(DomainModel.S101.InformationTypes.NauticalInformation).Name, () =>
        {
            return new NauticalInformationViewModel();
        } }, { typeof(DomainModel.S101.InformationTypes.SpatialQuality).Name, () =>
        {
            return new SpatialQualityViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.QualityOfNonBathymetricData).Name, () =>
        {
            return new QualityOfNonBathymetricDataViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.DataCoverage).Name, () =>
        {
            return new DataCoverageViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.NavigationalSystemOfMarks).Name, () =>
        {
            return new NavigationalSystemOfMarksViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LocalDirectionOfBuoyage).Name, () =>
        {
            return new LocalDirectionOfBuoyageViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.QualityOfBathymetricData).Name, () =>
        {
            return new QualityOfBathymetricDataViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SoundingDatum).Name, () =>
        {
            return new SoundingDatumViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.VerticalDatumOfData).Name, () =>
        {
            return new VerticalDatumOfDataViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.QualityOfSurvey).Name, () =>
        {
            return new QualityOfSurveyViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.UpdateInformation).Name, () =>
        {
            return new UpdateInformationViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.MagneticVariation).Name, () =>
        {
            return new MagneticVariationViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LocalMagneticAnomaly).Name, () =>
        {
            return new LocalMagneticAnomalyViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Coastline).Name, () =>
        {
            return new CoastlineViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LandArea).Name, () =>
        {
            return new LandAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.IslandGroup).Name, () =>
        {
            return new IslandGroupViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LandElevation).Name, () =>
        {
            return new LandElevationViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.River).Name, () =>
        {
            return new RiverViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Rapids).Name, () =>
        {
            return new RapidsViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Waterfall).Name, () =>
        {
            return new WaterfallViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Lake).Name, () =>
        {
            return new LakeViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LandRegion).Name, () =>
        {
            return new LandRegionViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Vegetation).Name, () =>
        {
            return new VegetationViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.IceArea).Name, () =>
        {
            return new IceAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SlopingGround).Name, () =>
        {
            return new SlopingGroundViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SlopeTopline).Name, () =>
        {
            return new SlopeToplineViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Tideway).Name, () =>
        {
            return new TidewayViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.BuiltUpArea).Name, () =>
        {
            return new BuiltUpAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Building).Name, () =>
        {
            return new BuildingViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.AirportAirfield).Name, () =>
        {
            return new AirportAirfieldViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Runway).Name, () =>
        {
            return new RunwayViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Helipad).Name, () =>
        {
            return new HelipadViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Bridge).Name, () =>
        {
            return new BridgeViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SpanFixed).Name, () =>
        {
            return new SpanFixedViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SpanOpening).Name, () =>
        {
            return new SpanOpeningViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Conveyor).Name, () =>
        {
            return new ConveyorViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.CableOverhead).Name, () =>
        {
            return new CableOverheadViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.PipelineOverhead).Name, () =>
        {
            return new PipelineOverheadViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.PylonBridgeSupport).Name, () =>
        {
            return new PylonBridgeSupportViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.FenceWall).Name, () =>
        {
            return new FenceWallViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Railway).Name, () =>
        {
            return new RailwayViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Road).Name, () =>
        {
            return new RoadViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Tunnel).Name, () =>
        {
            return new TunnelViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Landmark).Name, () =>
        {
            return new LandmarkViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SiloTank).Name, () =>
        {
            return new SiloTankViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.WindTurbine).Name, () =>
        {
            return new WindTurbineViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.FortifiedStructure).Name, () =>
        {
            return new FortifiedStructureViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.ProductionStorageArea).Name, () =>
        {
            return new ProductionStorageAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Checkpoint).Name, () =>
        {
            return new CheckpointViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Hulk).Name, () =>
        {
            return new HulkViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Pile).Name, () =>
        {
            return new PileViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Dyke).Name, () =>
        {
            return new DykeViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.ShorelineConstruction).Name, () =>
        {
            return new ShorelineConstructionViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.StructureOverNavigableWater).Name, () =>
        {
            return new StructureOverNavigableWaterViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Causeway).Name, () =>
        {
            return new CausewayViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Canal).Name, () =>
        {
            return new CanalViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.DistanceMark).Name, () =>
        {
            return new DistanceMarkViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Gate).Name, () =>
        {
            return new GateViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Dam).Name, () =>
        {
            return new DamViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Crane).Name, () =>
        {
            return new CraneViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Berth).Name, () =>
        {
            return new BerthViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Dolphin).Name, () =>
        {
            return new DolphinViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Bollard).Name, () =>
        {
            return new BollardViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.DryDock).Name, () =>
        {
            return new DryDockViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.FloatingDock).Name, () =>
        {
            return new FloatingDockViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Pontoon).Name, () =>
        {
            return new PontoonViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.DockArea).Name, () =>
        {
            return new DockAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Gridiron).Name, () =>
        {
            return new GridironViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LockBasin).Name, () =>
        {
            return new LockBasinViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.MooringTrot).Name, () =>
        {
            return new MooringTrotViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SeaAreaNamedWaterArea).Name, () =>
        {
            return new SeaAreaNamedWaterAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.TidalStreamFloodEbb).Name, () =>
        {
            return new TidalStreamFloodEbbViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.CurrentNonGravitational).Name, () =>
        {
            return new CurrentNonGravitationalViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.WaterTurbulence).Name, () =>
        {
            return new WaterTurbulenceViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.TidalStreamPanelData).Name, () =>
        {
            return new TidalStreamPanelDataViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Sounding).Name, () =>
        {
            return new SoundingViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.DredgedArea).Name, () =>
        {
            return new DredgedAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SweptArea).Name, () =>
        {
            return new SweptAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.DepthContour).Name, () =>
        {
            return new DepthContourViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.DepthArea).Name, () =>
        {
            return new DepthAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.DepthNoBottomFound).Name, () =>
        {
            return new DepthNoBottomFoundViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.UnsurveyedArea).Name, () =>
        {
            return new UnsurveyedAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SeabedArea).Name, () =>
        {
            return new SeabedAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.WeedKelp).Name, () =>
        {
            return new WeedKelpViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Seagrass).Name, () =>
        {
            return new SeagrassViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Sandwave).Name, () =>
        {
            return new SandwaveViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Spring).Name, () =>
        {
            return new SpringViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.UnderwaterAwashRock).Name, () =>
        {
            return new UnderwaterAwashRockViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Wreck).Name, () =>
        {
            return new WreckViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Obstruction).Name, () =>
        {
            return new ObstructionViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.FoulGround).Name, () =>
        {
            return new FoulGroundViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.DiscolouredWater).Name, () =>
        {
            return new DiscolouredWaterViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.FishingFacility).Name, () =>
        {
            return new FishingFacilityViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.MarineFarmCulture).Name, () =>
        {
            return new MarineFarmCultureViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.OffshorePlatform).Name, () =>
        {
            return new OffshorePlatformViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.CableSubmarine).Name, () =>
        {
            return new CableSubmarineViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.CableArea).Name, () =>
        {
            return new CableAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.PipelineSubmarineOnLand).Name, () =>
        {
            return new PipelineSubmarineOnLandViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SubmarinePipelineArea).Name, () =>
        {
            return new SubmarinePipelineAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.OffshoreProductionArea).Name, () =>
        {
            return new OffshoreProductionAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.NavigationLine).Name, () =>
        {
            return new NavigationLineViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.RecommendedTrack).Name, () =>
        {
            return new RecommendedTrackViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.RangeSystem).Name, () =>
        {
            return new RangeSystemViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Fairway).Name, () =>
        {
            return new FairwayViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.FairwaySystem).Name, () =>
        {
            return new FairwaySystemViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.RecommendedRouteCentreline).Name, () =>
        {
            return new RecommendedRouteCentrelineViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.TwoWayRoutePart).Name, () =>
        {
            return new TwoWayRoutePartViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.TwoWayRoute).Name, () =>
        {
            return new TwoWayRouteViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.RecommendedTrafficLanePart).Name, () =>
        {
            return new RecommendedTrafficLanePartViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.DeepWaterRouteCentreline).Name, () =>
        {
            return new DeepWaterRouteCentrelineViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.DeepWaterRoutePart).Name, () =>
        {
            return new DeepWaterRoutePartViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.DeepWaterRoute).Name, () =>
        {
            return new DeepWaterRouteViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.InshoreTrafficZone).Name, () =>
        {
            return new InshoreTrafficZoneViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.PrecautionaryArea).Name, () =>
        {
            return new PrecautionaryAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.TrafficSeparationSchemeLanePart).Name, () =>
        {
            return new TrafficSeparationSchemeLanePartViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SeparationZoneOrLine).Name, () =>
        {
            return new SeparationZoneOrLineViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.TrafficSeparationSchemeBoundary).Name, () =>
        {
            return new TrafficSeparationSchemeBoundaryViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.TrafficSeparationSchemeCrossing).Name, () =>
        {
            return new TrafficSeparationSchemeCrossingViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.TrafficSeparationSchemeRoundabout).Name, () =>
        {
            return new TrafficSeparationSchemeRoundaboutViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.TrafficSeparationScheme).Name, () =>
        {
            return new TrafficSeparationSchemeViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.ArchipelagicSeaLaneArea).Name, () =>
        {
            return new ArchipelagicSeaLaneAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.ArchipelagicSeaLaneAxis).Name, () =>
        {
            return new ArchipelagicSeaLaneAxisViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.ArchipelagicSeaLane).Name, () =>
        {
            return new ArchipelagicSeaLaneViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.RadioCallingInPoint).Name, () =>
        {
            return new RadioCallingInPointViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.FerryRoute).Name, () =>
        {
            return new FerryRouteViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.RadarLine).Name, () =>
        {
            return new RadarLineViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.RadarRange).Name, () =>
        {
            return new RadarRangeViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.RadarStation).Name, () =>
        {
            return new RadarStationViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.AnchorageArea).Name, () =>
        {
            return new AnchorageAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.MooringArea).Name, () =>
        {
            return new MooringAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.AnchorBerth).Name, () =>
        {
            return new AnchorBerthViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SeaplaneLandingArea).Name, () =>
        {
            return new SeaplaneLandingAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.DumpingGround).Name, () =>
        {
            return new DumpingGroundViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.MilitaryPracticeArea).Name, () =>
        {
            return new MilitaryPracticeAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.AdministrationArea).Name, () =>
        {
            return new AdministrationAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.CargoTranshipmentArea).Name, () =>
        {
            return new CargoTranshipmentAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.CautionArea).Name, () =>
        {
            return new CautionAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.InformationArea).Name, () =>
        {
            return new InformationAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.ContiguousZone).Name, () =>
        {
            return new ContiguousZoneViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.ContinentalShelfArea).Name, () =>
        {
            return new ContinentalShelfAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.CustomZone).Name, () =>
        {
            return new CustomZoneViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.ExclusiveEconomicZone).Name, () =>
        {
            return new ExclusiveEconomicZoneViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.FisheryZone).Name, () =>
        {
            return new FisheryZoneViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.FishingGround).Name, () =>
        {
            return new FishingGroundViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.FreePortArea).Name, () =>
        {
            return new FreePortAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.HarbourAreaAdministrative).Name, () =>
        {
            return new HarbourAreaAdministrativeViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LogPond).Name, () =>
        {
            return new LogPondViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.OilBarrier).Name, () =>
        {
            return new OilBarrierViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.StraightTerritorialSeaBaseline).Name, () =>
        {
            return new StraightTerritorialSeaBaselineViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.TerritorialSeaArea).Name, () =>
        {
            return new TerritorialSeaAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SubmarineTransitLane).Name, () =>
        {
            return new SubmarineTransitLaneViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.PilotageDistrict).Name, () =>
        {
            return new PilotageDistrictViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.CollisionRegulationsLimit).Name, () =>
        {
            return new CollisionRegulationsLimitViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.MarinePollutionRegulationsArea).Name, () =>
        {
            return new MarinePollutionRegulationsAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.RestrictedArea).Name, () =>
        {
            return new RestrictedAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LightAllAround).Name, () =>
        {
            return new LightAllAroundViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LightSectored).Name, () =>
        {
            return new LightSectoredViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LightFogDetector).Name, () =>
        {
            return new LightFogDetectorViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LightAirObstruction).Name, () =>
        {
            return new LightAirObstructionViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LateralBuoy).Name, () =>
        {
            return new LateralBuoyViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.CardinalBuoy).Name, () =>
        {
            return new CardinalBuoyViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.IsolatedDangerBuoy).Name, () =>
        {
            return new IsolatedDangerBuoyViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SafeWaterBuoy).Name, () =>
        {
            return new SafeWaterBuoyViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SpecialPurposeGeneralBuoy).Name, () =>
        {
            return new SpecialPurposeGeneralBuoyViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.EmergencyWreckMarkingBuoy).Name, () =>
        {
            return new EmergencyWreckMarkingBuoyViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.InstallationBuoy).Name, () =>
        {
            return new InstallationBuoyViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.MooringBuoy).Name, () =>
        {
            return new MooringBuoyViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LateralBeacon).Name, () =>
        {
            return new LateralBeaconViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.CardinalBeacon).Name, () =>
        {
            return new CardinalBeaconViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.IsolatedDangerBeacon).Name, () =>
        {
            return new IsolatedDangerBeaconViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SafeWaterBeacon).Name, () =>
        {
            return new SafeWaterBeaconViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SpecialPurposeGeneralBeacon).Name, () =>
        {
            return new SpecialPurposeGeneralBeaconViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Daymark).Name, () =>
        {
            return new DaymarkViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LightFloat).Name, () =>
        {
            return new LightFloatViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.LightVessel).Name, () =>
        {
            return new LightVesselViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Retroreflector).Name, () =>
        {
            return new RetroreflectorViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.RadarReflector).Name, () =>
        {
            return new RadarReflectorViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.FogSignal).Name, () =>
        {
            return new FogSignalViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.PhysicalAISAidToNavigation).Name, () =>
        {
            return new PhysicalAISAidToNavigationViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.VirtualAISAidToNavigation).Name, () =>
        {
            return new VirtualAISAidToNavigationViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.RadioStation).Name, () =>
        {
            return new RadioStationViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.RadarTransponderBeacon).Name, () =>
        {
            return new RadarTransponderBeaconViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.PilotBoardingPlace).Name, () =>
        {
            return new PilotBoardingPlaceViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.VesselTrafficServiceArea).Name, () =>
        {
            return new VesselTrafficServiceAreaViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.CoastGuardStation).Name, () =>
        {
            return new CoastGuardStationViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SignalStationWarning).Name, () =>
        {
            return new SignalStationWarningViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SignalStationTraffic).Name, () =>
        {
            return new SignalStationTrafficViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.RescueStation).Name, () =>
        {
            return new RescueStationViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.HarbourFacility).Name, () =>
        {
            return new HarbourFacilityViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.SmallCraftFacility).Name, () =>
        {
            return new SmallCraftFacilityViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.TextPlacement).Name, () =>
        {
            return new TextPlacementViewModel();
        } }, { typeof(DomainModel.S101.FeatureTypes.Chart1Feature).Name, () =>
        {
            return new Chart1FeatureViewModel();
        } }, });
    }

    public class Handles : iHandles
    {
        public static IDictionary<Type, Func<InformationAssociationConnector[]>> AssociationConnectorInformations => new Dictionary<Type, Func<InformationAssociationConnector[]>>
        {
            {
                typeof(QualityOfBathymetricDataCompositionViewModel),
                () => [new InformationAssociationConnector<QualityOfBathymetricData>()
                {
                    roleType = roleType.association,
                    role = "theQualityInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(SpatialQuality)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<QualityOfBathymetricDataCompositionViewModel.theQualityInformationQualityOfBathymetricDataRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<QualityOfBathymetricDataViewModel.QualityOfBathymetricDataRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(AdditionalInformationViewModel),
                () => [new InformationAssociationConnector<AdministrationArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationAdministrationAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<AdministrationAreaViewModel.AdministrationAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<AirportAirfield>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationAirportAirfieldRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<AirportAirfieldViewModel.AirportAirfieldRefIdViewModel>(),
                }, new InformationAssociationConnector<AnchorageArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationAnchorageAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<AnchorageAreaViewModel.AnchorageAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<AnchorBerth>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationAnchorBerthRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<AnchorBerthViewModel.AnchorBerthRefIdViewModel>(),
                }, new InformationAssociationConnector<ArchipelagicSeaLane>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationArchipelagicSeaLaneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneViewModel.ArchipelagicSeaLaneRefIdViewModel>(),
                }, new InformationAssociationConnector<ArchipelagicSeaLaneArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationArchipelagicSeaLaneAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneAreaViewModel.ArchipelagicSeaLaneAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<ArchipelagicSeaLaneAxis>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationArchipelagicSeaLaneAxisRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneAxisViewModel.ArchipelagicSeaLaneAxisRefIdViewModel>(),
                }, new InformationAssociationConnector<Berth>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationBerthRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BerthViewModel.BerthRefIdViewModel>(),
                }, new InformationAssociationConnector<Bollard>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationBollardRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BollardViewModel.BollardRefIdViewModel>(),
                }, new InformationAssociationConnector<Bridge>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationBridgeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BridgeViewModel.BridgeRefIdViewModel>(),
                }, new InformationAssociationConnector<Building>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationBuildingRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BuildingViewModel.BuildingRefIdViewModel>(),
                }, new InformationAssociationConnector<BuiltUpArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationBuiltUpAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BuiltUpAreaViewModel.BuiltUpAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<CableArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCableAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CableAreaViewModel.CableAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<CableOverhead>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCableOverheadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CableOverheadViewModel.CableOverheadRefIdViewModel>(),
                }, new InformationAssociationConnector<CableSubmarine>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCableSubmarineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CableSubmarineViewModel.CableSubmarineRefIdViewModel>(),
                }, new InformationAssociationConnector<Canal>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCanalRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CanalViewModel.CanalRefIdViewModel>(),
                }, new InformationAssociationConnector<CardinalBeacon>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCardinalBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CardinalBeaconViewModel.CardinalBeaconRefIdViewModel>(),
                }, new InformationAssociationConnector<CardinalBuoy>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCardinalBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CardinalBuoyViewModel.CardinalBuoyRefIdViewModel>(),
                }, new InformationAssociationConnector<CargoTranshipmentArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCargoTranshipmentAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CargoTranshipmentAreaViewModel.CargoTranshipmentAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<Causeway>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCausewayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CausewayViewModel.CausewayRefIdViewModel>(),
                }, new InformationAssociationConnector<CautionArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCautionAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CautionAreaViewModel.CautionAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<Checkpoint>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCheckpointRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CheckpointViewModel.CheckpointRefIdViewModel>(),
                }, new InformationAssociationConnector<CoastGuardStation>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCoastGuardStationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CoastGuardStationViewModel.CoastGuardStationRefIdViewModel>(),
                }, new InformationAssociationConnector<Coastline>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCoastlineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CoastlineViewModel.CoastlineRefIdViewModel>(),
                }, new InformationAssociationConnector<CollisionRegulationsLimit>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCollisionRegulationsLimitRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CollisionRegulationsLimitViewModel.CollisionRegulationsLimitRefIdViewModel>(),
                }, new InformationAssociationConnector<ContiguousZone>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationContiguousZoneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ContiguousZoneViewModel.ContiguousZoneRefIdViewModel>(),
                }, new InformationAssociationConnector<ContinentalShelfArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationContinentalShelfAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ContinentalShelfAreaViewModel.ContinentalShelfAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<Conveyor>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationConveyorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ConveyorViewModel.ConveyorRefIdViewModel>(),
                }, new InformationAssociationConnector<Crane>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCraneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CraneViewModel.CraneRefIdViewModel>(),
                }, new InformationAssociationConnector<CurrentNonGravitational>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCurrentNonGravitationalRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CurrentNonGravitationalViewModel.CurrentNonGravitationalRefIdViewModel>(),
                }, new InformationAssociationConnector<CustomZone>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationCustomZoneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CustomZoneViewModel.CustomZoneRefIdViewModel>(),
                }, new InformationAssociationConnector<Dam>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDamRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DamViewModel.DamRefIdViewModel>(),
                }, new InformationAssociationConnector<Daymark>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDaymarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DaymarkViewModel.DaymarkRefIdViewModel>(),
                }, new InformationAssociationConnector<DeepWaterRoute>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDeepWaterRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRouteViewModel.DeepWaterRouteRefIdViewModel>(),
                }, new InformationAssociationConnector<DeepWaterRouteCentreline>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDeepWaterRouteCentrelineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRouteCentrelineViewModel.DeepWaterRouteCentrelineRefIdViewModel>(),
                }, new InformationAssociationConnector<DeepWaterRoutePart>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDeepWaterRoutePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRoutePartViewModel.DeepWaterRoutePartRefIdViewModel>(),
                }, new InformationAssociationConnector<DepthArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDepthAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DepthAreaViewModel.DepthAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<DepthContour>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDepthContourRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DepthContourViewModel.DepthContourRefIdViewModel>(),
                }, new InformationAssociationConnector<DepthNoBottomFound>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDepthNoBottomFoundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DepthNoBottomFoundViewModel.DepthNoBottomFoundRefIdViewModel>(),
                }, new InformationAssociationConnector<DiscolouredWater>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDiscolouredWaterRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DiscolouredWaterViewModel.DiscolouredWaterRefIdViewModel>(),
                }, new InformationAssociationConnector<DistanceMark>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDistanceMarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DistanceMarkViewModel.DistanceMarkRefIdViewModel>(),
                }, new InformationAssociationConnector<DockArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDockAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DockAreaViewModel.DockAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<Dolphin>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDolphinRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DolphinViewModel.DolphinRefIdViewModel>(),
                }, new InformationAssociationConnector<DredgedArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDredgedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DredgedAreaViewModel.DredgedAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<DryDock>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDryDockRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DryDockViewModel.DryDockRefIdViewModel>(),
                }, new InformationAssociationConnector<DumpingGround>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDumpingGroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DumpingGroundViewModel.DumpingGroundRefIdViewModel>(),
                }, new InformationAssociationConnector<Dyke>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationDykeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DykeViewModel.DykeRefIdViewModel>(),
                }, new InformationAssociationConnector<EmergencyWreckMarkingBuoy>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationEmergencyWreckMarkingBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<EmergencyWreckMarkingBuoyViewModel.EmergencyWreckMarkingBuoyRefIdViewModel>(),
                }, new InformationAssociationConnector<ExclusiveEconomicZone>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationExclusiveEconomicZoneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ExclusiveEconomicZoneViewModel.ExclusiveEconomicZoneRefIdViewModel>(),
                }, new InformationAssociationConnector<Fairway>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationFairwayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FairwayViewModel.FairwayRefIdViewModel>(),
                }, new InformationAssociationConnector<FairwaySystem>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationFairwaySystemRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FairwaySystemViewModel.FairwaySystemRefIdViewModel>(),
                }, new InformationAssociationConnector<FenceWall>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationFenceWallRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FenceWallViewModel.FenceWallRefIdViewModel>(),
                }, new InformationAssociationConnector<FerryRoute>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationFerryRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FerryRouteViewModel.FerryRouteRefIdViewModel>(),
                }, new InformationAssociationConnector<FisheryZone>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationFisheryZoneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FisheryZoneViewModel.FisheryZoneRefIdViewModel>(),
                }, new InformationAssociationConnector<FishingFacility>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationFishingFacilityRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FishingFacilityViewModel.FishingFacilityRefIdViewModel>(),
                }, new InformationAssociationConnector<FishingGround>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationFishingGroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FishingGroundViewModel.FishingGroundRefIdViewModel>(),
                }, new InformationAssociationConnector<FloatingDock>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationFloatingDockRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FloatingDockViewModel.FloatingDockRefIdViewModel>(),
                }, new InformationAssociationConnector<FogSignal>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationFogSignalRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FogSignalViewModel.FogSignalRefIdViewModel>(),
                }, new InformationAssociationConnector<FortifiedStructure>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationFortifiedStructureRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FortifiedStructureViewModel.FortifiedStructureRefIdViewModel>(),
                }, new InformationAssociationConnector<FoulGround>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationFoulGroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FoulGroundViewModel.FoulGroundRefIdViewModel>(),
                }, new InformationAssociationConnector<FreePortArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationFreePortAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FreePortAreaViewModel.FreePortAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<Gate>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationGateRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<GateViewModel.GateRefIdViewModel>(),
                }, new InformationAssociationConnector<Gridiron>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationGridironRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<GridironViewModel.GridironRefIdViewModel>(),
                }, new InformationAssociationConnector<HarbourAreaAdministrative>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationHarbourAreaAdministrativeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HarbourAreaAdministrativeViewModel.HarbourAreaAdministrativeRefIdViewModel>(),
                }, new InformationAssociationConnector<HarbourFacility>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationHarbourFacilityRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HarbourFacilityViewModel.HarbourFacilityRefIdViewModel>(),
                }, new InformationAssociationConnector<Helipad>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationHelipadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HelipadViewModel.HelipadRefIdViewModel>(),
                }, new InformationAssociationConnector<Hulk>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationHulkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HulkViewModel.HulkRefIdViewModel>(),
                }, new InformationAssociationConnector<IceArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationIceAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IceAreaViewModel.IceAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<InformationArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationInformationAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<InformationAreaViewModel.InformationAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<InshoreTrafficZone>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationInshoreTrafficZoneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<InshoreTrafficZoneViewModel.InshoreTrafficZoneRefIdViewModel>(),
                }, new InformationAssociationConnector<InstallationBuoy>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationInstallationBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<InstallationBuoyViewModel.InstallationBuoyRefIdViewModel>(),
                }, new InformationAssociationConnector<IslandGroup>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationIslandGroupRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IslandGroupViewModel.IslandGroupRefIdViewModel>(),
                }, new InformationAssociationConnector<IsolatedDangerBeacon>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationIsolatedDangerBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IsolatedDangerBeaconViewModel.IsolatedDangerBeaconRefIdViewModel>(),
                }, new InformationAssociationConnector<IsolatedDangerBuoy>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationIsolatedDangerBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IsolatedDangerBuoyViewModel.IsolatedDangerBuoyRefIdViewModel>(),
                }, new InformationAssociationConnector<Lake>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLakeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LakeViewModel.LakeRefIdViewModel>(),
                }, new InformationAssociationConnector<LandArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLandAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandAreaViewModel.LandAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<LandElevation>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLandElevationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandElevationViewModel.LandElevationRefIdViewModel>(),
                }, new InformationAssociationConnector<Landmark>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLandmarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandmarkViewModel.LandmarkRefIdViewModel>(),
                }, new InformationAssociationConnector<LandRegion>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLandRegionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandRegionViewModel.LandRegionRefIdViewModel>(),
                }, new InformationAssociationConnector<LateralBeacon>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLateralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LateralBeaconViewModel.LateralBeaconRefIdViewModel>(),
                }, new InformationAssociationConnector<LateralBuoy>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLateralBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LateralBuoyViewModel.LateralBuoyRefIdViewModel>(),
                }, new InformationAssociationConnector<LightAirObstruction>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLightAirObstructionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightAirObstructionViewModel.LightAirObstructionRefIdViewModel>(),
                }, new InformationAssociationConnector<LightAllAround>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLightAllAroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightAllAroundViewModel.LightAllAroundRefIdViewModel>(),
                }, new InformationAssociationConnector<LightFloat>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLightFloatRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightFloatViewModel.LightFloatRefIdViewModel>(),
                }, new InformationAssociationConnector<LightFogDetector>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLightFogDetectorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightFogDetectorViewModel.LightFogDetectorRefIdViewModel>(),
                }, new InformationAssociationConnector<LightSectored>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLightSectoredRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightSectoredViewModel.LightSectoredRefIdViewModel>(),
                }, new InformationAssociationConnector<LightVessel>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLightVesselRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightVesselViewModel.LightVesselRefIdViewModel>(),
                }, new InformationAssociationConnector<LocalMagneticAnomaly>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLocalMagneticAnomalyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LocalMagneticAnomalyViewModel.LocalMagneticAnomalyRefIdViewModel>(),
                }, new InformationAssociationConnector<LockBasin>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLockBasinRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LockBasinViewModel.LockBasinRefIdViewModel>(),
                }, new InformationAssociationConnector<LogPond>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationLogPondRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LogPondViewModel.LogPondRefIdViewModel>(),
                }, new InformationAssociationConnector<MagneticVariation>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationMagneticVariationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MagneticVariationViewModel.MagneticVariationRefIdViewModel>(),
                }, new InformationAssociationConnector<MarineFarmCulture>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationMarineFarmCultureRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MarineFarmCultureViewModel.MarineFarmCultureRefIdViewModel>(),
                }, new InformationAssociationConnector<MarinePollutionRegulationsArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationMarinePollutionRegulationsAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MarinePollutionRegulationsAreaViewModel.MarinePollutionRegulationsAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<MilitaryPracticeArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationMilitaryPracticeAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MilitaryPracticeAreaViewModel.MilitaryPracticeAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<MooringArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationMooringAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MooringAreaViewModel.MooringAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<MooringBuoy>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationMooringBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MooringBuoyViewModel.MooringBuoyRefIdViewModel>(),
                }, new InformationAssociationConnector<MooringTrot>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationMooringTrotRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MooringTrotViewModel.MooringTrotRefIdViewModel>(),
                }, new InformationAssociationConnector<NavigationLine>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationNavigationLineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<NavigationLineViewModel.NavigationLineRefIdViewModel>(),
                }, new InformationAssociationConnector<Obstruction>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationObstructionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ObstructionViewModel.ObstructionRefIdViewModel>(),
                }, new InformationAssociationConnector<OffshorePlatform>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationOffshorePlatformRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<OffshorePlatformViewModel.OffshorePlatformRefIdViewModel>(),
                }, new InformationAssociationConnector<OffshoreProductionArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationOffshoreProductionAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<OffshoreProductionAreaViewModel.OffshoreProductionAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<OilBarrier>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationOilBarrierRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<OilBarrierViewModel.OilBarrierRefIdViewModel>(),
                }, new InformationAssociationConnector<PhysicalAISAidToNavigation>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationPhysicalAISAidToNavigationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PhysicalAISAidToNavigationViewModel.PhysicalAISAidToNavigationRefIdViewModel>(),
                }, new InformationAssociationConnector<Pile>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationPileRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PileViewModel.PileRefIdViewModel>(),
                }, new InformationAssociationConnector<PilotageDistrict>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationPilotageDistrictRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PilotageDistrictViewModel.PilotageDistrictRefIdViewModel>(),
                }, new InformationAssociationConnector<PilotBoardingPlace>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationPilotBoardingPlaceRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PilotBoardingPlaceViewModel.PilotBoardingPlaceRefIdViewModel>(),
                }, new InformationAssociationConnector<PipelineOverhead>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationPipelineOverheadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PipelineOverheadViewModel.PipelineOverheadRefIdViewModel>(),
                }, new InformationAssociationConnector<PipelineSubmarineOnLand>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationPipelineSubmarineOnLandRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PipelineSubmarineOnLandViewModel.PipelineSubmarineOnLandRefIdViewModel>(),
                }, new InformationAssociationConnector<Pontoon>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationPontoonRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PontoonViewModel.PontoonRefIdViewModel>(),
                }, new InformationAssociationConnector<PrecautionaryArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationPrecautionaryAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PrecautionaryAreaViewModel.PrecautionaryAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<ProductionStorageArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationProductionStorageAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ProductionStorageAreaViewModel.ProductionStorageAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<PylonBridgeSupport>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationPylonBridgeSupportRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PylonBridgeSupportViewModel.PylonBridgeSupportRefIdViewModel>(),
                }, new InformationAssociationConnector<RadarLine>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRadarLineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarLineViewModel.RadarLineRefIdViewModel>(),
                }, new InformationAssociationConnector<RadarRange>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRadarRangeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarRangeViewModel.RadarRangeRefIdViewModel>(),
                }, new InformationAssociationConnector<RadarReflector>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRadarReflectorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarReflectorViewModel.RadarReflectorRefIdViewModel>(),
                }, new InformationAssociationConnector<RadarStation>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRadarStationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarStationViewModel.RadarStationRefIdViewModel>(),
                }, new InformationAssociationConnector<RadarTransponderBeacon>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRadarTransponderBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarTransponderBeaconViewModel.RadarTransponderBeaconRefIdViewModel>(),
                }, new InformationAssociationConnector<RadioCallingInPoint>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRadioCallingInPointRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadioCallingInPointViewModel.RadioCallingInPointRefIdViewModel>(),
                }, new InformationAssociationConnector<RadioStation>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRadioStationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadioStationViewModel.RadioStationRefIdViewModel>(),
                }, new InformationAssociationConnector<Railway>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRailwayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RailwayViewModel.RailwayRefIdViewModel>(),
                }, new InformationAssociationConnector<RangeSystem>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRangeSystemRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RangeSystemViewModel.RangeSystemRefIdViewModel>(),
                }, new InformationAssociationConnector<Rapids>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRapidsRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RapidsViewModel.RapidsRefIdViewModel>(),
                }, new InformationAssociationConnector<RecommendedRouteCentreline>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRecommendedRouteCentrelineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RecommendedRouteCentrelineViewModel.RecommendedRouteCentrelineRefIdViewModel>(),
                }, new InformationAssociationConnector<RecommendedTrack>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRecommendedTrackRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RecommendedTrackViewModel.RecommendedTrackRefIdViewModel>(),
                }, new InformationAssociationConnector<RecommendedTrafficLanePart>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRecommendedTrafficLanePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RecommendedTrafficLanePartViewModel.RecommendedTrafficLanePartRefIdViewModel>(),
                }, new InformationAssociationConnector<RescueStation>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRescueStationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RescueStationViewModel.RescueStationRefIdViewModel>(),
                }, new InformationAssociationConnector<RestrictedArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRestrictedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RestrictedAreaViewModel.RestrictedAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<Retroreflector>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRetroreflectorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RetroreflectorViewModel.RetroreflectorRefIdViewModel>(),
                }, new InformationAssociationConnector<River>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRiverRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RiverViewModel.RiverRefIdViewModel>(),
                }, new InformationAssociationConnector<Road>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRoadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RoadViewModel.RoadRefIdViewModel>(),
                }, new InformationAssociationConnector<Runway>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationRunwayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RunwayViewModel.RunwayRefIdViewModel>(),
                }, new InformationAssociationConnector<SafeWaterBeacon>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSafeWaterBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SafeWaterBeaconViewModel.SafeWaterBeaconRefIdViewModel>(),
                }, new InformationAssociationConnector<SafeWaterBuoy>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSafeWaterBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SafeWaterBuoyViewModel.SafeWaterBuoyRefIdViewModel>(),
                }, new InformationAssociationConnector<Sandwave>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSandwaveRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SandwaveViewModel.SandwaveRefIdViewModel>(),
                }, new InformationAssociationConnector<SeaAreaNamedWaterArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSeaAreaNamedWaterAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeaAreaNamedWaterAreaViewModel.SeaAreaNamedWaterAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<SeabedArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSeabedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeabedAreaViewModel.SeabedAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<Seagrass>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSeagrassRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeagrassViewModel.SeagrassRefIdViewModel>(),
                }, new InformationAssociationConnector<SeaplaneLandingArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSeaplaneLandingAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeaplaneLandingAreaViewModel.SeaplaneLandingAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<SeparationZoneOrLine>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSeparationZoneOrLineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeparationZoneOrLineViewModel.SeparationZoneOrLineRefIdViewModel>(),
                }, new InformationAssociationConnector<ShorelineConstruction>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationShorelineConstructionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ShorelineConstructionViewModel.ShorelineConstructionRefIdViewModel>(),
                }, new InformationAssociationConnector<SignalStationTraffic>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSignalStationTrafficRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SignalStationTrafficViewModel.SignalStationTrafficRefIdViewModel>(),
                }, new InformationAssociationConnector<SignalStationWarning>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSignalStationWarningRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SignalStationWarningViewModel.SignalStationWarningRefIdViewModel>(),
                }, new InformationAssociationConnector<SiloTank>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSiloTankRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SiloTankViewModel.SiloTankRefIdViewModel>(),
                }, new InformationAssociationConnector<SlopeTopline>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSlopeToplineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SlopeToplineViewModel.SlopeToplineRefIdViewModel>(),
                }, new InformationAssociationConnector<SlopingGround>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSlopingGroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SlopingGroundViewModel.SlopingGroundRefIdViewModel>(),
                }, new InformationAssociationConnector<SmallCraftFacility>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSmallCraftFacilityRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SmallCraftFacilityViewModel.SmallCraftFacilityRefIdViewModel>(),
                }, new InformationAssociationConnector<Sounding>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSoundingRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SoundingViewModel.SoundingRefIdViewModel>(),
                }, new InformationAssociationConnector<SpanFixed>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSpanFixedRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpanFixedViewModel.SpanFixedRefIdViewModel>(),
                }, new InformationAssociationConnector<SpanOpening>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSpanOpeningRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpanOpeningViewModel.SpanOpeningRefIdViewModel>(),
                }, new InformationAssociationConnector<SpecialPurposeGeneralBeacon>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSpecialPurposeGeneralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpecialPurposeGeneralBeaconViewModel.SpecialPurposeGeneralBeaconRefIdViewModel>(),
                }, new InformationAssociationConnector<SpecialPurposeGeneralBuoy>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSpecialPurposeGeneralBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpecialPurposeGeneralBuoyViewModel.SpecialPurposeGeneralBuoyRefIdViewModel>(),
                }, new InformationAssociationConnector<Spring>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSpringRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpringViewModel.SpringRefIdViewModel>(),
                }, new InformationAssociationConnector<StraightTerritorialSeaBaseline>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationStraightTerritorialSeaBaselineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<StraightTerritorialSeaBaselineViewModel.StraightTerritorialSeaBaselineRefIdViewModel>(),
                }, new InformationAssociationConnector<StructureOverNavigableWater>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationStructureOverNavigableWaterRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<StructureOverNavigableWaterViewModel.StructureOverNavigableWaterRefIdViewModel>(),
                }, new InformationAssociationConnector<SubmarinePipelineArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSubmarinePipelineAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SubmarinePipelineAreaViewModel.SubmarinePipelineAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<SubmarineTransitLane>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSubmarineTransitLaneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SubmarineTransitLaneViewModel.SubmarineTransitLaneRefIdViewModel>(),
                }, new InformationAssociationConnector<SweptArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationSweptAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SweptAreaViewModel.SweptAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<TerritorialSeaArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationTerritorialSeaAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TerritorialSeaAreaViewModel.TerritorialSeaAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<TidalStreamFloodEbb>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationTidalStreamFloodEbbRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TidalStreamFloodEbbViewModel.TidalStreamFloodEbbRefIdViewModel>(),
                }, new InformationAssociationConnector<TidalStreamPanelData>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationTidalStreamPanelDataRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TidalStreamPanelDataViewModel.TidalStreamPanelDataRefIdViewModel>(),
                }, new InformationAssociationConnector<Tideway>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationTidewayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TidewayViewModel.TidewayRefIdViewModel>(),
                }, new InformationAssociationConnector<TrafficSeparationScheme>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationTrafficSeparationSchemeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeViewModel.TrafficSeparationSchemeRefIdViewModel>(),
                }, new InformationAssociationConnector<TrafficSeparationSchemeBoundary>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationTrafficSeparationSchemeBoundaryRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeBoundaryViewModel.TrafficSeparationSchemeBoundaryRefIdViewModel>(),
                }, new InformationAssociationConnector<TrafficSeparationSchemeCrossing>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationTrafficSeparationSchemeCrossingRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeCrossingViewModel.TrafficSeparationSchemeCrossingRefIdViewModel>(),
                }, new InformationAssociationConnector<TrafficSeparationSchemeLanePart>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationTrafficSeparationSchemeLanePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeLanePartViewModel.TrafficSeparationSchemeLanePartRefIdViewModel>(),
                }, new InformationAssociationConnector<TrafficSeparationSchemeRoundabout>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationTrafficSeparationSchemeRoundaboutRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeRoundaboutViewModel.TrafficSeparationSchemeRoundaboutRefIdViewModel>(),
                }, new InformationAssociationConnector<Tunnel>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationTunnelRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TunnelViewModel.TunnelRefIdViewModel>(),
                }, new InformationAssociationConnector<TwoWayRoute>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationTwoWayRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TwoWayRouteViewModel.TwoWayRouteRefIdViewModel>(),
                }, new InformationAssociationConnector<TwoWayRoutePart>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationTwoWayRoutePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TwoWayRoutePartViewModel.TwoWayRoutePartRefIdViewModel>(),
                }, new InformationAssociationConnector<UnderwaterAwashRock>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationUnderwaterAwashRockRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<UnderwaterAwashRockViewModel.UnderwaterAwashRockRefIdViewModel>(),
                }, new InformationAssociationConnector<UnsurveyedArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationUnsurveyedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<UnsurveyedAreaViewModel.UnsurveyedAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<Vegetation>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationVegetationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<VegetationViewModel.VegetationRefIdViewModel>(),
                }, new InformationAssociationConnector<VesselTrafficServiceArea>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationVesselTrafficServiceAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<VesselTrafficServiceAreaViewModel.VesselTrafficServiceAreaRefIdViewModel>(),
                }, new InformationAssociationConnector<VirtualAISAidToNavigation>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationVirtualAISAidToNavigationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<VirtualAISAidToNavigationViewModel.VirtualAISAidToNavigationRefIdViewModel>(),
                }, new InformationAssociationConnector<Waterfall>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationWaterfallRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WaterfallViewModel.WaterfallRefIdViewModel>(),
                }, new InformationAssociationConnector<WaterTurbulence>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationWaterTurbulenceRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WaterTurbulenceViewModel.WaterTurbulenceRefIdViewModel>(),
                }, new InformationAssociationConnector<WeedKelp>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationWeedKelpRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WeedKelpViewModel.WeedKelpRefIdViewModel>(),
                }, new InformationAssociationConnector<WindTurbine>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ContactDetails), typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationWindTurbineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WindTurbineViewModel.WindTurbineRefIdViewModel>(),
                }, new InformationAssociationConnector<Wreck>()
                {
                    roleType = roleType.association,
                    role = "theInformation",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(NauticalInformation)],
                    CreateForeignInformationBinding = () => new OptionalInformationBindingViewModel<AdditionalInformationViewModel.theInformationWreckRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WreckViewModel.WreckRefIdViewModel>(),
                }

                ]
            },
        };
        public static IDictionary<Type, Func<FeatureAssociationConnector[]>> AssociationConnectorFeatures => new Dictionary<Type, Func<FeatureAssociationConnector[]>>
        {
            {
                typeof(UpdatedInformationViewModel),
                () => [new FeatureAssociationConnector<AdministrationArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateAdministrationAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<AdministrationAreaViewModel.AdministrationAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<AirportAirfield>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateAirportAirfieldRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<AirportAirfieldViewModel.AirportAirfieldRefIdViewModel>(),
                }, new FeatureAssociationConnector<AnchorageArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateAnchorageAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<AnchorageAreaViewModel.AnchorageAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<AnchorBerth>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateAnchorBerthRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<AnchorBerthViewModel.AnchorBerthRefIdViewModel>(),
                }, new FeatureAssociationConnector<ArchipelagicSeaLane>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateArchipelagicSeaLaneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneViewModel.ArchipelagicSeaLaneRefIdViewModel>(),
                }, new FeatureAssociationConnector<ArchipelagicSeaLaneArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateArchipelagicSeaLaneAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneAreaViewModel.ArchipelagicSeaLaneAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<ArchipelagicSeaLaneAxis>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateArchipelagicSeaLaneAxisRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneAxisViewModel.ArchipelagicSeaLaneAxisRefIdViewModel>(),
                }, new FeatureAssociationConnector<Berth>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateBerthRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BerthViewModel.BerthRefIdViewModel>(),
                }, new FeatureAssociationConnector<Bollard>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateBollardRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BollardViewModel.BollardRefIdViewModel>(),
                }, new FeatureAssociationConnector<Bridge>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateBridgeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BridgeViewModel.BridgeRefIdViewModel>(),
                }, new FeatureAssociationConnector<Building>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateBuildingRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BuildingViewModel.BuildingRefIdViewModel>(),
                }, new FeatureAssociationConnector<BuiltUpArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateBuiltUpAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BuiltUpAreaViewModel.BuiltUpAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<CableArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCableAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CableAreaViewModel.CableAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<CableOverhead>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCableOverheadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CableOverheadViewModel.CableOverheadRefIdViewModel>(),
                }, new FeatureAssociationConnector<CableSubmarine>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCableSubmarineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CableSubmarineViewModel.CableSubmarineRefIdViewModel>(),
                }, new FeatureAssociationConnector<Canal>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCanalRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CanalViewModel.CanalRefIdViewModel>(),
                }, new FeatureAssociationConnector<CardinalBeacon>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCardinalBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CardinalBeaconViewModel.CardinalBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<CardinalBuoy>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCardinalBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CardinalBuoyViewModel.CardinalBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<CargoTranshipmentArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCargoTranshipmentAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CargoTranshipmentAreaViewModel.CargoTranshipmentAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<Causeway>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCausewayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CausewayViewModel.CausewayRefIdViewModel>(),
                }, new FeatureAssociationConnector<CautionArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCautionAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CautionAreaViewModel.CautionAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<Checkpoint>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCheckpointRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CheckpointViewModel.CheckpointRefIdViewModel>(),
                }, new FeatureAssociationConnector<CoastGuardStation>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCoastGuardStationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CoastGuardStationViewModel.CoastGuardStationRefIdViewModel>(),
                }, new FeatureAssociationConnector<Coastline>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCoastlineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CoastlineViewModel.CoastlineRefIdViewModel>(),
                }, new FeatureAssociationConnector<CollisionRegulationsLimit>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCollisionRegulationsLimitRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CollisionRegulationsLimitViewModel.CollisionRegulationsLimitRefIdViewModel>(),
                }, new FeatureAssociationConnector<ContiguousZone>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateContiguousZoneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ContiguousZoneViewModel.ContiguousZoneRefIdViewModel>(),
                }, new FeatureAssociationConnector<ContinentalShelfArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateContinentalShelfAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ContinentalShelfAreaViewModel.ContinentalShelfAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<Conveyor>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateConveyorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ConveyorViewModel.ConveyorRefIdViewModel>(),
                }, new FeatureAssociationConnector<Crane>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCraneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CraneViewModel.CraneRefIdViewModel>(),
                }, new FeatureAssociationConnector<CurrentNonGravitational>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCurrentNonGravitationalRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CurrentNonGravitationalViewModel.CurrentNonGravitationalRefIdViewModel>(),
                }, new FeatureAssociationConnector<CustomZone>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateCustomZoneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CustomZoneViewModel.CustomZoneRefIdViewModel>(),
                }, new FeatureAssociationConnector<Dam>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDamRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DamViewModel.DamRefIdViewModel>(),
                }, new FeatureAssociationConnector<Daymark>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDaymarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DaymarkViewModel.DaymarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<DeepWaterRoute>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDeepWaterRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRouteViewModel.DeepWaterRouteRefIdViewModel>(),
                }, new FeatureAssociationConnector<DeepWaterRouteCentreline>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDeepWaterRouteCentrelineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRouteCentrelineViewModel.DeepWaterRouteCentrelineRefIdViewModel>(),
                }, new FeatureAssociationConnector<DeepWaterRoutePart>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDeepWaterRoutePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRoutePartViewModel.DeepWaterRoutePartRefIdViewModel>(),
                }, new FeatureAssociationConnector<DepthArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDepthAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DepthAreaViewModel.DepthAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<DepthContour>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDepthContourRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DepthContourViewModel.DepthContourRefIdViewModel>(),
                }, new FeatureAssociationConnector<DepthNoBottomFound>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDepthNoBottomFoundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DepthNoBottomFoundViewModel.DepthNoBottomFoundRefIdViewModel>(),
                }, new FeatureAssociationConnector<DiscolouredWater>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDiscolouredWaterRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DiscolouredWaterViewModel.DiscolouredWaterRefIdViewModel>(),
                }, new FeatureAssociationConnector<DistanceMark>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDistanceMarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DistanceMarkViewModel.DistanceMarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<DockArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDockAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DockAreaViewModel.DockAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<Dolphin>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDolphinRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DolphinViewModel.DolphinRefIdViewModel>(),
                }, new FeatureAssociationConnector<DredgedArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDredgedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DredgedAreaViewModel.DredgedAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<DryDock>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDryDockRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DryDockViewModel.DryDockRefIdViewModel>(),
                }, new FeatureAssociationConnector<DumpingGround>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDumpingGroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DumpingGroundViewModel.DumpingGroundRefIdViewModel>(),
                }, new FeatureAssociationConnector<Dyke>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateDykeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DykeViewModel.DykeRefIdViewModel>(),
                }, new FeatureAssociationConnector<EmergencyWreckMarkingBuoy>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateEmergencyWreckMarkingBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<EmergencyWreckMarkingBuoyViewModel.EmergencyWreckMarkingBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<ExclusiveEconomicZone>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateExclusiveEconomicZoneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ExclusiveEconomicZoneViewModel.ExclusiveEconomicZoneRefIdViewModel>(),
                }, new FeatureAssociationConnector<Fairway>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateFairwayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FairwayViewModel.FairwayRefIdViewModel>(),
                }, new FeatureAssociationConnector<FairwaySystem>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateFairwaySystemRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FairwaySystemViewModel.FairwaySystemRefIdViewModel>(),
                }, new FeatureAssociationConnector<FenceWall>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateFenceWallRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FenceWallViewModel.FenceWallRefIdViewModel>(),
                }, new FeatureAssociationConnector<FerryRoute>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateFerryRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FerryRouteViewModel.FerryRouteRefIdViewModel>(),
                }, new FeatureAssociationConnector<FisheryZone>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateFisheryZoneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FisheryZoneViewModel.FisheryZoneRefIdViewModel>(),
                }, new FeatureAssociationConnector<FishingFacility>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateFishingFacilityRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FishingFacilityViewModel.FishingFacilityRefIdViewModel>(),
                }, new FeatureAssociationConnector<FishingGround>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateFishingGroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FishingGroundViewModel.FishingGroundRefIdViewModel>(),
                }, new FeatureAssociationConnector<FloatingDock>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateFloatingDockRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FloatingDockViewModel.FloatingDockRefIdViewModel>(),
                }, new FeatureAssociationConnector<FogSignal>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateFogSignalRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FogSignalViewModel.FogSignalRefIdViewModel>(),
                }, new FeatureAssociationConnector<FortifiedStructure>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateFortifiedStructureRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FortifiedStructureViewModel.FortifiedStructureRefIdViewModel>(),
                }, new FeatureAssociationConnector<FoulGround>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateFoulGroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FoulGroundViewModel.FoulGroundRefIdViewModel>(),
                }, new FeatureAssociationConnector<FreePortArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateFreePortAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FreePortAreaViewModel.FreePortAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<Gate>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateGateRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<GateViewModel.GateRefIdViewModel>(),
                }, new FeatureAssociationConnector<Gridiron>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateGridironRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<GridironViewModel.GridironRefIdViewModel>(),
                }, new FeatureAssociationConnector<HarbourAreaAdministrative>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateHarbourAreaAdministrativeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HarbourAreaAdministrativeViewModel.HarbourAreaAdministrativeRefIdViewModel>(),
                }, new FeatureAssociationConnector<HarbourFacility>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateHarbourFacilityRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HarbourFacilityViewModel.HarbourFacilityRefIdViewModel>(),
                }, new FeatureAssociationConnector<Helipad>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateHelipadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HelipadViewModel.HelipadRefIdViewModel>(),
                }, new FeatureAssociationConnector<Hulk>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateHulkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HulkViewModel.HulkRefIdViewModel>(),
                }, new FeatureAssociationConnector<IceArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateIceAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IceAreaViewModel.IceAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<InformationArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateInformationAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<InformationAreaViewModel.InformationAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<InshoreTrafficZone>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateInshoreTrafficZoneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<InshoreTrafficZoneViewModel.InshoreTrafficZoneRefIdViewModel>(),
                }, new FeatureAssociationConnector<InstallationBuoy>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateInstallationBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<InstallationBuoyViewModel.InstallationBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<IslandGroup>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateIslandGroupRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IslandGroupViewModel.IslandGroupRefIdViewModel>(),
                }, new FeatureAssociationConnector<IsolatedDangerBeacon>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateIsolatedDangerBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IsolatedDangerBeaconViewModel.IsolatedDangerBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<IsolatedDangerBuoy>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateIsolatedDangerBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IsolatedDangerBuoyViewModel.IsolatedDangerBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<Lake>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLakeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LakeViewModel.LakeRefIdViewModel>(),
                }, new FeatureAssociationConnector<LandArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLandAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandAreaViewModel.LandAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<LandElevation>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLandElevationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandElevationViewModel.LandElevationRefIdViewModel>(),
                }, new FeatureAssociationConnector<Landmark>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLandmarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandmarkViewModel.LandmarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<LandRegion>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLandRegionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandRegionViewModel.LandRegionRefIdViewModel>(),
                }, new FeatureAssociationConnector<LateralBeacon>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLateralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LateralBeaconViewModel.LateralBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<LateralBuoy>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLateralBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LateralBuoyViewModel.LateralBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightAirObstruction>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLightAirObstructionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightAirObstructionViewModel.LightAirObstructionRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightAllAround>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLightAllAroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightAllAroundViewModel.LightAllAroundRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightFloat>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLightFloatRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightFloatViewModel.LightFloatRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightFogDetector>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLightFogDetectorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightFogDetectorViewModel.LightFogDetectorRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightSectored>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLightSectoredRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightSectoredViewModel.LightSectoredRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightVessel>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLightVesselRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightVesselViewModel.LightVesselRefIdViewModel>(),
                }, new FeatureAssociationConnector<LocalDirectionOfBuoyage>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLocalDirectionOfBuoyageRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LocalDirectionOfBuoyageViewModel.LocalDirectionOfBuoyageRefIdViewModel>(),
                }, new FeatureAssociationConnector<LocalMagneticAnomaly>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLocalMagneticAnomalyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LocalMagneticAnomalyViewModel.LocalMagneticAnomalyRefIdViewModel>(),
                }, new FeatureAssociationConnector<LockBasin>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLockBasinRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LockBasinViewModel.LockBasinRefIdViewModel>(),
                }, new FeatureAssociationConnector<LogPond>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateLogPondRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LogPondViewModel.LogPondRefIdViewModel>(),
                }, new FeatureAssociationConnector<MagneticVariation>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateMagneticVariationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MagneticVariationViewModel.MagneticVariationRefIdViewModel>(),
                }, new FeatureAssociationConnector<MarineFarmCulture>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateMarineFarmCultureRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MarineFarmCultureViewModel.MarineFarmCultureRefIdViewModel>(),
                }, new FeatureAssociationConnector<MarinePollutionRegulationsArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateMarinePollutionRegulationsAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MarinePollutionRegulationsAreaViewModel.MarinePollutionRegulationsAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<MilitaryPracticeArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateMilitaryPracticeAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MilitaryPracticeAreaViewModel.MilitaryPracticeAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<MooringArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateMooringAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MooringAreaViewModel.MooringAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<MooringBuoy>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateMooringBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MooringBuoyViewModel.MooringBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<MooringTrot>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateMooringTrotRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MooringTrotViewModel.MooringTrotRefIdViewModel>(),
                }, new FeatureAssociationConnector<NavigationalSystemOfMarks>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateNavigationalSystemOfMarksRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<NavigationalSystemOfMarksViewModel.NavigationalSystemOfMarksRefIdViewModel>(),
                }, new FeatureAssociationConnector<NavigationLine>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateNavigationLineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<NavigationLineViewModel.NavigationLineRefIdViewModel>(),
                }, new FeatureAssociationConnector<Obstruction>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateObstructionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ObstructionViewModel.ObstructionRefIdViewModel>(),
                }, new FeatureAssociationConnector<OffshorePlatform>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateOffshorePlatformRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<OffshorePlatformViewModel.OffshorePlatformRefIdViewModel>(),
                }, new FeatureAssociationConnector<OffshoreProductionArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateOffshoreProductionAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<OffshoreProductionAreaViewModel.OffshoreProductionAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<OilBarrier>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateOilBarrierRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<OilBarrierViewModel.OilBarrierRefIdViewModel>(),
                }, new FeatureAssociationConnector<PhysicalAISAidToNavigation>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdatePhysicalAISAidToNavigationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PhysicalAISAidToNavigationViewModel.PhysicalAISAidToNavigationRefIdViewModel>(),
                }, new FeatureAssociationConnector<Pile>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdatePileRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PileViewModel.PileRefIdViewModel>(),
                }, new FeatureAssociationConnector<PilotageDistrict>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdatePilotageDistrictRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PilotageDistrictViewModel.PilotageDistrictRefIdViewModel>(),
                }, new FeatureAssociationConnector<PilotBoardingPlace>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdatePilotBoardingPlaceRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PilotBoardingPlaceViewModel.PilotBoardingPlaceRefIdViewModel>(),
                }, new FeatureAssociationConnector<PipelineOverhead>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdatePipelineOverheadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PipelineOverheadViewModel.PipelineOverheadRefIdViewModel>(),
                }, new FeatureAssociationConnector<PipelineSubmarineOnLand>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdatePipelineSubmarineOnLandRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PipelineSubmarineOnLandViewModel.PipelineSubmarineOnLandRefIdViewModel>(),
                }, new FeatureAssociationConnector<Pontoon>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdatePontoonRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PontoonViewModel.PontoonRefIdViewModel>(),
                }, new FeatureAssociationConnector<PrecautionaryArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdatePrecautionaryAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PrecautionaryAreaViewModel.PrecautionaryAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<ProductionStorageArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateProductionStorageAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ProductionStorageAreaViewModel.ProductionStorageAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<PylonBridgeSupport>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdatePylonBridgeSupportRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PylonBridgeSupportViewModel.PylonBridgeSupportRefIdViewModel>(),
                }, new FeatureAssociationConnector<QualityOfBathymetricData>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateQualityOfBathymetricDataRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<QualityOfBathymetricDataViewModel.QualityOfBathymetricDataRefIdViewModel>(),
                }, new FeatureAssociationConnector<QualityOfNonBathymetricData>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateQualityOfNonBathymetricDataRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<QualityOfNonBathymetricDataViewModel.QualityOfNonBathymetricDataRefIdViewModel>(),
                }, new FeatureAssociationConnector<QualityOfSurvey>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateQualityOfSurveyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<QualityOfSurveyViewModel.QualityOfSurveyRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadarLine>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRadarLineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarLineViewModel.RadarLineRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadarRange>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRadarRangeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarRangeViewModel.RadarRangeRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadarReflector>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRadarReflectorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarReflectorViewModel.RadarReflectorRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadarStation>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRadarStationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarStationViewModel.RadarStationRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadarTransponderBeacon>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRadarTransponderBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarTransponderBeaconViewModel.RadarTransponderBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadioCallingInPoint>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRadioCallingInPointRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadioCallingInPointViewModel.RadioCallingInPointRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadioStation>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRadioStationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadioStationViewModel.RadioStationRefIdViewModel>(),
                }, new FeatureAssociationConnector<Railway>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRailwayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RailwayViewModel.RailwayRefIdViewModel>(),
                }, new FeatureAssociationConnector<RangeSystem>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRangeSystemRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RangeSystemViewModel.RangeSystemRefIdViewModel>(),
                }, new FeatureAssociationConnector<Rapids>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRapidsRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RapidsViewModel.RapidsRefIdViewModel>(),
                }, new FeatureAssociationConnector<RecommendedRouteCentreline>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRecommendedRouteCentrelineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RecommendedRouteCentrelineViewModel.RecommendedRouteCentrelineRefIdViewModel>(),
                }, new FeatureAssociationConnector<RecommendedTrack>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRecommendedTrackRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RecommendedTrackViewModel.RecommendedTrackRefIdViewModel>(),
                }, new FeatureAssociationConnector<RecommendedTrafficLanePart>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRecommendedTrafficLanePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RecommendedTrafficLanePartViewModel.RecommendedTrafficLanePartRefIdViewModel>(),
                }, new FeatureAssociationConnector<RescueStation>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRescueStationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RescueStationViewModel.RescueStationRefIdViewModel>(),
                }, new FeatureAssociationConnector<RestrictedArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRestrictedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RestrictedAreaViewModel.RestrictedAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<Retroreflector>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRetroreflectorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RetroreflectorViewModel.RetroreflectorRefIdViewModel>(),
                }, new FeatureAssociationConnector<River>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRiverRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RiverViewModel.RiverRefIdViewModel>(),
                }, new FeatureAssociationConnector<Road>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRoadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RoadViewModel.RoadRefIdViewModel>(),
                }, new FeatureAssociationConnector<Runway>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateRunwayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RunwayViewModel.RunwayRefIdViewModel>(),
                }, new FeatureAssociationConnector<SafeWaterBeacon>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSafeWaterBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SafeWaterBeaconViewModel.SafeWaterBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<SafeWaterBuoy>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSafeWaterBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SafeWaterBuoyViewModel.SafeWaterBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<Sandwave>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSandwaveRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SandwaveViewModel.SandwaveRefIdViewModel>(),
                }, new FeatureAssociationConnector<SeaAreaNamedWaterArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSeaAreaNamedWaterAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeaAreaNamedWaterAreaViewModel.SeaAreaNamedWaterAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<SeabedArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSeabedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeabedAreaViewModel.SeabedAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<Seagrass>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSeagrassRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeagrassViewModel.SeagrassRefIdViewModel>(),
                }, new FeatureAssociationConnector<SeaplaneLandingArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSeaplaneLandingAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeaplaneLandingAreaViewModel.SeaplaneLandingAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<SeparationZoneOrLine>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSeparationZoneOrLineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeparationZoneOrLineViewModel.SeparationZoneOrLineRefIdViewModel>(),
                }, new FeatureAssociationConnector<ShorelineConstruction>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateShorelineConstructionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ShorelineConstructionViewModel.ShorelineConstructionRefIdViewModel>(),
                }, new FeatureAssociationConnector<SignalStationTraffic>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSignalStationTrafficRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SignalStationTrafficViewModel.SignalStationTrafficRefIdViewModel>(),
                }, new FeatureAssociationConnector<SignalStationWarning>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSignalStationWarningRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SignalStationWarningViewModel.SignalStationWarningRefIdViewModel>(),
                }, new FeatureAssociationConnector<SiloTank>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSiloTankRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SiloTankViewModel.SiloTankRefIdViewModel>(),
                }, new FeatureAssociationConnector<SlopeTopline>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSlopeToplineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SlopeToplineViewModel.SlopeToplineRefIdViewModel>(),
                }, new FeatureAssociationConnector<SlopingGround>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSlopingGroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SlopingGroundViewModel.SlopingGroundRefIdViewModel>(),
                }, new FeatureAssociationConnector<SmallCraftFacility>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSmallCraftFacilityRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SmallCraftFacilityViewModel.SmallCraftFacilityRefIdViewModel>(),
                }, new FeatureAssociationConnector<Sounding>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSoundingRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SoundingViewModel.SoundingRefIdViewModel>(),
                }, new FeatureAssociationConnector<SoundingDatum>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSoundingDatumRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SoundingDatumViewModel.SoundingDatumRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpanFixed>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSpanFixedRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpanFixedViewModel.SpanFixedRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpanOpening>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSpanOpeningRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpanOpeningViewModel.SpanOpeningRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpecialPurposeGeneralBeacon>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSpecialPurposeGeneralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpecialPurposeGeneralBeaconViewModel.SpecialPurposeGeneralBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpecialPurposeGeneralBuoy>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSpecialPurposeGeneralBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpecialPurposeGeneralBuoyViewModel.SpecialPurposeGeneralBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<Spring>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSpringRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpringViewModel.SpringRefIdViewModel>(),
                }, new FeatureAssociationConnector<StraightTerritorialSeaBaseline>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateStraightTerritorialSeaBaselineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<StraightTerritorialSeaBaselineViewModel.StraightTerritorialSeaBaselineRefIdViewModel>(),
                }, new FeatureAssociationConnector<StructureOverNavigableWater>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateStructureOverNavigableWaterRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<StructureOverNavigableWaterViewModel.StructureOverNavigableWaterRefIdViewModel>(),
                }, new FeatureAssociationConnector<SubmarinePipelineArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSubmarinePipelineAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SubmarinePipelineAreaViewModel.SubmarinePipelineAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<SubmarineTransitLane>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSubmarineTransitLaneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SubmarineTransitLaneViewModel.SubmarineTransitLaneRefIdViewModel>(),
                }, new FeatureAssociationConnector<SweptArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateSweptAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SweptAreaViewModel.SweptAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<TerritorialSeaArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateTerritorialSeaAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TerritorialSeaAreaViewModel.TerritorialSeaAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<TidalStreamFloodEbb>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateTidalStreamFloodEbbRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TidalStreamFloodEbbViewModel.TidalStreamFloodEbbRefIdViewModel>(),
                }, new FeatureAssociationConnector<TidalStreamPanelData>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateTidalStreamPanelDataRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TidalStreamPanelDataViewModel.TidalStreamPanelDataRefIdViewModel>(),
                }, new FeatureAssociationConnector<Tideway>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateTidewayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TidewayViewModel.TidewayRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationScheme>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateTrafficSeparationSchemeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeViewModel.TrafficSeparationSchemeRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationSchemeBoundary>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateTrafficSeparationSchemeBoundaryRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeBoundaryViewModel.TrafficSeparationSchemeBoundaryRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationSchemeCrossing>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateTrafficSeparationSchemeCrossingRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeCrossingViewModel.TrafficSeparationSchemeCrossingRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationSchemeLanePart>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateTrafficSeparationSchemeLanePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeLanePartViewModel.TrafficSeparationSchemeLanePartRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationSchemeRoundabout>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateTrafficSeparationSchemeRoundaboutRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeRoundaboutViewModel.TrafficSeparationSchemeRoundaboutRefIdViewModel>(),
                }, new FeatureAssociationConnector<Tunnel>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateTunnelRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TunnelViewModel.TunnelRefIdViewModel>(),
                }, new FeatureAssociationConnector<TwoWayRoute>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateTwoWayRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TwoWayRouteViewModel.TwoWayRouteRefIdViewModel>(),
                }, new FeatureAssociationConnector<TwoWayRoutePart>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateTwoWayRoutePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TwoWayRoutePartViewModel.TwoWayRoutePartRefIdViewModel>(),
                }, new FeatureAssociationConnector<UnderwaterAwashRock>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateUnderwaterAwashRockRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<UnderwaterAwashRockViewModel.UnderwaterAwashRockRefIdViewModel>(),
                }, new FeatureAssociationConnector<UnsurveyedArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateUnsurveyedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<UnsurveyedAreaViewModel.UnsurveyedAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<UpdateInformation>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateUpdateInformationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<UpdateInformationViewModel.UpdateInformationRefIdViewModel>(),
                }, new FeatureAssociationConnector<Vegetation>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateVegetationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<VegetationViewModel.VegetationRefIdViewModel>(),
                }, new FeatureAssociationConnector<VerticalDatumOfData>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateVerticalDatumOfDataRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<VerticalDatumOfDataViewModel.VerticalDatumOfDataRefIdViewModel>(),
                }, new FeatureAssociationConnector<VesselTrafficServiceArea>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateVesselTrafficServiceAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<VesselTrafficServiceAreaViewModel.VesselTrafficServiceAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<VirtualAISAidToNavigation>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateVirtualAISAidToNavigationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<VirtualAISAidToNavigationViewModel.VirtualAISAidToNavigationRefIdViewModel>(),
                }, new FeatureAssociationConnector<Waterfall>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateWaterfallRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WaterfallViewModel.WaterfallRefIdViewModel>(),
                }, new FeatureAssociationConnector<WaterTurbulence>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateWaterTurbulenceRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WaterTurbulenceViewModel.WaterTurbulenceRefIdViewModel>(),
                }, new FeatureAssociationConnector<WeedKelp>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateWeedKelpRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WeedKelpViewModel.WeedKelpRefIdViewModel>(),
                }, new FeatureAssociationConnector<WindTurbine>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateWindTurbineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WindTurbineViewModel.WindTurbineRefIdViewModel>(),
                }, new FeatureAssociationConnector<Wreck>()
                {
                    roleType = roleType.association,
                    role = "theUpdate",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdateWreckRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WreckViewModel.WreckRefIdViewModel>(),
                }, new FeatureAssociationConnector<UpdateInformation>()
                {
                    roleType = roleType.association,
                    role = "theUpdatedObject",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(AdministrationArea), typeof(AirportAirfield), typeof(AnchorBerth), typeof(AnchorageArea), typeof(ArchipelagicSeaLane), typeof(ArchipelagicSeaLaneArea), typeof(ArchipelagicSeaLaneAxis), typeof(Berth), typeof(Bollard), typeof(Bridge), typeof(Building), typeof(BuiltUpArea), typeof(CableArea), typeof(CableOverhead), typeof(CableSubmarine), typeof(Canal), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(CargoTranshipmentArea), typeof(Causeway), typeof(CautionArea), typeof(Checkpoint), typeof(CoastGuardStation), typeof(Coastline), typeof(CollisionRegulationsLimit), typeof(ContiguousZone), typeof(ContinentalShelfArea), typeof(Conveyor), typeof(Crane), typeof(CurrentNonGravitational), typeof(CustomZone), typeof(Dam), typeof(Daymark), typeof(DeepWaterRoute), typeof(DeepWaterRouteCentreline), typeof(DeepWaterRoutePart), typeof(DepthArea), typeof(DepthContour), typeof(DepthNoBottomFound), typeof(DiscolouredWater), typeof(DistanceMark), typeof(DockArea), typeof(Dolphin), typeof(DredgedArea), typeof(DryDock), typeof(DumpingGround), typeof(Dyke), typeof(EmergencyWreckMarkingBuoy), typeof(ExclusiveEconomicZone), typeof(Fairway), typeof(FairwaySystem), typeof(FenceWall), typeof(FerryRoute), typeof(FisheryZone), typeof(FishingFacility), typeof(FishingGround), typeof(FloatingDock), typeof(FogSignal), typeof(FortifiedStructure), typeof(FoulGround), typeof(FreePortArea), typeof(Gate), typeof(Gridiron), typeof(HarbourAreaAdministrative), typeof(HarbourFacility), typeof(Helipad), typeof(Hulk), typeof(IceArea), typeof(InformationArea), typeof(InshoreTrafficZone), typeof(InstallationBuoy), typeof(IslandGroup), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Lake), typeof(LandArea), typeof(LandElevation), typeof(LandRegion), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightAirObstruction), typeof(LightAllAround), typeof(LightFloat), typeof(LightFogDetector), typeof(LightSectored), typeof(LightVessel), typeof(LocalDirectionOfBuoyage), typeof(LocalMagneticAnomaly), typeof(LockBasin), typeof(LogPond), typeof(MagneticVariation), typeof(MarineFarmCulture), typeof(MarinePollutionRegulationsArea), typeof(MilitaryPracticeArea), typeof(MooringArea), typeof(MooringBuoy), typeof(MooringTrot), typeof(NavigationLine), typeof(NavigationalSystemOfMarks), typeof(Obstruction), typeof(OffshorePlatform), typeof(OffshoreProductionArea), typeof(OilBarrier), typeof(PhysicalAISAidToNavigation), typeof(Pile), typeof(PilotBoardingPlace), typeof(PilotageDistrict), typeof(PipelineOverhead), typeof(PipelineSubmarineOnLand), typeof(Pontoon), typeof(PrecautionaryArea), typeof(ProductionStorageArea), typeof(PylonBridgeSupport), typeof(QualityOfBathymetricData), typeof(QualityOfNonBathymetricData), typeof(QualityOfSurvey), typeof(RadarLine), typeof(RadarRange), typeof(RadarReflector), typeof(RadarStation), typeof(RadarTransponderBeacon), typeof(RadioCallingInPoint), typeof(RadioStation), typeof(Railway), typeof(RangeSystem), typeof(Rapids), typeof(RecommendedRouteCentreline), typeof(RecommendedTrack), typeof(RecommendedTrafficLanePart), typeof(RescueStation), typeof(RestrictedArea), typeof(Retroreflector), typeof(River), typeof(Road), typeof(Runway), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(Sandwave), typeof(SeaAreaNamedWaterArea), typeof(SeabedArea), typeof(Seagrass), typeof(SeaplaneLandingArea), typeof(SeparationZoneOrLine), typeof(ShorelineConstruction), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(SiloTank), typeof(SmallCraftFacility), typeof(SlopeTopline), typeof(SlopingGround), typeof(Sounding), typeof(SoundingDatum), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(Spring), typeof(StraightTerritorialSeaBaseline), typeof(StructureOverNavigableWater), typeof(SubmarinePipelineArea), typeof(SubmarineTransitLane), typeof(SweptArea), typeof(TerritorialSeaArea), typeof(TidalStreamPanelData), typeof(TidalStreamFloodEbb), typeof(Tideway), typeof(TrafficSeparationScheme), typeof(TrafficSeparationSchemeBoundary), typeof(TrafficSeparationSchemeCrossing), typeof(TrafficSeparationSchemeLanePart), typeof(TrafficSeparationSchemeRoundabout), typeof(Tunnel), typeof(TwoWayRoute), typeof(TwoWayRoutePart), typeof(UnderwaterAwashRock), typeof(UnsurveyedArea), typeof(UpdateInformation), typeof(Vegetation), typeof(VerticalDatumOfData), typeof(VesselTrafficServiceArea), typeof(VirtualAISAidToNavigation), typeof(WaterTurbulence), typeof(Waterfall), typeof(WeedKelp), typeof(WindTurbine), typeof(Wreck)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdatedInformationViewModel.theUpdatedObjectUpdateInformationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<UpdateInformationViewModel.UpdateInformationRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(UpdateAggregationViewModel),
                () => [new FeatureAssociationConnector<UpdateInformation>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<UpdateAggregationViewModel.theCollectionUpdateInformationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<UpdateInformationViewModel.UpdateInformationRefIdViewModel>(),
                }, new FeatureAssociationConnector<UpdateInformation>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(UpdateInformation)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<UpdateAggregationViewModel.theComponentUpdateInformationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<UpdateInformationViewModel.UpdateInformationRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(TwoWayRouteAggregationViewModel),
                () => [new FeatureAssociationConnector<TwoWayRoutePart>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TwoWayRouteAggregationViewModel.theCollectionTwoWayRoutePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TwoWayRoutePartViewModel.TwoWayRoutePartRefIdViewModel>(),
                }, new FeatureAssociationConnector<TwoWayRoute>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(TwoWayRoutePart)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TwoWayRouteAggregationViewModel.theComponentTwoWayRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TwoWayRouteViewModel.TwoWayRouteRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(TrafficSeparationSchemeAggregationViewModel),
                () => [new FeatureAssociationConnector<DeepWaterRoute>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionDeepWaterRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRouteViewModel.DeepWaterRouteRefIdViewModel>(),
                }, new FeatureAssociationConnector<DeepWaterRouteCentreline>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionDeepWaterRouteCentrelineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRouteCentrelineViewModel.DeepWaterRouteCentrelineRefIdViewModel>(),
                }, new FeatureAssociationConnector<DeepWaterRoutePart>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionDeepWaterRoutePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRoutePartViewModel.DeepWaterRoutePartRefIdViewModel>(),
                }, new FeatureAssociationConnector<InshoreTrafficZone>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionInshoreTrafficZoneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<InshoreTrafficZoneViewModel.InshoreTrafficZoneRefIdViewModel>(),
                }, new FeatureAssociationConnector<PrecautionaryArea>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionPrecautionaryAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PrecautionaryAreaViewModel.PrecautionaryAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<RestrictedArea>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionRestrictedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RestrictedAreaViewModel.RestrictedAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<SeparationZoneOrLine>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionSeparationZoneOrLineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeparationZoneOrLineViewModel.SeparationZoneOrLineRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationScheme>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionTrafficSeparationSchemeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeViewModel.TrafficSeparationSchemeRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationSchemeBoundary>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionTrafficSeparationSchemeBoundaryRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeBoundaryViewModel.TrafficSeparationSchemeBoundaryRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationSchemeCrossing>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionTrafficSeparationSchemeCrossingRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeCrossingViewModel.TrafficSeparationSchemeCrossingRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationSchemeLanePart>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionTrafficSeparationSchemeLanePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeLanePartViewModel.TrafficSeparationSchemeLanePartRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationSchemeRoundabout>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionTrafficSeparationSchemeRoundaboutRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeRoundaboutViewModel.TrafficSeparationSchemeRoundaboutRefIdViewModel>(),
                }, new FeatureAssociationConnector<TwoWayRoute>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionTwoWayRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TwoWayRouteViewModel.TwoWayRouteRefIdViewModel>(),
                }, new FeatureAssociationConnector<TwoWayRoutePart>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theCollectionTwoWayRoutePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TwoWayRoutePartViewModel.TwoWayRoutePartRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationScheme>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(DeepWaterRoute), typeof(DeepWaterRouteCentreline), typeof(DeepWaterRoutePart), typeof(InshoreTrafficZone), typeof(PrecautionaryArea), typeof(RestrictedArea), typeof(SeparationZoneOrLine), typeof(TrafficSeparationScheme), typeof(TrafficSeparationSchemeBoundary), typeof(TrafficSeparationSchemeCrossing), typeof(TrafficSeparationSchemeLanePart), typeof(TrafficSeparationSchemeRoundabout), typeof(TwoWayRoute), typeof(TwoWayRoutePart)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TrafficSeparationSchemeAggregationViewModel.theComponentTrafficSeparationSchemeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeViewModel.TrafficSeparationSchemeRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(TextAssociationViewModel),
                () => [new FeatureAssociationConnector<AdministrationArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextAdministrationAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<AdministrationAreaViewModel.AdministrationAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<AirportAirfield>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextAirportAirfieldRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<AirportAirfieldViewModel.AirportAirfieldRefIdViewModel>(),
                }, new FeatureAssociationConnector<AnchorageArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextAnchorageAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<AnchorageAreaViewModel.AnchorageAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<AnchorBerth>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextAnchorBerthRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<AnchorBerthViewModel.AnchorBerthRefIdViewModel>(),
                }, new FeatureAssociationConnector<ArchipelagicSeaLane>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextArchipelagicSeaLaneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneViewModel.ArchipelagicSeaLaneRefIdViewModel>(),
                }, new FeatureAssociationConnector<ArchipelagicSeaLaneArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextArchipelagicSeaLaneAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneAreaViewModel.ArchipelagicSeaLaneAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<ArchipelagicSeaLaneAxis>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextArchipelagicSeaLaneAxisRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneAxisViewModel.ArchipelagicSeaLaneAxisRefIdViewModel>(),
                }, new FeatureAssociationConnector<Berth>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextBerthRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BerthViewModel.BerthRefIdViewModel>(),
                }, new FeatureAssociationConnector<Bollard>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextBollardRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BollardViewModel.BollardRefIdViewModel>(),
                }, new FeatureAssociationConnector<Bridge>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextBridgeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BridgeViewModel.BridgeRefIdViewModel>(),
                }, new FeatureAssociationConnector<Building>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextBuildingRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BuildingViewModel.BuildingRefIdViewModel>(),
                }, new FeatureAssociationConnector<BuiltUpArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextBuiltUpAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BuiltUpAreaViewModel.BuiltUpAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<CableArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCableAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CableAreaViewModel.CableAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<CableOverhead>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCableOverheadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CableOverheadViewModel.CableOverheadRefIdViewModel>(),
                }, new FeatureAssociationConnector<CableSubmarine>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCableSubmarineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CableSubmarineViewModel.CableSubmarineRefIdViewModel>(),
                }, new FeatureAssociationConnector<Canal>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCanalRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CanalViewModel.CanalRefIdViewModel>(),
                }, new FeatureAssociationConnector<CardinalBeacon>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCardinalBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CardinalBeaconViewModel.CardinalBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<CardinalBuoy>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCardinalBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CardinalBuoyViewModel.CardinalBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<CargoTranshipmentArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCargoTranshipmentAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CargoTranshipmentAreaViewModel.CargoTranshipmentAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<Causeway>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCausewayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CausewayViewModel.CausewayRefIdViewModel>(),
                }, new FeatureAssociationConnector<Chart1Feature>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextChart1FeatureRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<Chart1FeatureViewModel.Chart1FeatureRefIdViewModel>(),
                }, new FeatureAssociationConnector<Checkpoint>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCheckpointRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CheckpointViewModel.CheckpointRefIdViewModel>(),
                }, new FeatureAssociationConnector<CoastGuardStation>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCoastGuardStationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CoastGuardStationViewModel.CoastGuardStationRefIdViewModel>(),
                }, new FeatureAssociationConnector<Coastline>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCoastlineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CoastlineViewModel.CoastlineRefIdViewModel>(),
                }, new FeatureAssociationConnector<CollisionRegulationsLimit>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCollisionRegulationsLimitRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CollisionRegulationsLimitViewModel.CollisionRegulationsLimitRefIdViewModel>(),
                }, new FeatureAssociationConnector<ContinentalShelfArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextContinentalShelfAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ContinentalShelfAreaViewModel.ContinentalShelfAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<Conveyor>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextConveyorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ConveyorViewModel.ConveyorRefIdViewModel>(),
                }, new FeatureAssociationConnector<Crane>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCraneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CraneViewModel.CraneRefIdViewModel>(),
                }, new FeatureAssociationConnector<CurrentNonGravitational>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextCurrentNonGravitationalRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CurrentNonGravitationalViewModel.CurrentNonGravitationalRefIdViewModel>(),
                }, new FeatureAssociationConnector<Dam>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextDamRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DamViewModel.DamRefIdViewModel>(),
                }, new FeatureAssociationConnector<Daymark>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextDaymarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DaymarkViewModel.DaymarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<DeepWaterRoute>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextDeepWaterRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRouteViewModel.DeepWaterRouteRefIdViewModel>(),
                }, new FeatureAssociationConnector<DeepWaterRouteCentreline>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextDeepWaterRouteCentrelineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRouteCentrelineViewModel.DeepWaterRouteCentrelineRefIdViewModel>(),
                }, new FeatureAssociationConnector<DeepWaterRoutePart>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextDeepWaterRoutePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRoutePartViewModel.DeepWaterRoutePartRefIdViewModel>(),
                }, new FeatureAssociationConnector<DistanceMark>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextDistanceMarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DistanceMarkViewModel.DistanceMarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<DockArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextDockAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DockAreaViewModel.DockAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<Dolphin>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextDolphinRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DolphinViewModel.DolphinRefIdViewModel>(),
                }, new FeatureAssociationConnector<DredgedArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextDredgedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DredgedAreaViewModel.DredgedAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<DryDock>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextDryDockRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DryDockViewModel.DryDockRefIdViewModel>(),
                }, new FeatureAssociationConnector<DumpingGround>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextDumpingGroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DumpingGroundViewModel.DumpingGroundRefIdViewModel>(),
                }, new FeatureAssociationConnector<Dyke>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextDykeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DykeViewModel.DykeRefIdViewModel>(),
                }, new FeatureAssociationConnector<EmergencyWreckMarkingBuoy>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextEmergencyWreckMarkingBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<EmergencyWreckMarkingBuoyViewModel.EmergencyWreckMarkingBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<Fairway>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextFairwayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FairwayViewModel.FairwayRefIdViewModel>(),
                }, new FeatureAssociationConnector<FairwaySystem>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextFairwaySystemRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FairwaySystemViewModel.FairwaySystemRefIdViewModel>(),
                }, new FeatureAssociationConnector<FenceWall>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextFenceWallRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FenceWallViewModel.FenceWallRefIdViewModel>(),
                }, new FeatureAssociationConnector<FerryRoute>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextFerryRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FerryRouteViewModel.FerryRouteRefIdViewModel>(),
                }, new FeatureAssociationConnector<FisheryZone>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextFisheryZoneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FisheryZoneViewModel.FisheryZoneRefIdViewModel>(),
                }, new FeatureAssociationConnector<FishingFacility>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextFishingFacilityRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FishingFacilityViewModel.FishingFacilityRefIdViewModel>(),
                }, new FeatureAssociationConnector<FishingGround>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextFishingGroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FishingGroundViewModel.FishingGroundRefIdViewModel>(),
                }, new FeatureAssociationConnector<FloatingDock>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextFloatingDockRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FloatingDockViewModel.FloatingDockRefIdViewModel>(),
                }, new FeatureAssociationConnector<FogSignal>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextFogSignalRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FogSignalViewModel.FogSignalRefIdViewModel>(),
                }, new FeatureAssociationConnector<FortifiedStructure>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextFortifiedStructureRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FortifiedStructureViewModel.FortifiedStructureRefIdViewModel>(),
                }, new FeatureAssociationConnector<FoulGround>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextFoulGroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FoulGroundViewModel.FoulGroundRefIdViewModel>(),
                }, new FeatureAssociationConnector<FreePortArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextFreePortAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FreePortAreaViewModel.FreePortAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<Gate>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextGateRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<GateViewModel.GateRefIdViewModel>(),
                }, new FeatureAssociationConnector<Gridiron>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextGridironRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<GridironViewModel.GridironRefIdViewModel>(),
                }, new FeatureAssociationConnector<HarbourAreaAdministrative>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextHarbourAreaAdministrativeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HarbourAreaAdministrativeViewModel.HarbourAreaAdministrativeRefIdViewModel>(),
                }, new FeatureAssociationConnector<HarbourFacility>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextHarbourFacilityRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HarbourFacilityViewModel.HarbourFacilityRefIdViewModel>(),
                }, new FeatureAssociationConnector<Helipad>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextHelipadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HelipadViewModel.HelipadRefIdViewModel>(),
                }, new FeatureAssociationConnector<Hulk>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextHulkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HulkViewModel.HulkRefIdViewModel>(),
                }, new FeatureAssociationConnector<IceArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextIceAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IceAreaViewModel.IceAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<InformationArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextInformationAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<InformationAreaViewModel.InformationAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<InstallationBuoy>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextInstallationBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<InstallationBuoyViewModel.InstallationBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<IslandGroup>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextIslandGroupRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IslandGroupViewModel.IslandGroupRefIdViewModel>(),
                }, new FeatureAssociationConnector<IsolatedDangerBeacon>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextIsolatedDangerBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IsolatedDangerBeaconViewModel.IsolatedDangerBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<IsolatedDangerBuoy>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextIsolatedDangerBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IsolatedDangerBuoyViewModel.IsolatedDangerBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<Lake>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLakeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LakeViewModel.LakeRefIdViewModel>(),
                }, new FeatureAssociationConnector<LandArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLandAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandAreaViewModel.LandAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<LandElevation>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLandElevationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandElevationViewModel.LandElevationRefIdViewModel>(),
                }, new FeatureAssociationConnector<Landmark>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLandmarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandmarkViewModel.LandmarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<LandRegion>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLandRegionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandRegionViewModel.LandRegionRefIdViewModel>(),
                }, new FeatureAssociationConnector<LateralBeacon>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLateralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LateralBeaconViewModel.LateralBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<LateralBuoy>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLateralBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LateralBuoyViewModel.LateralBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightAirObstruction>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLightAirObstructionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightAirObstructionViewModel.LightAirObstructionRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightAllAround>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLightAllAroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightAllAroundViewModel.LightAllAroundRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightFloat>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLightFloatRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightFloatViewModel.LightFloatRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightFogDetector>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLightFogDetectorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightFogDetectorViewModel.LightFogDetectorRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightSectored>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLightSectoredRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightSectoredViewModel.LightSectoredRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightVessel>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLightVesselRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightVesselViewModel.LightVesselRefIdViewModel>(),
                }, new FeatureAssociationConnector<LocalMagneticAnomaly>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLocalMagneticAnomalyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LocalMagneticAnomalyViewModel.LocalMagneticAnomalyRefIdViewModel>(),
                }, new FeatureAssociationConnector<LockBasin>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLockBasinRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LockBasinViewModel.LockBasinRefIdViewModel>(),
                }, new FeatureAssociationConnector<LogPond>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextLogPondRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LogPondViewModel.LogPondRefIdViewModel>(),
                }, new FeatureAssociationConnector<MarineFarmCulture>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextMarineFarmCultureRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MarineFarmCultureViewModel.MarineFarmCultureRefIdViewModel>(),
                }, new FeatureAssociationConnector<MarinePollutionRegulationsArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextMarinePollutionRegulationsAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MarinePollutionRegulationsAreaViewModel.MarinePollutionRegulationsAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<MilitaryPracticeArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextMilitaryPracticeAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MilitaryPracticeAreaViewModel.MilitaryPracticeAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<MooringArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextMooringAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MooringAreaViewModel.MooringAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<MooringBuoy>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextMooringBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MooringBuoyViewModel.MooringBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<MooringTrot>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextMooringTrotRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MooringTrotViewModel.MooringTrotRefIdViewModel>(),
                }, new FeatureAssociationConnector<Obstruction>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextObstructionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ObstructionViewModel.ObstructionRefIdViewModel>(),
                }, new FeatureAssociationConnector<OffshorePlatform>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextOffshorePlatformRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<OffshorePlatformViewModel.OffshorePlatformRefIdViewModel>(),
                }, new FeatureAssociationConnector<OffshoreProductionArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextOffshoreProductionAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<OffshoreProductionAreaViewModel.OffshoreProductionAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<OilBarrier>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextOilBarrierRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<OilBarrierViewModel.OilBarrierRefIdViewModel>(),
                }, new FeatureAssociationConnector<PhysicalAISAidToNavigation>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextPhysicalAISAidToNavigationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PhysicalAISAidToNavigationViewModel.PhysicalAISAidToNavigationRefIdViewModel>(),
                }, new FeatureAssociationConnector<Pile>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextPileRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PileViewModel.PileRefIdViewModel>(),
                }, new FeatureAssociationConnector<PilotageDistrict>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextPilotageDistrictRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PilotageDistrictViewModel.PilotageDistrictRefIdViewModel>(),
                }, new FeatureAssociationConnector<PilotBoardingPlace>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextPilotBoardingPlaceRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PilotBoardingPlaceViewModel.PilotBoardingPlaceRefIdViewModel>(),
                }, new FeatureAssociationConnector<PipelineOverhead>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextPipelineOverheadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PipelineOverheadViewModel.PipelineOverheadRefIdViewModel>(),
                }, new FeatureAssociationConnector<PipelineSubmarineOnLand>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextPipelineSubmarineOnLandRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PipelineSubmarineOnLandViewModel.PipelineSubmarineOnLandRefIdViewModel>(),
                }, new FeatureAssociationConnector<Pontoon>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextPontoonRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PontoonViewModel.PontoonRefIdViewModel>(),
                }, new FeatureAssociationConnector<PrecautionaryArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextPrecautionaryAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PrecautionaryAreaViewModel.PrecautionaryAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<ProductionStorageArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextProductionStorageAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ProductionStorageAreaViewModel.ProductionStorageAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<PylonBridgeSupport>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextPylonBridgeSupportRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PylonBridgeSupportViewModel.PylonBridgeSupportRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadarLine>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRadarLineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarLineViewModel.RadarLineRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadarRange>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRadarRangeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarRangeViewModel.RadarRangeRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadarStation>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRadarStationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarStationViewModel.RadarStationRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadarTransponderBeacon>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRadarTransponderBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarTransponderBeaconViewModel.RadarTransponderBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadioCallingInPoint>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRadioCallingInPointRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadioCallingInPointViewModel.RadioCallingInPointRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadioStation>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRadioStationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadioStationViewModel.RadioStationRefIdViewModel>(),
                }, new FeatureAssociationConnector<Railway>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRailwayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RailwayViewModel.RailwayRefIdViewModel>(),
                }, new FeatureAssociationConnector<RangeSystem>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRangeSystemRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RangeSystemViewModel.RangeSystemRefIdViewModel>(),
                }, new FeatureAssociationConnector<Rapids>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRapidsRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RapidsViewModel.RapidsRefIdViewModel>(),
                }, new FeatureAssociationConnector<RecommendedRouteCentreline>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRecommendedRouteCentrelineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RecommendedRouteCentrelineViewModel.RecommendedRouteCentrelineRefIdViewModel>(),
                }, new FeatureAssociationConnector<RecommendedTrack>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRecommendedTrackRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RecommendedTrackViewModel.RecommendedTrackRefIdViewModel>(),
                }, new FeatureAssociationConnector<RescueStation>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRescueStationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RescueStationViewModel.RescueStationRefIdViewModel>(),
                }, new FeatureAssociationConnector<RestrictedArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRestrictedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RestrictedAreaViewModel.RestrictedAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<River>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRiverRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RiverViewModel.RiverRefIdViewModel>(),
                }, new FeatureAssociationConnector<Road>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRoadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RoadViewModel.RoadRefIdViewModel>(),
                }, new FeatureAssociationConnector<Runway>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextRunwayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RunwayViewModel.RunwayRefIdViewModel>(),
                }, new FeatureAssociationConnector<SafeWaterBeacon>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSafeWaterBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SafeWaterBeaconViewModel.SafeWaterBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<SafeWaterBuoy>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSafeWaterBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SafeWaterBuoyViewModel.SafeWaterBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<SeaAreaNamedWaterArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSeaAreaNamedWaterAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeaAreaNamedWaterAreaViewModel.SeaAreaNamedWaterAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<SeabedArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSeabedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeabedAreaViewModel.SeabedAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<Seagrass>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSeagrassRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeagrassViewModel.SeagrassRefIdViewModel>(),
                }, new FeatureAssociationConnector<SeaplaneLandingArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSeaplaneLandingAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SeaplaneLandingAreaViewModel.SeaplaneLandingAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<ShorelineConstruction>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextShorelineConstructionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ShorelineConstructionViewModel.ShorelineConstructionRefIdViewModel>(),
                }, new FeatureAssociationConnector<SignalStationTraffic>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSignalStationTrafficRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SignalStationTrafficViewModel.SignalStationTrafficRefIdViewModel>(),
                }, new FeatureAssociationConnector<SignalStationWarning>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSignalStationWarningRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SignalStationWarningViewModel.SignalStationWarningRefIdViewModel>(),
                }, new FeatureAssociationConnector<SiloTank>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSiloTankRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SiloTankViewModel.SiloTankRefIdViewModel>(),
                }, new FeatureAssociationConnector<SlopeTopline>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSlopeToplineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SlopeToplineViewModel.SlopeToplineRefIdViewModel>(),
                }, new FeatureAssociationConnector<SlopingGround>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSlopingGroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SlopingGroundViewModel.SlopingGroundRefIdViewModel>(),
                }, new FeatureAssociationConnector<SmallCraftFacility>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSmallCraftFacilityRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SmallCraftFacilityViewModel.SmallCraftFacilityRefIdViewModel>(),
                }, new FeatureAssociationConnector<Sounding>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSoundingRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SoundingViewModel.SoundingRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpanFixed>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSpanFixedRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpanFixedViewModel.SpanFixedRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpanOpening>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSpanOpeningRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpanOpeningViewModel.SpanOpeningRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpecialPurposeGeneralBeacon>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSpecialPurposeGeneralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpecialPurposeGeneralBeaconViewModel.SpecialPurposeGeneralBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpecialPurposeGeneralBuoy>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSpecialPurposeGeneralBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpecialPurposeGeneralBuoyViewModel.SpecialPurposeGeneralBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<Spring>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSpringRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpringViewModel.SpringRefIdViewModel>(),
                }, new FeatureAssociationConnector<StructureOverNavigableWater>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextStructureOverNavigableWaterRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<StructureOverNavigableWaterViewModel.StructureOverNavigableWaterRefIdViewModel>(),
                }, new FeatureAssociationConnector<SubmarinePipelineArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSubmarinePipelineAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SubmarinePipelineAreaViewModel.SubmarinePipelineAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<SubmarineTransitLane>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSubmarineTransitLaneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SubmarineTransitLaneViewModel.SubmarineTransitLaneRefIdViewModel>(),
                }, new FeatureAssociationConnector<SweptArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextSweptAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SweptAreaViewModel.SweptAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<TidalStreamFloodEbb>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextTidalStreamFloodEbbRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TidalStreamFloodEbbViewModel.TidalStreamFloodEbbRefIdViewModel>(),
                }, new FeatureAssociationConnector<TidalStreamPanelData>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextTidalStreamPanelDataRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TidalStreamPanelDataViewModel.TidalStreamPanelDataRefIdViewModel>(),
                }, new FeatureAssociationConnector<Tideway>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextTidewayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TidewayViewModel.TidewayRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationScheme>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextTrafficSeparationSchemeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeViewModel.TrafficSeparationSchemeRefIdViewModel>(),
                }, new FeatureAssociationConnector<Tunnel>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextTunnelRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TunnelViewModel.TunnelRefIdViewModel>(),
                }, new FeatureAssociationConnector<TwoWayRoute>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextTwoWayRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TwoWayRouteViewModel.TwoWayRouteRefIdViewModel>(),
                }, new FeatureAssociationConnector<UnderwaterAwashRock>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextUnderwaterAwashRockRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<UnderwaterAwashRockViewModel.UnderwaterAwashRockRefIdViewModel>(),
                }, new FeatureAssociationConnector<Vegetation>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextVegetationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<VegetationViewModel.VegetationRefIdViewModel>(),
                }, new FeatureAssociationConnector<VesselTrafficServiceArea>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextVesselTrafficServiceAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<VesselTrafficServiceAreaViewModel.VesselTrafficServiceAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<VirtualAISAidToNavigation>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextVirtualAISAidToNavigationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<VirtualAISAidToNavigationViewModel.VirtualAISAidToNavigationRefIdViewModel>(),
                }, new FeatureAssociationConnector<Waterfall>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextWaterfallRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WaterfallViewModel.WaterfallRefIdViewModel>(),
                }, new FeatureAssociationConnector<WaterTurbulence>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextWaterTurbulenceRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WaterTurbulenceViewModel.WaterTurbulenceRefIdViewModel>(),
                }, new FeatureAssociationConnector<WeedKelp>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextWeedKelpRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WeedKelpViewModel.WeedKelpRefIdViewModel>(),
                }, new FeatureAssociationConnector<WindTurbine>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextWindTurbineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WindTurbineViewModel.WindTurbineRefIdViewModel>(),
                }, new FeatureAssociationConnector<Wreck>()
                {
                    roleType = roleType.association,
                    role = "theCartographicText",
                    Lower = 0,
                    Upper = 2,
                    AssociationTypes = [typeof(TextPlacement)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<TextAssociationViewModel.theCartographicTextWreckRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WreckViewModel.WreckRefIdViewModel>(),
                }, new FeatureAssociationConnector<TextPlacement>()
                {
                    roleType = roleType.composition,
                    role = "thePositionProvider",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(AdministrationArea), typeof(AirportAirfield), typeof(AnchorBerth), typeof(AnchorageArea), typeof(ArchipelagicSeaLane), typeof(ArchipelagicSeaLaneArea), typeof(ArchipelagicSeaLaneAxis), typeof(Berth), typeof(Bollard), typeof(Bridge), typeof(Building), typeof(BuiltUpArea), typeof(CableArea), typeof(CableOverhead), typeof(CableSubmarine), typeof(Canal), typeof(CardinalBuoy), typeof(CardinalBeacon), typeof(CargoTranshipmentArea), typeof(Causeway), typeof(Chart1Feature), typeof(Checkpoint), typeof(CoastGuardStation), typeof(Coastline), typeof(CollisionRegulationsLimit), typeof(ContinentalShelfArea), typeof(Conveyor), typeof(Crane), typeof(CurrentNonGravitational), typeof(Dam), typeof(Daymark), typeof(DeepWaterRoute), typeof(DeepWaterRouteCentreline), typeof(DeepWaterRoutePart), typeof(DistanceMark), typeof(DockArea), typeof(Dolphin), typeof(DredgedArea), typeof(DryDock), typeof(DumpingGround), typeof(Dyke), typeof(EmergencyWreckMarkingBuoy), typeof(Fairway), typeof(FairwaySystem), typeof(FenceWall), typeof(FerryRoute), typeof(FisheryZone), typeof(FishingFacility), typeof(FishingGround), typeof(FloatingDock), typeof(FogSignal), typeof(FortifiedStructure), typeof(FoulGround), typeof(FreePortArea), typeof(Gate), typeof(Gridiron), typeof(HarbourAreaAdministrative), typeof(HarbourFacility), typeof(Helipad), typeof(Hulk), typeof(IceArea), typeof(InformationArea), typeof(InstallationBuoy), typeof(IslandGroup), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Lake), typeof(LandArea), typeof(LandElevation), typeof(LandRegion), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightAirObstruction), typeof(LightAllAround), typeof(LightFloat), typeof(LightFogDetector), typeof(LightSectored), typeof(LightVessel), typeof(LocalMagneticAnomaly), typeof(LockBasin), typeof(LogPond), typeof(MarineFarmCulture), typeof(MarinePollutionRegulationsArea), typeof(MilitaryPracticeArea), typeof(MooringArea), typeof(MooringBuoy), typeof(MooringTrot), typeof(Obstruction), typeof(OffshorePlatform), typeof(OffshoreProductionArea), typeof(OilBarrier), typeof(PhysicalAISAidToNavigation), typeof(Pile), typeof(PilotBoardingPlace), typeof(PilotageDistrict), typeof(PipelineOverhead), typeof(PipelineSubmarineOnLand), typeof(Pontoon), typeof(PrecautionaryArea), typeof(ProductionStorageArea), typeof(PylonBridgeSupport), typeof(RadarLine), typeof(RadarRange), typeof(RadarStation), typeof(RadarTransponderBeacon), typeof(RadioCallingInPoint), typeof(RadioStation), typeof(Railway), typeof(RangeSystem), typeof(Rapids), typeof(RecommendedRouteCentreline), typeof(RecommendedTrack), typeof(RescueStation), typeof(RestrictedArea), typeof(River), typeof(Road), typeof(Runway), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SeaAreaNamedWaterArea), typeof(SeabedArea), typeof(Seagrass), typeof(SeaplaneLandingArea), typeof(ShorelineConstruction), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(SiloTank), typeof(SlopeTopline), typeof(SlopingGround), typeof(SmallCraftFacility), typeof(Sounding), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(Spring), typeof(StructureOverNavigableWater), typeof(SubmarinePipelineArea), typeof(SubmarineTransitLane), typeof(SweptArea), typeof(TidalStreamFloodEbb), typeof(TidalStreamPanelData), typeof(Tideway), typeof(TrafficSeparationScheme), typeof(Tunnel), typeof(TwoWayRoute), typeof(UnderwaterAwashRock), typeof(Vegetation), typeof(VesselTrafficServiceArea), typeof(VirtualAISAidToNavigation), typeof(WaterTurbulence), typeof(Waterfall), typeof(WeedKelp), typeof(WindTurbine), typeof(Wreck)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<TextAssociationViewModel.thePositionProviderTextPlacementRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TextPlacementViewModel.TextPlacementRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(StructureEquipmentViewModel),
                () => [new FeatureAssociationConnector<Bridge>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentBridgeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BridgeViewModel.BridgeRefIdViewModel>(),
                }, new FeatureAssociationConnector<Building>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(Helipad), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentBuildingRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BuildingViewModel.BuildingRefIdViewModel>(),
                }, new FeatureAssociationConnector<CableOverhead>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(RadarReflector)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentCableOverheadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CableOverheadViewModel.CableOverheadRefIdViewModel>(),
                }, new FeatureAssociationConnector<CardinalBeacon>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentCardinalBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CardinalBeaconViewModel.CardinalBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<CardinalBuoy>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentCardinalBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CardinalBuoyViewModel.CardinalBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<Conveyor>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentConveyorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ConveyorViewModel.ConveyorRefIdViewModel>(),
                }, new FeatureAssociationConnector<Crane>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentCraneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CraneViewModel.CraneRefIdViewModel>(),
                }, new FeatureAssociationConnector<Daymark>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(LightSectored), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentDaymarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DaymarkViewModel.DaymarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<Dolphin>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentDolphinRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DolphinViewModel.DolphinRefIdViewModel>(),
                }, new FeatureAssociationConnector<EmergencyWreckMarkingBuoy>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentEmergencyWreckMarkingBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<EmergencyWreckMarkingBuoyViewModel.EmergencyWreckMarkingBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<FishingFacility>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentFishingFacilityRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FishingFacilityViewModel.FishingFacilityRefIdViewModel>(),
                }, new FeatureAssociationConnector<FloatingDock>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentFloatingDockRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FloatingDockViewModel.FloatingDockRefIdViewModel>(),
                }, new FeatureAssociationConnector<FortifiedStructure>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentFortifiedStructureRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FortifiedStructureViewModel.FortifiedStructureRefIdViewModel>(),
                }, new FeatureAssociationConnector<Hulk>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(Bollard)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentHulkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HulkViewModel.HulkRefIdViewModel>(),
                }, new FeatureAssociationConnector<InstallationBuoy>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentInstallationBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<InstallationBuoyViewModel.InstallationBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<IsolatedDangerBeacon>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentIsolatedDangerBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IsolatedDangerBeaconViewModel.IsolatedDangerBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<IsolatedDangerBuoy>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentIsolatedDangerBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IsolatedDangerBuoyViewModel.IsolatedDangerBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<Landmark>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(Helipad), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard), typeof(LightAirObstruction)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentLandmarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandmarkViewModel.LandmarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<LateralBeacon>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentLateralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LateralBeaconViewModel.LateralBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<LateralBuoy>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentLateralBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LateralBuoyViewModel.LateralBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightAllAround>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(FogSignal), typeof(LightAirObstruction), typeof(LightAllAround), typeof(LightFogDetector), typeof(LightSectored), typeof(RadarTransponderBeacon), typeof(Retroreflector)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentLightAllAroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightAllAroundViewModel.LightAllAroundRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightFloat>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentLightFloatRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightFloatViewModel.LightFloatRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightSectored>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(FogSignal), typeof(LightAirObstruction), typeof(LightAllAround), typeof(LightFogDetector), typeof(LightSectored), typeof(RadarTransponderBeacon), typeof(Retroreflector)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentLightSectoredRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightSectoredViewModel.LightSectoredRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightVessel>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentLightVesselRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightVesselViewModel.LightVesselRefIdViewModel>(),
                }, new FeatureAssociationConnector<MooringBuoy>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentMooringBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MooringBuoyViewModel.MooringBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<OffshorePlatform>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(Helipad), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard), typeof(LightAirObstruction)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentOffshorePlatformRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<OffshorePlatformViewModel.OffshorePlatformRefIdViewModel>(),
                }, new FeatureAssociationConnector<Pile>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentPileRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PileViewModel.PileRefIdViewModel>(),
                }, new FeatureAssociationConnector<PipelineOverhead>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(RadarReflector)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentPipelineOverheadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PipelineOverheadViewModel.PipelineOverheadRefIdViewModel>(),
                }, new FeatureAssociationConnector<Pontoon>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentPontoonRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PontoonViewModel.PontoonRefIdViewModel>(),
                }, new FeatureAssociationConnector<PylonBridgeSupport>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard), typeof(LightAirObstruction)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentPylonBridgeSupportRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PylonBridgeSupportViewModel.PylonBridgeSupportRefIdViewModel>(),
                }, new FeatureAssociationConnector<SafeWaterBeacon>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentSafeWaterBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SafeWaterBeaconViewModel.SafeWaterBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<SafeWaterBuoy>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentSafeWaterBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SafeWaterBuoyViewModel.SafeWaterBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<ShorelineConstruction>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentShorelineConstructionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ShorelineConstructionViewModel.ShorelineConstructionRefIdViewModel>(),
                }, new FeatureAssociationConnector<SiloTank>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentSiloTankRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SiloTankViewModel.SiloTankRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpanFixed>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentSpanFixedRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpanFixedViewModel.SpanFixedRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpanOpening>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentSpanOpeningRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpanOpeningViewModel.SpanOpeningRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpecialPurposeGeneralBeacon>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentSpecialPurposeGeneralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpecialPurposeGeneralBeaconViewModel.SpecialPurposeGeneralBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpecialPurposeGeneralBuoy>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentSpecialPurposeGeneralBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpecialPurposeGeneralBuoyViewModel.SpecialPurposeGeneralBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<StructureOverNavigableWater>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentStructureOverNavigableWaterRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<StructureOverNavigableWaterViewModel.StructureOverNavigableWaterRefIdViewModel>(),
                }, new FeatureAssociationConnector<WindTurbine>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentWindTurbineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WindTurbineViewModel.WindTurbineRefIdViewModel>(),
                }, new FeatureAssociationConnector<Wreck>()
                {
                    roleType = roleType.association,
                    role = "theEquipment",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<StructureEquipmentViewModel.theEquipmentWreckRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WreckViewModel.WreckRefIdViewModel>(),
                }, new FeatureAssociationConnector<Bollard>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Dolphin), typeof(FortifiedStructure), typeof(Hulk), typeof(Landmark), typeof(OffshorePlatform), typeof(Pile), typeof(PylonBridgeSupport), typeof(ShorelineConstruction)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureBollardRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BollardViewModel.BollardRefIdViewModel>(),
                }, new FeatureAssociationConnector<Daymark>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureDaymarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DaymarkViewModel.DaymarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<DistanceMark>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(Daymark)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureDistanceMarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DistanceMarkViewModel.DistanceMarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<FogSignal>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(LightAllAround), typeof(LightSectored), typeof(Daymark)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureFogSignalRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FogSignalViewModel.FogSignalRefIdViewModel>(),
                }, new FeatureAssociationConnector<Helipad>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Building), typeof(Landmark), typeof(OffshorePlatform)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureHelipadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HelipadViewModel.HelipadRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightAirObstruction>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge), typeof(Building), typeof(Crane), typeof(Conveyor), typeof(Landmark), typeof(OffshorePlatform), typeof(PylonBridgeSupport), typeof(SpanFixed), typeof(SpanOpening), typeof(WindTurbine), typeof(LightAllAround), typeof(LightSectored)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureLightAirObstructionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightAirObstructionViewModel.LightAirObstructionRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightAllAround>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(LightAllAround), typeof(LightSectored), typeof(Daymark)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureLightAllAroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightAllAroundViewModel.LightAllAroundRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightFogDetector>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(LightAllAround), typeof(LightSectored), typeof(Daymark)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureLightFogDetectorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightFogDetectorViewModel.LightFogDetectorRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightSectored>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(Conveyor), typeof(Dolphin), typeof(FishingFacility), typeof(FortifiedStructure), typeof(IsolatedDangerBeacon), typeof(Landmark), typeof(LateralBeacon), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(LightAllAround), typeof(LightSectored), typeof(Daymark)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureLightSectoredRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightSectoredViewModel.LightSectoredRefIdViewModel>(),
                }, new FeatureAssociationConnector<PhysicalAISAidToNavigation>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(Daymark)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructurePhysicalAISAidToNavigationRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PhysicalAISAidToNavigationViewModel.PhysicalAISAidToNavigationRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadarReflector>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(CableOverhead), typeof(PipelineOverhead)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureRadarReflectorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarReflectorViewModel.RadarReflectorRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadarTransponderBeacon>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(LightAllAround), typeof(LightSectored), typeof(Daymark)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureRadarTransponderBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarTransponderBeaconViewModel.RadarTransponderBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<Retroreflector>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(LightAllAround), typeof(LightSectored), typeof(Daymark)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureRetroreflectorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RetroreflectorViewModel.RetroreflectorRefIdViewModel>(),
                }, new FeatureAssociationConnector<SignalStationTraffic>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(Daymark)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureSignalStationTrafficRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SignalStationTrafficViewModel.SignalStationTrafficRefIdViewModel>(),
                }, new FeatureAssociationConnector<SignalStationWarning>()
                {
                    roleType = roleType.composition,
                    role = "theStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(Daymark)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<StructureEquipmentViewModel.theStructureSignalStationWarningRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SignalStationWarningViewModel.SignalStationWarningRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(RoofedStructureAggregationViewModel),
                () => [new FeatureAssociationConnector<PylonBridgeSupport>()
                {
                    roleType = roleType.aggregation,
                    role = "theRoofedStructure",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(StructureOverNavigableWater)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RoofedStructureAggregationViewModel.theRoofedStructurePylonBridgeSupportRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PylonBridgeSupportViewModel.PylonBridgeSupportRefIdViewModel>(),
                }, new FeatureAssociationConnector<StructureOverNavigableWater>()
                {
                    roleType = roleType.association,
                    role = "theSupport",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(PylonBridgeSupport)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<RoofedStructureAggregationViewModel.theSupportStructureOverNavigableWaterRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<StructureOverNavigableWaterViewModel.StructureOverNavigableWaterRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(RangeSystemAggregationViewModel),
                () => [new FeatureAssociationConnector<Building>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionBuildingRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BuildingViewModel.BuildingRefIdViewModel>(),
                }, new FeatureAssociationConnector<CardinalBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionCardinalBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CardinalBeaconViewModel.CardinalBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<Daymark>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionDaymarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DaymarkViewModel.DaymarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<Dolphin>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionDolphinRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DolphinViewModel.DolphinRefIdViewModel>(),
                }, new FeatureAssociationConnector<FortifiedStructure>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionFortifiedStructureRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FortifiedStructureViewModel.FortifiedStructureRefIdViewModel>(),
                }, new FeatureAssociationConnector<IsolatedDangerBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionIsolatedDangerBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IsolatedDangerBeaconViewModel.IsolatedDangerBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<Landmark>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionLandmarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandmarkViewModel.LandmarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<LateralBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionLateralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LateralBeaconViewModel.LateralBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightAllAround>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionLightAllAroundRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightAllAroundViewModel.LightAllAroundRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightSectored>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionLightSectoredRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightSectoredViewModel.LightSectoredRefIdViewModel>(),
                }, new FeatureAssociationConnector<NavigationLine>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionNavigationLineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<NavigationLineViewModel.NavigationLineRefIdViewModel>(),
                }, new FeatureAssociationConnector<Pile>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionPileRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PileViewModel.PileRefIdViewModel>(),
                }, new FeatureAssociationConnector<RadarTransponderBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionRadarTransponderBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RadarTransponderBeaconViewModel.RadarTransponderBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<RangeSystem>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionRangeSystemRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RangeSystemViewModel.RangeSystemRefIdViewModel>(),
                }, new FeatureAssociationConnector<RecommendedRouteCentreline>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionRecommendedRouteCentrelineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RecommendedRouteCentrelineViewModel.RecommendedRouteCentrelineRefIdViewModel>(),
                }, new FeatureAssociationConnector<RecommendedTrack>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionRecommendedTrackRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RecommendedTrackViewModel.RecommendedTrackRefIdViewModel>(),
                }, new FeatureAssociationConnector<SafeWaterBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionSafeWaterBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SafeWaterBeaconViewModel.SafeWaterBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<SiloTank>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionSiloTankRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SiloTankViewModel.SiloTankRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpecialPurposeGeneralBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(RangeSystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<RangeSystemAggregationViewModel.theCollectionSpecialPurposeGeneralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpecialPurposeGeneralBeaconViewModel.SpecialPurposeGeneralBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<RangeSystem>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(CardinalBeacon), typeof(Building), typeof(Daymark), typeof(Dolphin), typeof(FortifiedStructure), typeof(IsolatedDangerBeacon), typeof(Landmark), typeof(LateralBeacon), typeof(LightAllAround), typeof(LightSectored), typeof(NavigationLine), typeof(Pile), typeof(RadarTransponderBeacon), typeof(RangeSystem), typeof(RecommendedRouteCentreline), typeof(RecommendedTrack), typeof(SafeWaterBeacon), typeof(SiloTank), typeof(SpecialPurposeGeneralBeacon)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<RangeSystemAggregationViewModel.theComponentRangeSystemRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RangeSystemViewModel.RangeSystemRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(PilotageDistrictAssociationViewModel),
                () => [new FeatureAssociationConnector<PilotBoardingPlace>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(PilotageDistrict)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<PilotageDistrictAssociationViewModel.theCollectionPilotBoardingPlaceRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PilotBoardingPlaceViewModel.PilotBoardingPlaceRefIdViewModel>(),
                }, new FeatureAssociationConnector<PilotageDistrict>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(PilotBoardingPlace)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<PilotageDistrictAssociationViewModel.theComponentPilotageDistrictRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PilotageDistrictViewModel.PilotageDistrictRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(MooringTrotAggregationViewModel),
                () => [new FeatureAssociationConnector<Berth>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(MooringTrot)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<MooringTrotAggregationViewModel.theCollectionBerthRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BerthViewModel.BerthRefIdViewModel>(),
                }, new FeatureAssociationConnector<CableSubmarine>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(MooringTrot)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<MooringTrotAggregationViewModel.theCollectionCableSubmarineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CableSubmarineViewModel.CableSubmarineRefIdViewModel>(),
                }, new FeatureAssociationConnector<MooringBuoy>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(MooringTrot)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<MooringTrotAggregationViewModel.theCollectionMooringBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MooringBuoyViewModel.MooringBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<Obstruction>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(MooringTrot)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<MooringTrotAggregationViewModel.theCollectionObstructionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ObstructionViewModel.ObstructionRefIdViewModel>(),
                }, new FeatureAssociationConnector<MooringTrot>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Berth), typeof(CableSubmarine), typeof(MooringBuoy), typeof(Obstruction)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<MooringTrotAggregationViewModel.theComponentMooringTrotRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MooringTrotViewModel.MooringTrotRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(IslandAggregationViewModel),
                () => [new FeatureAssociationConnector<IslandGroup>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(IslandGroup)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<IslandAggregationViewModel.theCollectionIslandGroupRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IslandGroupViewModel.IslandGroupRefIdViewModel>(),
                }, new FeatureAssociationConnector<LandArea>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(IslandGroup)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<IslandAggregationViewModel.theCollectionLandAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandAreaViewModel.LandAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<IslandGroup>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(LandArea), typeof(IslandGroup)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<IslandAggregationViewModel.theComponentIslandGroupRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IslandGroupViewModel.IslandGroupRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(FairwayAuxiliaryViewModel),
                () => [new FeatureAssociationConnector<Fairway>()
                {
                    roleType = roleType.association,
                    role = "theAuxiliaryFeature",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(CautionArea), typeof(Daymark), typeof(DredgedArea), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(Landmark), typeof(Pile), typeof(RangeSystem), typeof(RecommendedRouteCentreline), typeof(RecommendedTrack), typeof(RestrictedArea), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(SweptArea)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<FairwayAuxiliaryViewModel.theAuxiliaryFeatureFairwayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FairwayViewModel.FairwayRefIdViewModel>(),
                }, new FeatureAssociationConnector<CardinalBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureCardinalBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CardinalBeaconViewModel.CardinalBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<CardinalBuoy>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureCardinalBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CardinalBuoyViewModel.CardinalBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<CautionArea>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureCautionAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CautionAreaViewModel.CautionAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<Daymark>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureDaymarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DaymarkViewModel.DaymarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<DredgedArea>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureDredgedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DredgedAreaViewModel.DredgedAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<IsolatedDangerBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureIsolatedDangerBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IsolatedDangerBeaconViewModel.IsolatedDangerBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<IsolatedDangerBuoy>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureIsolatedDangerBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IsolatedDangerBuoyViewModel.IsolatedDangerBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<Landmark>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureLandmarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandmarkViewModel.LandmarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<LateralBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureLateralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LateralBeaconViewModel.LateralBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<LateralBuoy>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureLateralBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LateralBuoyViewModel.LateralBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightFloat>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureLightFloatRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightFloatViewModel.LightFloatRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightVessel>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureLightVesselRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightVesselViewModel.LightVesselRefIdViewModel>(),
                }, new FeatureAssociationConnector<Pile>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeaturePileRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PileViewModel.PileRefIdViewModel>(),
                }, new FeatureAssociationConnector<RangeSystem>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureRangeSystemRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RangeSystemViewModel.RangeSystemRefIdViewModel>(),
                }, new FeatureAssociationConnector<RecommendedRouteCentreline>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureRecommendedRouteCentrelineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RecommendedRouteCentrelineViewModel.RecommendedRouteCentrelineRefIdViewModel>(),
                }, new FeatureAssociationConnector<RecommendedTrack>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureRecommendedTrackRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RecommendedTrackViewModel.RecommendedTrackRefIdViewModel>(),
                }, new FeatureAssociationConnector<RestrictedArea>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureRestrictedAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<RestrictedAreaViewModel.RestrictedAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<SafeWaterBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureSafeWaterBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SafeWaterBeaconViewModel.SafeWaterBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<SafeWaterBuoy>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureSafeWaterBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SafeWaterBuoyViewModel.SafeWaterBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpecialPurposeGeneralBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureSpecialPurposeGeneralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpecialPurposeGeneralBeaconViewModel.SpecialPurposeGeneralBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpecialPurposeGeneralBuoy>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureSpecialPurposeGeneralBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpecialPurposeGeneralBuoyViewModel.SpecialPurposeGeneralBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<SweptArea>()
                {
                    roleType = roleType.aggregation,
                    role = "thePrimaryFeature",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAuxiliaryViewModel.thePrimaryFeatureSweptAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SweptAreaViewModel.SweptAreaRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(FairwayAggregationViewModel),
                () => [new FeatureAssociationConnector<Fairway>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(FairwaySystem)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<FairwayAggregationViewModel.theCollectionFairwayRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FairwayViewModel.FairwayRefIdViewModel>(),
                }, new FeatureAssociationConnector<FairwaySystem>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(Fairway)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<FairwayAggregationViewModel.theComponentFairwaySystemRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FairwaySystemViewModel.FairwaySystemRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(DeepWaterRouteAggregationViewModel),
                () => [new FeatureAssociationConnector<DeepWaterRouteCentreline>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(DeepWaterRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<DeepWaterRouteAggregationViewModel.theCollectionDeepWaterRouteCentrelineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRouteCentrelineViewModel.DeepWaterRouteCentrelineRefIdViewModel>(),
                }, new FeatureAssociationConnector<DeepWaterRoutePart>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(DeepWaterRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<DeepWaterRouteAggregationViewModel.theCollectionDeepWaterRoutePartRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRoutePartViewModel.DeepWaterRoutePartRefIdViewModel>(),
                }, new FeatureAssociationConnector<DeepWaterRoute>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(DeepWaterRouteCentreline), typeof(DeepWaterRoutePart)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<DeepWaterRouteAggregationViewModel.theComponentDeepWaterRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRouteViewModel.DeepWaterRouteRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(CautionAreaAssociationViewModel),
                () => [new FeatureAssociationConnector<ArchipelagicSeaLane>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(CautionArea)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<CautionAreaAssociationViewModel.theCollectionArchipelagicSeaLaneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneViewModel.ArchipelagicSeaLaneRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationScheme>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(CautionArea)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<CautionAreaAssociationViewModel.theCollectionTrafficSeparationSchemeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeViewModel.TrafficSeparationSchemeRefIdViewModel>(),
                }, new FeatureAssociationConnector<CautionArea>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(TrafficSeparationScheme)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<CautionAreaAssociationViewModel.theComponentCautionAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CautionAreaViewModel.CautionAreaRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(BridgeAggregationViewModel),
                () => [new FeatureAssociationConnector<Pontoon>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<BridgeAggregationViewModel.theCollectionPontoonRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PontoonViewModel.PontoonRefIdViewModel>(),
                }, new FeatureAssociationConnector<PylonBridgeSupport>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<BridgeAggregationViewModel.theCollectionPylonBridgeSupportRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PylonBridgeSupportViewModel.PylonBridgeSupportRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpanFixed>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<BridgeAggregationViewModel.theCollectionSpanFixedRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpanFixedViewModel.SpanFixedRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpanOpening>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(Bridge)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<BridgeAggregationViewModel.theCollectionSpanOpeningRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpanOpeningViewModel.SpanOpeningRefIdViewModel>(),
                }, new FeatureAssociationConnector<Bridge>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(SpanFixed), typeof(SpanOpening), typeof(Pontoon), typeof(PylonBridgeSupport)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<BridgeAggregationViewModel.theComponentBridgeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BridgeViewModel.BridgeRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(ASLAggregationViewModel),
                () => [new FeatureAssociationConnector<ArchipelagicSeaLaneArea>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<ASLAggregationViewModel.theCollectionArchipelagicSeaLaneAreaRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneAreaViewModel.ArchipelagicSeaLaneAreaRefIdViewModel>(),
                }, new FeatureAssociationConnector<ArchipelagicSeaLaneAxis>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<ASLAggregationViewModel.theCollectionArchipelagicSeaLaneAxisRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneAxisViewModel.ArchipelagicSeaLaneAxisRefIdViewModel>(),
                }, new FeatureAssociationConnector<ArchipelagicSeaLane>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(ArchipelagicSeaLaneArea), typeof(ArchipelagicSeaLaneAxis)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<ASLAggregationViewModel.theComponentArchipelagicSeaLaneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneViewModel.ArchipelagicSeaLaneRefIdViewModel>(),
                }

                ]
            },
            {
                typeof(AidsToNavigationAssociationViewModel),
                () => [new FeatureAssociationConnector<Bridge>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionBridgeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BridgeViewModel.BridgeRefIdViewModel>(),
                }, new FeatureAssociationConnector<Building>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionBuildingRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<BuildingViewModel.BuildingRefIdViewModel>(),
                }, new FeatureAssociationConnector<CardinalBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionCardinalBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CardinalBeaconViewModel.CardinalBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<CardinalBuoy>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionCardinalBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CardinalBuoyViewModel.CardinalBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<Conveyor>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionConveyorRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ConveyorViewModel.ConveyorRefIdViewModel>(),
                }, new FeatureAssociationConnector<Crane>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionCraneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<CraneViewModel.CraneRefIdViewModel>(),
                }, new FeatureAssociationConnector<Daymark>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionDaymarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DaymarkViewModel.DaymarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<Dolphin>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionDolphinRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DolphinViewModel.DolphinRefIdViewModel>(),
                }, new FeatureAssociationConnector<EmergencyWreckMarkingBuoy>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionEmergencyWreckMarkingBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<EmergencyWreckMarkingBuoyViewModel.EmergencyWreckMarkingBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<FishingFacility>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionFishingFacilityRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FishingFacilityViewModel.FishingFacilityRefIdViewModel>(),
                }, new FeatureAssociationConnector<FloatingDock>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionFloatingDockRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FloatingDockViewModel.FloatingDockRefIdViewModel>(),
                }, new FeatureAssociationConnector<FortifiedStructure>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionFortifiedStructureRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FortifiedStructureViewModel.FortifiedStructureRefIdViewModel>(),
                }, new FeatureAssociationConnector<Hulk>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionHulkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<HulkViewModel.HulkRefIdViewModel>(),
                }, new FeatureAssociationConnector<IsolatedDangerBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionIsolatedDangerBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IsolatedDangerBeaconViewModel.IsolatedDangerBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<IsolatedDangerBuoy>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionIsolatedDangerBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<IsolatedDangerBuoyViewModel.IsolatedDangerBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<Landmark>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionLandmarkRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LandmarkViewModel.LandmarkRefIdViewModel>(),
                }, new FeatureAssociationConnector<LateralBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionLateralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LateralBeaconViewModel.LateralBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<LateralBuoy>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionLateralBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LateralBuoyViewModel.LateralBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightFloat>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionLightFloatRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightFloatViewModel.LightFloatRefIdViewModel>(),
                }, new FeatureAssociationConnector<LightVessel>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionLightVesselRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<LightVesselViewModel.LightVesselRefIdViewModel>(),
                }, new FeatureAssociationConnector<MooringBuoy>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionMooringBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<MooringBuoyViewModel.MooringBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<OffshorePlatform>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionOffshorePlatformRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<OffshorePlatformViewModel.OffshorePlatformRefIdViewModel>(),
                }, new FeatureAssociationConnector<Pile>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionPileRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PileViewModel.PileRefIdViewModel>(),
                }, new FeatureAssociationConnector<PipelineOverhead>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionPipelineOverheadRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PipelineOverheadViewModel.PipelineOverheadRefIdViewModel>(),
                }, new FeatureAssociationConnector<Pontoon>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionPontoonRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PontoonViewModel.PontoonRefIdViewModel>(),
                }, new FeatureAssociationConnector<PylonBridgeSupport>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionPylonBridgeSupportRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<PylonBridgeSupportViewModel.PylonBridgeSupportRefIdViewModel>(),
                }, new FeatureAssociationConnector<SafeWaterBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionSafeWaterBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SafeWaterBeaconViewModel.SafeWaterBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<SafeWaterBuoy>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionSafeWaterBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SafeWaterBuoyViewModel.SafeWaterBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<ShorelineConstruction>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionShorelineConstructionRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ShorelineConstructionViewModel.ShorelineConstructionRefIdViewModel>(),
                }, new FeatureAssociationConnector<SiloTank>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionSiloTankRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SiloTankViewModel.SiloTankRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpanFixed>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionSpanFixedRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpanFixedViewModel.SpanFixedRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpanOpening>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionSpanOpeningRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpanOpeningViewModel.SpanOpeningRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpecialPurposeGeneralBeacon>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionSpecialPurposeGeneralBeaconRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpecialPurposeGeneralBeaconViewModel.SpecialPurposeGeneralBeaconRefIdViewModel>(),
                }, new FeatureAssociationConnector<SpecialPurposeGeneralBuoy>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionSpecialPurposeGeneralBuoyRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<SpecialPurposeGeneralBuoyViewModel.SpecialPurposeGeneralBuoyRefIdViewModel>(),
                }, new FeatureAssociationConnector<StructureOverNavigableWater>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionStructureOverNavigableWaterRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<StructureOverNavigableWaterViewModel.StructureOverNavigableWaterRefIdViewModel>(),
                }, new FeatureAssociationConnector<WindTurbine>()
                {
                    roleType = roleType.aggregation,
                    role = "theCollection",
                    Lower = 0,
                    Upper = 1,
                    AssociationTypes = [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)],
                    CreateForeignFeatureBinding = () => new OptionalFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theCollectionWindTurbineRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<WindTurbineViewModel.WindTurbineRefIdViewModel>(),
                }, new FeatureAssociationConnector<ArchipelagicSeaLane>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Daymark), typeof(EmergencyWreckMarkingBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(Pile), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theComponentArchipelagicSeaLaneRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<ArchipelagicSeaLaneViewModel.ArchipelagicSeaLaneRefIdViewModel>(),
                }, new FeatureAssociationConnector<DeepWaterRoute>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Daymark), typeof(EmergencyWreckMarkingBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(Pile), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(Building), typeof(Crane), typeof(Dolphin), typeof(FishingFacility), typeof(FortifiedStructure), typeof(Landmark), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(SiloTank), typeof(WindTurbine)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theComponentDeepWaterRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<DeepWaterRouteViewModel.DeepWaterRouteRefIdViewModel>(),
                }, new FeatureAssociationConnector<FairwaySystem>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Daymark), typeof(EmergencyWreckMarkingBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(Pile), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(Building), typeof(Crane), typeof(Dolphin), typeof(FishingFacility), typeof(FortifiedStructure), typeof(Landmark), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(SiloTank), typeof(WindTurbine), typeof(Bridge), typeof(Conveyor), typeof(FloatingDock), typeof(Hulk), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(ShorelineConstruction), typeof(SpanFixed), typeof(SpanOpening), typeof(StructureOverNavigableWater)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theComponentFairwaySystemRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<FairwaySystemViewModel.FairwaySystemRefIdViewModel>(),
                }, new FeatureAssociationConnector<TrafficSeparationScheme>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Daymark), typeof(EmergencyWreckMarkingBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(Pile), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(Building), typeof(Crane), typeof(Dolphin), typeof(FishingFacility), typeof(FortifiedStructure), typeof(Landmark), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(SiloTank), typeof(WindTurbine), typeof(Bridge), typeof(Conveyor), typeof(FloatingDock), typeof(Hulk), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(ShorelineConstruction), typeof(SpanFixed), typeof(SpanOpening), typeof(StructureOverNavigableWater)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theComponentTrafficSeparationSchemeRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TrafficSeparationSchemeViewModel.TrafficSeparationSchemeRefIdViewModel>(),
                }, new FeatureAssociationConnector<TwoWayRoute>()
                {
                    roleType = roleType.association,
                    role = "theComponent",
                    Lower = 0,
                    Upper = default,
                    AssociationTypes = [typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Daymark), typeof(EmergencyWreckMarkingBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(Pile), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(Building), typeof(Crane), typeof(Dolphin), typeof(FishingFacility), typeof(FortifiedStructure), typeof(Landmark), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(SiloTank), typeof(WindTurbine), typeof(Bridge), typeof(Conveyor), typeof(FloatingDock), typeof(Hulk), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(ShorelineConstruction), typeof(SpanFixed), typeof(SpanOpening), typeof(StructureOverNavigableWater)],
                    CreateForeignFeatureBinding = () => new MultiFeatureBindingViewModel<AidsToNavigationAssociationViewModel.theComponentTwoWayRouteRefIdViewModel>(),
                    CreateLocalFeatureBinding = () => new SingleFeatureBindingViewModel<TwoWayRouteViewModel.TwoWayRouteRefIdViewModel>(),
                }

                ]
            },
        };
    }

    [CategoryOrder("featureName", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class featureNameViewModel : ViewModelBase
    {
        private String _language = string.Empty;
        [Category("featureName")]
        public String language
        {
            get
            {
                return _language;
            }

            set
            {
                SetValue(ref _language, value);
            }
        }

        private String _name = string.Empty;
        [Category("featureName")]
        public String name
        {
            get
            {
                return _name;
            }

            set
            {
                SetValue(ref _name, value);
            }
        }

        private nameUsage? _nameUsage = default;
        [Category("featureName")]
        public nameUsage? nameUsage
        {
            get
            {
                return _nameUsage;
            }

            set
            {
                SetValue(ref _nameUsage, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.featureName instance)
        {
            language = instance.language;
            name = instance.name;
            nameUsage = instance.nameUsage;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.featureName
            {
                language = this.language,
                name = this.name,
                nameUsage = this.nameUsage,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.featureName Model => new()
        {
            language = this._language,
            name = this._name,
            nameUsage = this._nameUsage,
        };

        public featureNameViewModel() : base()
        {
        }
    }

    [CategoryOrder("featuresDetected", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class featuresDetectedViewModel : ViewModelBase
    {
        private Boolean _leastDepthOfDetectedFeaturesMeasured;
        [Category("featuresDetected")]
        public Boolean leastDepthOfDetectedFeaturesMeasured
        {
            get
            {
                return _leastDepthOfDetectedFeaturesMeasured;
            }

            set
            {
                SetValue(ref _leastDepthOfDetectedFeaturesMeasured, value);
            }
        }

        private Boolean _significantFeaturesDetected;
        [Category("featuresDetected")]
        public Boolean significantFeaturesDetected
        {
            get
            {
                return _significantFeaturesDetected;
            }

            set
            {
                SetValue(ref _significantFeaturesDetected, value);
            }
        }

        private Decimal? _sizeOfFeaturesDetected = default;
        [Category("featuresDetected")]
        public Decimal? sizeOfFeaturesDetected
        {
            get
            {
                return _sizeOfFeaturesDetected;
            }

            set
            {
                SetValue(ref _sizeOfFeaturesDetected, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.featuresDetected instance)
        {
            leastDepthOfDetectedFeaturesMeasured = instance.leastDepthOfDetectedFeaturesMeasured;
            significantFeaturesDetected = instance.significantFeaturesDetected;
            sizeOfFeaturesDetected = instance.sizeOfFeaturesDetected;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.featuresDetected
            {
                leastDepthOfDetectedFeaturesMeasured = this.leastDepthOfDetectedFeaturesMeasured,
                significantFeaturesDetected = this.significantFeaturesDetected,
                sizeOfFeaturesDetected = this.sizeOfFeaturesDetected,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.featuresDetected Model => new()
        {
            leastDepthOfDetectedFeaturesMeasured = this._leastDepthOfDetectedFeaturesMeasured,
            significantFeaturesDetected = this._significantFeaturesDetected,
            sizeOfFeaturesDetected = this._sizeOfFeaturesDetected,
        };

        public featuresDetectedViewModel() : base()
        {
        }
    }

    [CategoryOrder("fixedDateRange", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class fixedDateRangeViewModel : ViewModelBase
    {
        private DateOnly? _dateEnd = default;
        [Category("fixedDateRange")]
        public DateOnly? dateEnd
        {
            get
            {
                return _dateEnd;
            }

            set
            {
                SetValue(ref _dateEnd, value);
            }
        }

        private DateOnly? _dateStart = default;
        [Category("fixedDateRange")]
        public DateOnly? dateStart
        {
            get
            {
                return _dateStart;
            }

            set
            {
                SetValue(ref _dateStart, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.fixedDateRange instance)
        {
            dateEnd = instance.dateEnd;
            dateStart = instance.dateStart;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.fixedDateRange
            {
                dateEnd = this.dateEnd,
                dateStart = this.dateStart,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.fixedDateRange Model => new()
        {
            dateEnd = this._dateEnd,
            dateStart = this._dateStart,
        };

        public fixedDateRangeViewModel() : base()
        {
        }
    }

    [CategoryOrder("frequencyPair", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class frequencyPairViewModel : ViewModelBase
    {
        private Int32? _frequencyShoreStationReceives = default;
        [Category("frequencyPair")]
        public Int32? frequencyShoreStationReceives
        {
            get
            {
                return _frequencyShoreStationReceives;
            }

            set
            {
                SetValue(ref _frequencyShoreStationReceives, value);
            }
        }

        private Int32 _frequencyShoreStationTransmits;
        [Category("frequencyPair")]
        public Int32 frequencyShoreStationTransmits
        {
            get
            {
                return _frequencyShoreStationTransmits;
            }

            set
            {
                SetValue(ref _frequencyShoreStationTransmits, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.frequencyPair instance)
        {
            frequencyShoreStationReceives = instance.frequencyShoreStationReceives;
            frequencyShoreStationTransmits = instance.frequencyShoreStationTransmits;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.frequencyPair
            {
                frequencyShoreStationReceives = this.frequencyShoreStationReceives,
                frequencyShoreStationTransmits = this.frequencyShoreStationTransmits,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.frequencyPair Model => new()
        {
            frequencyShoreStationReceives = this._frequencyShoreStationReceives,
            frequencyShoreStationTransmits = this._frequencyShoreStationTransmits,
        };

        public frequencyPairViewModel() : base()
        {
        }
    }

    [CategoryOrder("horizontalClearanceFixed", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class horizontalClearanceFixedViewModel : ViewModelBase
    {
        private Decimal _horizontalClearanceValue;
        [Category("horizontalClearanceFixed")]
        public Decimal horizontalClearanceValue
        {
            get
            {
                return _horizontalClearanceValue;
            }

            set
            {
                SetValue(ref _horizontalClearanceValue, value);
            }
        }

        private Decimal? _horizontalDistanceUncertainty = default;
        [Category("horizontalClearanceFixed")]
        public Decimal? horizontalDistanceUncertainty
        {
            get
            {
                return _horizontalDistanceUncertainty;
            }

            set
            {
                SetValue(ref _horizontalDistanceUncertainty, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.horizontalClearanceFixed instance)
        {
            horizontalClearanceValue = instance.horizontalClearanceValue;
            horizontalDistanceUncertainty = instance.horizontalDistanceUncertainty;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.horizontalClearanceFixed
            {
                horizontalClearanceValue = this.horizontalClearanceValue,
                horizontalDistanceUncertainty = this.horizontalDistanceUncertainty,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.horizontalClearanceFixed Model => new()
        {
            horizontalClearanceValue = this._horizontalClearanceValue,
            horizontalDistanceUncertainty = this._horizontalDistanceUncertainty,
        };

        public horizontalClearanceFixedViewModel() : base()
        {
        }
    }

    [CategoryOrder("horizontalClearanceOpen", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class horizontalClearanceOpenViewModel : ViewModelBase
    {
        private Decimal _horizontalClearanceValue;
        [Category("horizontalClearanceOpen")]
        public Decimal horizontalClearanceValue
        {
            get
            {
                return _horizontalClearanceValue;
            }

            set
            {
                SetValue(ref _horizontalClearanceValue, value);
            }
        }

        private Decimal? _horizontalDistanceUncertainty = default;
        [Category("horizontalClearanceOpen")]
        public Decimal? horizontalDistanceUncertainty
        {
            get
            {
                return _horizontalDistanceUncertainty;
            }

            set
            {
                SetValue(ref _horizontalDistanceUncertainty, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.horizontalClearanceOpen instance)
        {
            horizontalClearanceValue = instance.horizontalClearanceValue;
            horizontalDistanceUncertainty = instance.horizontalDistanceUncertainty;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.horizontalClearanceOpen
            {
                horizontalClearanceValue = this.horizontalClearanceValue,
                horizontalDistanceUncertainty = this.horizontalDistanceUncertainty,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.horizontalClearanceOpen Model => new()
        {
            horizontalClearanceValue = this._horizontalClearanceValue,
            horizontalDistanceUncertainty = this._horizontalDistanceUncertainty,
        };

        public horizontalClearanceOpenViewModel() : base()
        {
        }
    }

    [CategoryOrder("horizontalPositionUncertainty", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class horizontalPositionUncertaintyViewModel : ViewModelBase
    {
        private Decimal _uncertaintyFixed;
        [Category("horizontalPositionUncertainty")]
        public Decimal uncertaintyFixed
        {
            get
            {
                return _uncertaintyFixed;
            }

            set
            {
                SetValue(ref _uncertaintyFixed, value);
            }
        }

        private Decimal? _uncertaintyVariableFactor = default;
        [Category("horizontalPositionUncertainty")]
        public Decimal? uncertaintyVariableFactor
        {
            get
            {
                return _uncertaintyVariableFactor;
            }

            set
            {
                SetValue(ref _uncertaintyVariableFactor, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.horizontalPositionUncertainty instance)
        {
            uncertaintyFixed = instance.uncertaintyFixed;
            uncertaintyVariableFactor = instance.uncertaintyVariableFactor;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.horizontalPositionUncertainty
            {
                uncertaintyFixed = this.uncertaintyFixed,
                uncertaintyVariableFactor = this.uncertaintyVariableFactor,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.horizontalPositionUncertainty Model => new()
        {
            uncertaintyFixed = this._uncertaintyFixed,
            uncertaintyVariableFactor = this._uncertaintyVariableFactor,
        };

        public horizontalPositionUncertaintyViewModel() : base()
        {
        }
    }

#pragma warning disable CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.

    [CategoryOrder("information", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class informationViewModel : ViewModelBase
#pragma warning restore CS8981
    {
        private String _fileLocator = string.Empty;
        [Category("information")]
        public String fileLocator
        {
            get
            {
                return _fileLocator;
            }

            set
            {
                SetValue(ref _fileLocator, value);
            }
        }

        private String _fileReference = string.Empty;
        [Category("information")]
        public String fileReference
        {
            get
            {
                return _fileReference;
            }

            set
            {
                SetValue(ref _fileReference, value);
            }
        }

        private String _headline = string.Empty;
        [Category("information")]
        public String headline
        {
            get
            {
                return _headline;
            }

            set
            {
                SetValue(ref _headline, value);
            }
        }

        private String _language = string.Empty;
        [Category("information")]
        public String language
        {
            get
            {
                return _language;
            }

            set
            {
                SetValue(ref _language, value);
            }
        }

        private String _text = string.Empty;
        [Category("information")]
        public String text
        {
            get
            {
                return _text;
            }

            set
            {
                SetValue(ref _text, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.information instance)
        {
            fileLocator = instance.fileLocator;
            fileReference = instance.fileReference;
            headline = instance.headline;
            language = instance.language;
            text = instance.text;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.information
            {
                fileLocator = this.fileLocator,
                fileReference = this.fileReference,
                headline = this.headline,
                language = this.language,
                text = this.text,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.information Model => new()
        {
            fileLocator = this._fileLocator,
            fileReference = this._fileReference,
            headline = this._headline,
            language = this._language,
            text = this._text,
        };

        public informationViewModel() : base()
        {
        }
    }

    [CategoryOrder("measuredDistanceValue", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class measuredDistanceValueViewModel : ViewModelBase
    {
        private distanceUnitOfMeasurement _distanceUnitOfMeasurement;
        [Category("measuredDistanceValue")]
        public distanceUnitOfMeasurement distanceUnitOfMeasurement
        {
            get
            {
                return _distanceUnitOfMeasurement;
            }

            set
            {
                SetValue(ref _distanceUnitOfMeasurement, value);
            }
        }

        private String _referenceLocation = string.Empty;
        [Category("measuredDistanceValue")]
        public String referenceLocation
        {
            get
            {
                return _referenceLocation;
            }

            set
            {
                SetValue(ref _referenceLocation, value);
            }
        }

        private Decimal _waterwayDistance;
        [Category("measuredDistanceValue")]
        public Decimal waterwayDistance
        {
            get
            {
                return _waterwayDistance;
            }

            set
            {
                SetValue(ref _waterwayDistance, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.measuredDistanceValue instance)
        {
            distanceUnitOfMeasurement = instance.distanceUnitOfMeasurement;
            referenceLocation = instance.referenceLocation;
            waterwayDistance = instance.waterwayDistance;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.measuredDistanceValue
            {
                distanceUnitOfMeasurement = this.distanceUnitOfMeasurement,
                referenceLocation = this.referenceLocation,
                waterwayDistance = this.waterwayDistance,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.measuredDistanceValue Model => new()
        {
            distanceUnitOfMeasurement = this._distanceUnitOfMeasurement,
            referenceLocation = this._referenceLocation,
            waterwayDistance = this._waterwayDistance,
        };

        public measuredDistanceValueViewModel() : base()
        {
        }
    }

    [CategoryOrder("multiplicityOfFeatures", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class multiplicityOfFeaturesViewModel : ViewModelBase
    {
        private Boolean _multiplicityKnown;
        [Category("multiplicityOfFeatures")]
        public Boolean multiplicityKnown
        {
            get
            {
                return _multiplicityKnown;
            }

            set
            {
                SetValue(ref _multiplicityKnown, value);
            }
        }

        private Int32? _numberOfFeatures = default;
        [Category("multiplicityOfFeatures")]
        public Int32? numberOfFeatures
        {
            get
            {
                return _numberOfFeatures;
            }

            set
            {
                SetValue(ref _numberOfFeatures, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.multiplicityOfFeatures instance)
        {
            multiplicityKnown = instance.multiplicityKnown;
            numberOfFeatures = instance.numberOfFeatures;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.multiplicityOfFeatures
            {
                multiplicityKnown = this.multiplicityKnown,
                numberOfFeatures = this.numberOfFeatures,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.multiplicityOfFeatures Model => new()
        {
            multiplicityKnown = this._multiplicityKnown,
            numberOfFeatures = this._numberOfFeatures,
        };

        public multiplicityOfFeaturesViewModel() : base()
        {
        }
    }

    [CategoryOrder("onlineResource", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class onlineResourceViewModel : ViewModelBase
    {
        private String _headline = string.Empty;
        [Category("onlineResource")]
        public String headline
        {
            get
            {
                return _headline;
            }

            set
            {
                SetValue(ref _headline, value);
            }
        }

        private String _linkage = string.Empty;
        [Category("onlineResource")]
        public String linkage
        {
            get
            {
                return _linkage;
            }

            set
            {
                SetValue(ref _linkage, value);
            }
        }

        private String _nameOfResource = string.Empty;
        [Category("onlineResource")]
        public String nameOfResource
        {
            get
            {
                return _nameOfResource;
            }

            set
            {
                SetValue(ref _nameOfResource, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.onlineResource instance)
        {
            headline = instance.headline;
            linkage = instance.linkage;
            nameOfResource = instance.nameOfResource;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.onlineResource
            {
                headline = this.headline,
                linkage = this.linkage,
                nameOfResource = this.nameOfResource,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.onlineResource Model => new()
        {
            headline = this._headline,
            linkage = this._linkage,
            nameOfResource = this._nameOfResource,
        };

        public onlineResourceViewModel() : base()
        {
        }
    }

#pragma warning disable CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.

    [CategoryOrder("orientation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class orientationViewModel : ViewModelBase
#pragma warning restore CS8981
    {
        private Decimal? _orientationUncertainty = default;
        [Category("orientation")]
        public Decimal? orientationUncertainty
        {
            get
            {
                return _orientationUncertainty;
            }

            set
            {
                SetValue(ref _orientationUncertainty, value);
            }
        }

        private Decimal _orientationValue;
        [Category("orientation")]
        public Decimal orientationValue
        {
            get
            {
                return _orientationValue;
            }

            set
            {
                SetValue(ref _orientationValue, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.orientation instance)
        {
            orientationUncertainty = instance.orientationUncertainty;
            orientationValue = instance.orientationValue;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.orientation
            {
                orientationUncertainty = this.orientationUncertainty,
                orientationValue = this.orientationValue,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.orientation Model => new()
        {
            orientationUncertainty = this._orientationUncertainty,
            orientationValue = this._orientationValue,
        };

        public orientationViewModel() : base()
        {
        }
    }

    [CategoryOrder("periodicDateRange", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class periodicDateRangeViewModel : ViewModelBase
    {
        private DateOnly _dateEnd;
        [Category("periodicDateRange")]
        public DateOnly dateEnd
        {
            get
            {
                return _dateEnd;
            }

            set
            {
                SetValue(ref _dateEnd, value);
            }
        }

        private DateOnly _dateStart;
        [Category("periodicDateRange")]
        public DateOnly dateStart
        {
            get
            {
                return _dateStart;
            }

            set
            {
                SetValue(ref _dateStart, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.periodicDateRange instance)
        {
            dateEnd = instance.dateEnd;
            dateStart = instance.dateStart;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.periodicDateRange
            {
                dateEnd = this.dateEnd,
                dateStart = this.dateStart,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.periodicDateRange Model => new()
        {
            dateEnd = this._dateEnd,
            dateStart = this._dateStart,
        };

        public periodicDateRangeViewModel() : base()
        {
        }
    }

    [CategoryOrder("radarWaveLength", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class radarWaveLengthViewModel : ViewModelBase
    {
        private String _radarBand = string.Empty;
        [Category("radarWaveLength")]
        public String radarBand
        {
            get
            {
                return _radarBand;
            }

            set
            {
                SetValue(ref _radarBand, value);
            }
        }

        private Decimal _waveLengthValue;
        [Category("radarWaveLength")]
        public Decimal waveLengthValue
        {
            get
            {
                return _waveLengthValue;
            }

            set
            {
                SetValue(ref _waveLengthValue, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.radarWaveLength instance)
        {
            radarBand = instance.radarBand;
            waveLengthValue = instance.waveLengthValue;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.radarWaveLength
            {
                radarBand = this.radarBand,
                waveLengthValue = this.waveLengthValue,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.radarWaveLength Model => new()
        {
            radarBand = this._radarBand,
            waveLengthValue = this._waveLengthValue,
        };

        public radarWaveLengthViewModel() : base()
        {
        }
    }

    [CategoryOrder("sectorInformation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class sectorInformationViewModel : ViewModelBase
    {
        private String _language = string.Empty;
        [Category("sectorInformation")]
        public String language
        {
            get
            {
                return _language;
            }

            set
            {
                SetValue(ref _language, value);
            }
        }

        private String _text = string.Empty;
        [Category("sectorInformation")]
        public String text
        {
            get
            {
                return _text;
            }

            set
            {
                SetValue(ref _text, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.sectorInformation instance)
        {
            language = instance.language;
            text = instance.text;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.sectorInformation
            {
                language = this.language,
                text = this.text,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.sectorInformation Model => new()
        {
            language = this._language,
            text = this._text,
        };

        public sectorInformationViewModel() : base()
        {
        }
    }

    [CategoryOrder("sectorLimitOne", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class sectorLimitOneViewModel : ViewModelBase
    {
        private Decimal _sectorBearing;
        [Category("sectorLimitOne")]
        public Decimal sectorBearing
        {
            get
            {
                return _sectorBearing;
            }

            set
            {
                SetValue(ref _sectorBearing, value);
            }
        }

        private Decimal? _sectorLineLength = default;
        [Category("sectorLimitOne")]
        public Decimal? sectorLineLength
        {
            get
            {
                return _sectorLineLength;
            }

            set
            {
                SetValue(ref _sectorLineLength, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.sectorLimitOne instance)
        {
            sectorBearing = instance.sectorBearing;
            sectorLineLength = instance.sectorLineLength;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.sectorLimitOne
            {
                sectorBearing = this.sectorBearing,
                sectorLineLength = this.sectorLineLength,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.sectorLimitOne Model => new()
        {
            sectorBearing = this._sectorBearing,
            sectorLineLength = this._sectorLineLength,
        };

        public sectorLimitOneViewModel() : base()
        {
        }
    }

    [CategoryOrder("sectorLimitTwo", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class sectorLimitTwoViewModel : ViewModelBase
    {
        private Decimal _sectorBearing;
        [Category("sectorLimitTwo")]
        public Decimal sectorBearing
        {
            get
            {
                return _sectorBearing;
            }

            set
            {
                SetValue(ref _sectorBearing, value);
            }
        }

        private Decimal? _sectorLineLength = default;
        [Category("sectorLimitTwo")]
        public Decimal? sectorLineLength
        {
            get
            {
                return _sectorLineLength;
            }

            set
            {
                SetValue(ref _sectorLineLength, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.sectorLimitTwo instance)
        {
            sectorBearing = instance.sectorBearing;
            sectorLineLength = instance.sectorLineLength;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.sectorLimitTwo
            {
                sectorBearing = this.sectorBearing,
                sectorLineLength = this.sectorLineLength,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.sectorLimitTwo Model => new()
        {
            sectorBearing = this._sectorBearing,
            sectorLineLength = this._sectorLineLength,
        };

        public sectorLimitTwoViewModel() : base()
        {
        }
    }

    [CategoryOrder("shapeInformation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class shapeInformationViewModel : ViewModelBase
    {
        private String _language = string.Empty;
        [Category("shapeInformation")]
        public String language
        {
            get
            {
                return _language;
            }

            set
            {
                SetValue(ref _language, value);
            }
        }

        private String _text = string.Empty;
        [Category("shapeInformation")]
        public String text
        {
            get
            {
                return _text;
            }

            set
            {
                SetValue(ref _text, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.shapeInformation instance)
        {
            language = instance.language;
            text = instance.text;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.shapeInformation
            {
                language = this.language,
                text = this.text,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.shapeInformation Model => new()
        {
            language = this._language,
            text = this._text,
        };

        public shapeInformationViewModel() : base()
        {
        }
    }

    [CategoryOrder("signalSequence", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class signalSequenceViewModel : ViewModelBase
    {
        private Decimal _signalDuration;
        [Category("signalSequence")]
        public Decimal signalDuration
        {
            get
            {
                return _signalDuration;
            }

            set
            {
                SetValue(ref _signalDuration, value);
            }
        }

        private signalStatus _signalStatus;
        [Category("signalSequence")]
        public signalStatus signalStatus
        {
            get
            {
                return _signalStatus;
            }

            set
            {
                SetValue(ref _signalStatus, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.signalSequence instance)
        {
            signalDuration = instance.signalDuration;
            signalStatus = instance.signalStatus;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.signalSequence
            {
                signalDuration = this.signalDuration,
                signalStatus = this.signalStatus,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.signalSequence Model => new()
        {
            signalDuration = this._signalDuration,
            signalStatus = this._signalStatus,
        };

        public signalSequenceViewModel() : base()
        {
        }
    }

#pragma warning disable CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.

    [CategoryOrder("speed", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class speedViewModel : ViewModelBase
#pragma warning restore CS8981
    {
        private Decimal _speedMaximum;
        [Category("speed")]
        public Decimal speedMaximum
        {
            get
            {
                return _speedMaximum;
            }

            set
            {
                SetValue(ref _speedMaximum, value);
            }
        }

        private Decimal? _speedMinimum = default;
        [Category("speed")]
        public Decimal? speedMinimum
        {
            get
            {
                return _speedMinimum;
            }

            set
            {
                SetValue(ref _speedMinimum, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.speed instance)
        {
            speedMaximum = instance.speedMaximum;
            speedMinimum = instance.speedMinimum;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.speed
            {
                speedMaximum = this.speedMaximum,
                speedMinimum = this.speedMinimum,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.speed Model => new()
        {
            speedMaximum = this._speedMaximum,
            speedMinimum = this._speedMinimum,
        };

        public speedViewModel() : base()
        {
        }
    }

    [CategoryOrder("surfaceCharacteristics", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class surfaceCharacteristicsViewModel : ViewModelBase
    {
        private natureOfSurface? _natureOfSurface = default;
        [Category("surfaceCharacteristics")]
        public natureOfSurface? natureOfSurface
        {
            get
            {
                return _natureOfSurface;
            }

            set
            {
                SetValue(ref _natureOfSurface, value);
            }
        }

        [Category("surfaceCharacteristics")]
        public ObservableCollection<natureOfSurfaceQualifyingTerms> natureOfSurfaceQualifyingTerms { get; set; } = new();

        private Int32? _underlyingLayer = default;
        [Category("surfaceCharacteristics")]
        public Int32? underlyingLayer
        {
            get
            {
                return _underlyingLayer;
            }

            set
            {
                SetValue(ref _underlyingLayer, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.surfaceCharacteristics instance)
        {
            natureOfSurface = instance.natureOfSurface;
            natureOfSurfaceQualifyingTerms.Clear();
            if (instance.natureOfSurfaceQualifyingTerms is not null)
                foreach (var e in instance.natureOfSurfaceQualifyingTerms)
                    natureOfSurfaceQualifyingTerms.Add(e);
            underlyingLayer = instance.underlyingLayer;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.surfaceCharacteristics
            {
                natureOfSurface = this.natureOfSurface,
                natureOfSurfaceQualifyingTerms = this.natureOfSurfaceQualifyingTerms.ToList(),
                underlyingLayer = this.underlyingLayer,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.surfaceCharacteristics Model => new()
        {
            natureOfSurface = this._natureOfSurface,
            natureOfSurfaceQualifyingTerms = this.natureOfSurfaceQualifyingTerms.ToList(),
            underlyingLayer = this._underlyingLayer,
        };

        public surfaceCharacteristicsViewModel() : base()
        {
            natureOfSurfaceQualifyingTerms.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfSurfaceQualifyingTerms));
            };
        }
    }

    [CategoryOrder("surveyDateRange", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class surveyDateRangeViewModel : ViewModelBase
    {
        private DateOnly _dateEnd;
        [Category("surveyDateRange")]
        public DateOnly dateEnd
        {
            get
            {
                return _dateEnd;
            }

            set
            {
                SetValue(ref _dateEnd, value);
            }
        }

        private DateOnly? _dateStart = default;
        [Category("surveyDateRange")]
        public DateOnly? dateStart
        {
            get
            {
                return _dateStart;
            }

            set
            {
                SetValue(ref _dateStart, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.surveyDateRange instance)
        {
            dateEnd = instance.dateEnd;
            dateStart = instance.dateStart;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.surveyDateRange
            {
                dateEnd = this.dateEnd,
                dateStart = this.dateStart,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.surveyDateRange Model => new()
        {
            dateEnd = this._dateEnd,
            dateStart = this._dateStart,
        };

        public surveyDateRangeViewModel() : base()
        {
        }
    }

#pragma warning disable CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.

    [CategoryOrder("telecommunications", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class telecommunicationsViewModel : ViewModelBase
#pragma warning restore CS8981
    {
        private String _contactInstructions = string.Empty;
        [Category("telecommunications")]
        public String contactInstructions
        {
            get
            {
                return _contactInstructions;
            }

            set
            {
                SetValue(ref _contactInstructions, value);
            }
        }

        private String _telecommunicationIdentifier = string.Empty;
        [Category("telecommunications")]
        public String telecommunicationIdentifier
        {
            get
            {
                return _telecommunicationIdentifier;
            }

            set
            {
                SetValue(ref _telecommunicationIdentifier, value);
            }
        }

        private telecommunicationService? _telecommunicationService = default;
        [Category("telecommunications")]
        public telecommunicationService? telecommunicationService
        {
            get
            {
                return _telecommunicationService;
            }

            set
            {
                SetValue(ref _telecommunicationService, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.telecommunications instance)
        {
            contactInstructions = instance.contactInstructions;
            telecommunicationIdentifier = instance.telecommunicationIdentifier;
            telecommunicationService = instance.telecommunicationService;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.telecommunications
            {
                contactInstructions = this.contactInstructions,
                telecommunicationIdentifier = this.telecommunicationIdentifier,
                telecommunicationService = this.telecommunicationService,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.telecommunications Model => new()
        {
            contactInstructions = this._contactInstructions,
            telecommunicationIdentifier = this._telecommunicationIdentifier,
            telecommunicationService = this._telecommunicationService,
        };

        public telecommunicationsViewModel() : base()
        {
        }
    }

    [CategoryOrder("tidalStreamValue", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class tidalStreamValueViewModel : ViewModelBase
    {
        private orientationViewModel _orientation;
        [Category("tidalStreamValue")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public orientationViewModel orientation
        {
            get
            {
                return _orientation;
            }

            set
            {
                SetValue(ref _orientation, value);
            }
        }

        private Decimal _speedMaximum;
        [Category("tidalStreamValue")]
        public Decimal speedMaximum
        {
            get
            {
                return _speedMaximum;
            }

            set
            {
                SetValue(ref _speedMaximum, value);
            }
        }

        private Decimal _timeRelativeToTide;
        [Category("tidalStreamValue")]
        public Decimal timeRelativeToTide
        {
            get
            {
                return _timeRelativeToTide;
            }

            set
            {
                SetValue(ref _timeRelativeToTide, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.tidalStreamValue instance)
        {
            orientation = new();
            if (instance.orientation != null)
            {
                orientation = new();
                orientation.Load(instance.orientation);
            }

            speedMaximum = instance.speedMaximum;
            timeRelativeToTide = instance.timeRelativeToTide;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.tidalStreamValue
            {
                orientation = this.orientation?.Model,
                speedMaximum = this.speedMaximum,
                timeRelativeToTide = this.timeRelativeToTide,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.tidalStreamValue Model => new()
        {
            orientation = this._orientation?.Model,
            speedMaximum = this._speedMaximum,
            timeRelativeToTide = this._timeRelativeToTide,
        };

        public tidalStreamValueViewModel() : base()
        {
        }
    }

    [CategoryOrder("timeIntervalsByDayOfWeek", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class timeIntervalsByDayOfWeekViewModel : ViewModelBase
    {
        [Category("timeIntervalsByDayOfWeek")]
        public ObservableCollection<dayOfWeek> dayOfWeek { get; set; } = new();

        private Boolean? _dayOfWeekIsRange = default;
        [Category("timeIntervalsByDayOfWeek")]
        public Boolean? dayOfWeekIsRange
        {
            get
            {
                return _dayOfWeekIsRange;
            }

            set
            {
                SetValue(ref _dayOfWeekIsRange, value);
            }
        }

        [Category("timeIntervalsByDayOfWeek")]
        public ObservableCollection<TimeOnly> timeOfDayStart { get; set; } = new();

        [Category("timeIntervalsByDayOfWeek")]
        public ObservableCollection<TimeOnly> timeOfDayEnd { get; set; } = new();

        public void Load(DomainModel.S101.ComplexAttributes.timeIntervalsByDayOfWeek instance)
        {
            dayOfWeek.Clear();
            if (instance.dayOfWeek is not null)
                foreach (var e in instance.dayOfWeek)
                    dayOfWeek.Add(e);
            dayOfWeekIsRange = instance.dayOfWeekIsRange;
            timeOfDayStart.Clear();
            if (instance.timeOfDayStart is not null)
                foreach (var e in instance.timeOfDayStart)
                    timeOfDayStart.Add(e);
            timeOfDayEnd.Clear();
            if (instance.timeOfDayEnd is not null)
                foreach (var e in instance.timeOfDayEnd)
                    timeOfDayEnd.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.timeIntervalsByDayOfWeek
            {
                dayOfWeek = this.dayOfWeek.ToList(),
                dayOfWeekIsRange = this.dayOfWeekIsRange,
                timeOfDayStart = this.timeOfDayStart.ToList(),
                timeOfDayEnd = this.timeOfDayEnd.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.timeIntervalsByDayOfWeek Model => new()
        {
            dayOfWeek = this.dayOfWeek.ToList(),
            dayOfWeekIsRange = this._dayOfWeekIsRange,
            timeOfDayStart = this.timeOfDayStart.ToList(),
            timeOfDayEnd = this.timeOfDayEnd.ToList(),
        };

        public timeIntervalsByDayOfWeekViewModel() : base()
        {
            dayOfWeek.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(dayOfWeek));
            };
            timeOfDayStart.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(timeOfDayStart));
            };
            timeOfDayEnd.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(timeOfDayEnd));
            };
        }
    }

#pragma warning disable CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.

    [CategoryOrder("topmark", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class topmarkViewModel : ViewModelBase
#pragma warning restore CS8981
    {
        [Category("topmark")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("topmark")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private topmarkDaymarkShape _topmarkDaymarkShape;
        [Category("topmark")]
        public topmarkDaymarkShape topmarkDaymarkShape
        {
            get
            {
                return _topmarkDaymarkShape;
            }

            set
            {
                SetValue(ref _topmarkDaymarkShape, value);
            }
        }

        [Category("topmark")]
        public ObservableCollection<shapeInformation> shapeInformation { get; set; } = new();

        public void Load(DomainModel.S101.ComplexAttributes.topmark instance)
        {
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            topmarkDaymarkShape = instance.topmarkDaymarkShape;
            shapeInformation.Clear();
            if (instance.shapeInformation is not null)
                foreach (var e in instance.shapeInformation)
                    shapeInformation.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.topmark
            {
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                topmarkDaymarkShape = this.topmarkDaymarkShape,
                shapeInformation = this.shapeInformation.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.topmark Model => new()
        {
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            topmarkDaymarkShape = this._topmarkDaymarkShape,
            shapeInformation = this.shapeInformation.ToList(),
        };

        public topmarkViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            shapeInformation.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(shapeInformation));
            };
        }
    }

    [CategoryOrder("valueOfLocalMagneticAnomaly", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class valueOfLocalMagneticAnomalyViewModel : ViewModelBase
    {
        private Decimal _magneticAnomalyValue;
        [Category("valueOfLocalMagneticAnomaly")]
        public Decimal magneticAnomalyValue
        {
            get
            {
                return _magneticAnomalyValue;
            }

            set
            {
                SetValue(ref _magneticAnomalyValue, value);
            }
        }

        private referenceDirection? _referenceDirection = default;
        [Category("valueOfLocalMagneticAnomaly")]
        public referenceDirection? referenceDirection
        {
            get
            {
                return _referenceDirection;
            }

            set
            {
                SetValue(ref _referenceDirection, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.valueOfLocalMagneticAnomaly instance)
        {
            magneticAnomalyValue = instance.magneticAnomalyValue;
            referenceDirection = instance.referenceDirection;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.valueOfLocalMagneticAnomaly
            {
                magneticAnomalyValue = this.magneticAnomalyValue,
                referenceDirection = this.referenceDirection,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.valueOfLocalMagneticAnomaly Model => new()
        {
            magneticAnomalyValue = this._magneticAnomalyValue,
            referenceDirection = this._referenceDirection,
        };

        public valueOfLocalMagneticAnomalyViewModel() : base()
        {
        }
    }

    [CategoryOrder("verticalUncertainty", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class verticalUncertaintyViewModel : ViewModelBase
    {
        private Decimal _uncertaintyFixed;
        [Category("verticalUncertainty")]
        public Decimal uncertaintyFixed
        {
            get
            {
                return _uncertaintyFixed;
            }

            set
            {
                SetValue(ref _uncertaintyFixed, value);
            }
        }

        private Decimal? _uncertaintyVariableFactor = default;
        [Category("verticalUncertainty")]
        public Decimal? uncertaintyVariableFactor
        {
            get
            {
                return _uncertaintyVariableFactor;
            }

            set
            {
                SetValue(ref _uncertaintyVariableFactor, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.verticalUncertainty instance)
        {
            uncertaintyFixed = instance.uncertaintyFixed;
            uncertaintyVariableFactor = instance.uncertaintyVariableFactor;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.verticalUncertainty
            {
                uncertaintyFixed = this.uncertaintyFixed,
                uncertaintyVariableFactor = this.uncertaintyVariableFactor,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.verticalUncertainty Model => new()
        {
            uncertaintyFixed = this._uncertaintyFixed,
            uncertaintyVariableFactor = this._uncertaintyVariableFactor,
        };

        public verticalUncertaintyViewModel() : base()
        {
        }
    }

    [CategoryOrder("vesselSpeedLimit", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class vesselSpeedLimitViewModel : ViewModelBase
    {
        private Decimal _speedLimit;
        [Category("vesselSpeedLimit")]
        public Decimal speedLimit
        {
            get
            {
                return _speedLimit;
            }

            set
            {
                SetValue(ref _speedLimit, value);
            }
        }

        private speedUnits _speedUnits;
        [Category("vesselSpeedLimit")]
        public speedUnits speedUnits
        {
            get
            {
                return _speedUnits;
            }

            set
            {
                SetValue(ref _speedUnits, value);
            }
        }

        private String _vesselClass = string.Empty;
        [Category("vesselSpeedLimit")]
        public String vesselClass
        {
            get
            {
                return _vesselClass;
            }

            set
            {
                SetValue(ref _vesselClass, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.vesselSpeedLimit instance)
        {
            speedLimit = instance.speedLimit;
            speedUnits = instance.speedUnits;
            vesselClass = instance.vesselClass;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.vesselSpeedLimit
            {
                speedLimit = this.speedLimit,
                speedUnits = this.speedUnits,
                vesselClass = this.vesselClass,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.vesselSpeedLimit Model => new()
        {
            speedLimit = this._speedLimit,
            speedUnits = this._speedUnits,
            vesselClass = this._vesselClass,
        };

        public vesselSpeedLimitViewModel() : base()
        {
        }
    }

    [CategoryOrder("zoneOfConfidence", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class zoneOfConfidenceViewModel : ViewModelBase
    {
        private categoryOfZoneOfConfidenceInData _categoryOfZoneOfConfidenceInData;
        [Category("zoneOfConfidence")]
        public categoryOfZoneOfConfidenceInData categoryOfZoneOfConfidenceInData
        {
            get
            {
                return _categoryOfZoneOfConfidenceInData;
            }

            set
            {
                SetValue(ref _categoryOfZoneOfConfidenceInData, value);
            }
        }

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("zoneOfConfidence")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private horizontalPositionUncertaintyViewModel? _horizontalPositionUncertainty;
        [Category("zoneOfConfidence")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public horizontalPositionUncertaintyViewModel? horizontalPositionUncertainty
        {
            get
            {
                return _horizontalPositionUncertainty;
            }

            set
            {
                SetValue(ref _horizontalPositionUncertainty, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("zoneOfConfidence")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.zoneOfConfidence instance)
        {
            categoryOfZoneOfConfidenceInData = instance.categoryOfZoneOfConfidenceInData;
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            horizontalPositionUncertainty = new();
            if (instance.horizontalPositionUncertainty != null)
            {
                horizontalPositionUncertainty = new();
                horizontalPositionUncertainty.Load(instance.horizontalPositionUncertainty);
            }

            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.zoneOfConfidence
            {
                categoryOfZoneOfConfidenceInData = this.categoryOfZoneOfConfidenceInData,
                fixedDateRange = this.fixedDateRange?.Model,
                horizontalPositionUncertainty = this.horizontalPositionUncertainty?.Model,
                verticalUncertainty = this.verticalUncertainty?.Model,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.zoneOfConfidence Model => new()
        {
            categoryOfZoneOfConfidenceInData = this._categoryOfZoneOfConfidenceInData,
            fixedDateRange = this._fixedDateRange?.Model,
            horizontalPositionUncertainty = this._horizontalPositionUncertainty?.Model,
            verticalUncertainty = this._verticalUncertainty?.Model,
        };

        public zoneOfConfidenceViewModel() : base()
        {
        }
    }

    [CategoryOrder("directionalCharacter", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class directionalCharacterViewModel : ViewModelBase
    {
        private Boolean? _moireEffect = default;
        [Category("directionalCharacter")]
        public Boolean? moireEffect
        {
            get
            {
                return _moireEffect;
            }

            set
            {
                SetValue(ref _moireEffect, value);
            }
        }

        private orientationViewModel _orientation;
        [Category("directionalCharacter")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public orientationViewModel orientation
        {
            get
            {
                return _orientation;
            }

            set
            {
                SetValue(ref _orientation, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.directionalCharacter instance)
        {
            moireEffect = instance.moireEffect;
            orientation = new();
            if (instance.orientation != null)
            {
                orientation = new();
                orientation.Load(instance.orientation);
            }
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.directionalCharacter
            {
                moireEffect = this.moireEffect,
                orientation = this.orientation?.Model,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.directionalCharacter Model => new()
        {
            moireEffect = this._moireEffect,
            orientation = this._orientation?.Model,
        };

        public directionalCharacterViewModel() : base()
        {
        }
    }

    [CategoryOrder("rhythmOfLight", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class rhythmOfLightViewModel : ViewModelBase
    {
        private lightCharacteristic _lightCharacteristic;
        [Category("rhythmOfLight")]
        public lightCharacteristic lightCharacteristic
        {
            get
            {
                return _lightCharacteristic;
            }

            set
            {
                SetValue(ref _lightCharacteristic, value);
            }
        }

        [Category("rhythmOfLight")]
        public ObservableCollection<String> signalGroup { get; set; } = new();

        private Decimal? _signalPeriod = default;
        [Category("rhythmOfLight")]
        public Decimal? signalPeriod
        {
            get
            {
                return _signalPeriod;
            }

            set
            {
                SetValue(ref _signalPeriod, value);
            }
        }

        [Category("rhythmOfLight")]
        public ObservableCollection<signalSequence> signalSequence { get; set; } = new();

        public void Load(DomainModel.S101.ComplexAttributes.rhythmOfLight instance)
        {
            lightCharacteristic = instance.lightCharacteristic;
            signalGroup.Clear();
            if (instance.signalGroup is not null)
                foreach (var e in instance.signalGroup)
                    signalGroup.Add(e);
            signalPeriod = instance.signalPeriod;
            signalSequence.Clear();
            if (instance.signalSequence is not null)
                foreach (var e in instance.signalSequence)
                    signalSequence.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.rhythmOfLight
            {
                lightCharacteristic = this.lightCharacteristic,
                signalGroup = this.signalGroup.ToList(),
                signalPeriod = this.signalPeriod,
                signalSequence = this.signalSequence.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.rhythmOfLight Model => new()
        {
            lightCharacteristic = this._lightCharacteristic,
            signalGroup = this.signalGroup.ToList(),
            signalPeriod = this._signalPeriod,
            signalSequence = this.signalSequence.ToList(),
        };

        public rhythmOfLightViewModel() : base()
        {
            signalGroup.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(signalGroup));
            };
            signalSequence.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(signalSequence));
            };
        }
    }

    [CategoryOrder("scheduleByDayOfWeek", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class scheduleByDayOfWeekViewModel : ViewModelBase
    {
        private categoryOfSchedule? _categoryOfSchedule = default;
        [Category("scheduleByDayOfWeek")]
        public categoryOfSchedule? categoryOfSchedule
        {
            get
            {
                return _categoryOfSchedule;
            }

            set
            {
                SetValue(ref _categoryOfSchedule, value);
            }
        }

        [Category("scheduleByDayOfWeek")]
        public ObservableCollection<timeIntervalsByDayOfWeek> timeIntervalsByDayOfWeek { get; set; } = new();

        public void Load(DomainModel.S101.ComplexAttributes.scheduleByDayOfWeek instance)
        {
            categoryOfSchedule = instance.categoryOfSchedule;
            timeIntervalsByDayOfWeek.Clear();
            if (instance.timeIntervalsByDayOfWeek is not null)
                foreach (var e in instance.timeIntervalsByDayOfWeek)
                    timeIntervalsByDayOfWeek.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.scheduleByDayOfWeek
            {
                categoryOfSchedule = this.categoryOfSchedule,
                timeIntervalsByDayOfWeek = this.timeIntervalsByDayOfWeek.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.scheduleByDayOfWeek Model => new()
        {
            categoryOfSchedule = this._categoryOfSchedule,
            timeIntervalsByDayOfWeek = this.timeIntervalsByDayOfWeek.ToList(),
        };

        public scheduleByDayOfWeekViewModel() : base()
        {
            timeIntervalsByDayOfWeek.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(timeIntervalsByDayOfWeek));
            };
        }
    }

    [CategoryOrder("sectorLimit", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class sectorLimitViewModel : ViewModelBase
    {
        private sectorLimitOneViewModel _sectorLimitOne;
        [Category("sectorLimit")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public sectorLimitOneViewModel sectorLimitOne
        {
            get
            {
                return _sectorLimitOne;
            }

            set
            {
                SetValue(ref _sectorLimitOne, value);
            }
        }

        private sectorLimitTwoViewModel _sectorLimitTwo;
        [Category("sectorLimit")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public sectorLimitTwoViewModel sectorLimitTwo
        {
            get
            {
                return _sectorLimitTwo;
            }

            set
            {
                SetValue(ref _sectorLimitTwo, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.sectorLimit instance)
        {
            sectorLimitOne = new();
            if (instance.sectorLimitOne != null)
            {
                sectorLimitOne = new();
                sectorLimitOne.Load(instance.sectorLimitOne);
            }

            sectorLimitTwo = new();
            if (instance.sectorLimitTwo != null)
            {
                sectorLimitTwo = new();
                sectorLimitTwo.Load(instance.sectorLimitTwo);
            }
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.sectorLimit
            {
                sectorLimitOne = this.sectorLimitOne?.Model,
                sectorLimitTwo = this.sectorLimitTwo?.Model,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.sectorLimit Model => new()
        {
            sectorLimitOne = this._sectorLimitOne?.Model,
            sectorLimitTwo = this._sectorLimitTwo?.Model,
        };

        public sectorLimitViewModel() : base()
        {
        }
    }

    [CategoryOrder("spatialAccuracy", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class spatialAccuracyViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("spatialAccuracy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private horizontalPositionUncertaintyViewModel? _horizontalPositionUncertainty;
        [Category("spatialAccuracy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public horizontalPositionUncertaintyViewModel? horizontalPositionUncertainty
        {
            get
            {
                return _horizontalPositionUncertainty;
            }

            set
            {
                SetValue(ref _horizontalPositionUncertainty, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("spatialAccuracy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.spatialAccuracy instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            horizontalPositionUncertainty = new();
            if (instance.horizontalPositionUncertainty != null)
            {
                horizontalPositionUncertainty = new();
                horizontalPositionUncertainty.Load(instance.horizontalPositionUncertainty);
            }

            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.spatialAccuracy
            {
                fixedDateRange = this.fixedDateRange?.Model,
                horizontalPositionUncertainty = this.horizontalPositionUncertainty?.Model,
                verticalUncertainty = this.verticalUncertainty?.Model,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.spatialAccuracy Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            horizontalPositionUncertainty = this._horizontalPositionUncertainty?.Model,
            verticalUncertainty = this._verticalUncertainty?.Model,
        };

        public spatialAccuracyViewModel() : base()
        {
        }
    }

    [CategoryOrder("tidalStreamPanelValues", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class tidalStreamPanelValuesViewModel : ViewModelBase
    {
        private referenceTide _referenceTide;
        [Category("tidalStreamPanelValues")]
        public referenceTide referenceTide
        {
            get
            {
                return _referenceTide;
            }

            set
            {
                SetValue(ref _referenceTide, value);
            }
        }

        private referenceTideType _referenceTideType;
        [Category("tidalStreamPanelValues")]
        public referenceTideType referenceTideType
        {
            get
            {
                return _referenceTideType;
            }

            set
            {
                SetValue(ref _referenceTideType, value);
            }
        }

        private Decimal? _streamDepth = default;
        [Category("tidalStreamPanelValues")]
        public Decimal? streamDepth
        {
            get
            {
                return _streamDepth;
            }

            set
            {
                SetValue(ref _streamDepth, value);
            }
        }

        [Category("tidalStreamPanelValues")]
        public ObservableCollection<tidalStreamValue> tidalStreamValue { get; set; } = new();

        public void Load(DomainModel.S101.ComplexAttributes.tidalStreamPanelValues instance)
        {
            referenceTide = instance.referenceTide;
            referenceTideType = instance.referenceTideType;
            streamDepth = instance.streamDepth;
            tidalStreamValue.Clear();
            if (instance.tidalStreamValue is not null)
                foreach (var e in instance.tidalStreamValue)
                    tidalStreamValue.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.tidalStreamPanelValues
            {
                referenceTide = this.referenceTide,
                referenceTideType = this.referenceTideType,
                streamDepth = this.streamDepth,
                tidalStreamValue = this.tidalStreamValue.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.tidalStreamPanelValues Model => new()
        {
            referenceTide = this._referenceTide,
            referenceTideType = this._referenceTideType,
            streamDepth = this._streamDepth,
            tidalStreamValue = this.tidalStreamValue.ToList(),
        };

        public tidalStreamPanelValuesViewModel() : base()
        {
            tidalStreamValue.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(tidalStreamValue));
            };
        }
    }

    [CategoryOrder("verticalClearanceClosed", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class verticalClearanceClosedViewModel : ViewModelBase
    {
        private Decimal _verticalClearanceValue;
        [Category("verticalClearanceClosed")]
        public Decimal verticalClearanceValue
        {
            get
            {
                return _verticalClearanceValue;
            }

            set
            {
                SetValue(ref _verticalClearanceValue, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("verticalClearanceClosed")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.verticalClearanceClosed instance)
        {
            verticalClearanceValue = instance.verticalClearanceValue;
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.verticalClearanceClosed
            {
                verticalClearanceValue = this.verticalClearanceValue,
                verticalUncertainty = this.verticalUncertainty?.Model,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.verticalClearanceClosed Model => new()
        {
            verticalClearanceValue = this._verticalClearanceValue,
            verticalUncertainty = this._verticalUncertainty?.Model,
        };

        public verticalClearanceClosedViewModel() : base()
        {
        }
    }

    [CategoryOrder("verticalClearanceFixed", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class verticalClearanceFixedViewModel : ViewModelBase
    {
        private Decimal _verticalClearanceValue;
        [Category("verticalClearanceFixed")]
        public Decimal verticalClearanceValue
        {
            get
            {
                return _verticalClearanceValue;
            }

            set
            {
                SetValue(ref _verticalClearanceValue, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("verticalClearanceFixed")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.verticalClearanceFixed instance)
        {
            verticalClearanceValue = instance.verticalClearanceValue;
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.verticalClearanceFixed
            {
                verticalClearanceValue = this.verticalClearanceValue,
                verticalUncertainty = this.verticalUncertainty?.Model,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.verticalClearanceFixed Model => new()
        {
            verticalClearanceValue = this._verticalClearanceValue,
            verticalUncertainty = this._verticalUncertainty?.Model,
        };

        public verticalClearanceFixedViewModel() : base()
        {
        }
    }

    [CategoryOrder("verticalClearanceOpen", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class verticalClearanceOpenViewModel : ViewModelBase
    {
        private Boolean _verticalClearanceUnlimited;
        [Category("verticalClearanceOpen")]
        public Boolean verticalClearanceUnlimited
        {
            get
            {
                return _verticalClearanceUnlimited;
            }

            set
            {
                SetValue(ref _verticalClearanceUnlimited, value);
            }
        }

        private Decimal? _verticalClearanceValue = default;
        [Category("verticalClearanceOpen")]
        public Decimal? verticalClearanceValue
        {
            get
            {
                return _verticalClearanceValue;
            }

            set
            {
                SetValue(ref _verticalClearanceValue, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("verticalClearanceOpen")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.verticalClearanceOpen instance)
        {
            verticalClearanceUnlimited = instance.verticalClearanceUnlimited;
            verticalClearanceValue = instance.verticalClearanceValue;
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.verticalClearanceOpen
            {
                verticalClearanceUnlimited = this.verticalClearanceUnlimited,
                verticalClearanceValue = this.verticalClearanceValue,
                verticalUncertainty = this.verticalUncertainty?.Model,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.verticalClearanceOpen Model => new()
        {
            verticalClearanceUnlimited = this._verticalClearanceUnlimited,
            verticalClearanceValue = this._verticalClearanceValue,
            verticalUncertainty = this._verticalUncertainty?.Model,
        };

        public verticalClearanceOpenViewModel() : base()
        {
        }
    }

    [CategoryOrder("verticalClearanceSafe", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class verticalClearanceSafeViewModel : ViewModelBase
    {
        private Decimal _verticalClearanceValue;
        [Category("verticalClearanceSafe")]
        public Decimal verticalClearanceValue
        {
            get
            {
                return _verticalClearanceValue;
            }

            set
            {
                SetValue(ref _verticalClearanceValue, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("verticalClearanceSafe")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.verticalClearanceSafe instance)
        {
            verticalClearanceValue = instance.verticalClearanceValue;
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.verticalClearanceSafe
            {
                verticalClearanceValue = this.verticalClearanceValue,
                verticalUncertainty = this.verticalUncertainty?.Model,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.verticalClearanceSafe Model => new()
        {
            verticalClearanceValue = this._verticalClearanceValue,
            verticalUncertainty = this._verticalUncertainty?.Model,
        };

        public verticalClearanceSafeViewModel() : base()
        {
        }
    }

    [CategoryOrder("lightSector", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class lightSectorViewModel : ViewModelBase
    {
        [Category("lightSector")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private directionalCharacterViewModel? _directionalCharacter;
        [Category("lightSector")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public directionalCharacterViewModel? directionalCharacter
        {
            get
            {
                return _directionalCharacter;
            }

            set
            {
                SetValue(ref _directionalCharacter, value);
            }
        }

        [Category("lightSector")]
        public ObservableCollection<lightVisibility> lightVisibility { get; set; } = new();

        private sectorLimitViewModel? _sectorLimit;
        [Category("lightSector")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public sectorLimitViewModel? sectorLimit
        {
            get
            {
                return _sectorLimit;
            }

            set
            {
                SetValue(ref _sectorLimit, value);
            }
        }

        private Decimal? _valueOfNominalRange = default;
        [Category("lightSector")]
        public Decimal? valueOfNominalRange
        {
            get
            {
                return _valueOfNominalRange;
            }

            set
            {
                SetValue(ref _valueOfNominalRange, value);
            }
        }

        [Category("lightSector")]
        public ObservableCollection<sectorInformation> sectorInformation { get; set; } = new();

        private Boolean? _sectorArcExtension = default;
        [Category("lightSector")]
        public Boolean? sectorArcExtension
        {
            get
            {
                return _sectorArcExtension;
            }

            set
            {
                SetValue(ref _sectorArcExtension, value);
            }
        }

        public void Load(DomainModel.S101.ComplexAttributes.lightSector instance)
        {
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            directionalCharacter = new();
            if (instance.directionalCharacter != null)
            {
                directionalCharacter = new();
                directionalCharacter.Load(instance.directionalCharacter);
            }

            lightVisibility.Clear();
            if (instance.lightVisibility is not null)
                foreach (var e in instance.lightVisibility)
                    lightVisibility.Add(e);
            sectorLimit = new();
            if (instance.sectorLimit != null)
            {
                sectorLimit = new();
                sectorLimit.Load(instance.sectorLimit);
            }

            valueOfNominalRange = instance.valueOfNominalRange;
            sectorInformation.Clear();
            if (instance.sectorInformation is not null)
                foreach (var e in instance.sectorInformation)
                    sectorInformation.Add(e);
            sectorArcExtension = instance.sectorArcExtension;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.lightSector
            {
                colour = this.colour.ToList(),
                directionalCharacter = this.directionalCharacter?.Model,
                lightVisibility = this.lightVisibility.ToList(),
                sectorLimit = this.sectorLimit?.Model,
                valueOfNominalRange = this.valueOfNominalRange,
                sectorInformation = this.sectorInformation.ToList(),
                sectorArcExtension = this.sectorArcExtension,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.lightSector Model => new()
        {
            colour = this.colour.ToList(),
            directionalCharacter = this._directionalCharacter?.Model,
            lightVisibility = this.lightVisibility.ToList(),
            sectorLimit = this._sectorLimit?.Model,
            valueOfNominalRange = this._valueOfNominalRange,
            sectorInformation = this.sectorInformation.ToList(),
            sectorArcExtension = this._sectorArcExtension,
        };

        public lightSectorViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            lightVisibility.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(lightVisibility));
            };
            sectorInformation.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(sectorInformation));
            };
        }
    }

    [CategoryOrder("sectorCharacteristics", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class sectorCharacteristicsViewModel : ViewModelBase
    {
        private lightCharacteristic _lightCharacteristic;
        [Category("sectorCharacteristics")]
        public lightCharacteristic lightCharacteristic
        {
            get
            {
                return _lightCharacteristic;
            }

            set
            {
                SetValue(ref _lightCharacteristic, value);
            }
        }

        [Category("sectorCharacteristics")]
        public ObservableCollection<lightSector> lightSector { get; set; } = new();

        [Category("sectorCharacteristics")]
        public ObservableCollection<String> signalGroup { get; set; } = new();

        private Decimal? _signalPeriod = default;
        [Category("sectorCharacteristics")]
        public Decimal? signalPeriod
        {
            get
            {
                return _signalPeriod;
            }

            set
            {
                SetValue(ref _signalPeriod, value);
            }
        }

        [Category("sectorCharacteristics")]
        public ObservableCollection<signalSequence> signalSequence { get; set; } = new();

        public void Load(DomainModel.S101.ComplexAttributes.sectorCharacteristics instance)
        {
            lightCharacteristic = instance.lightCharacteristic;
            lightSector.Clear();
            if (instance.lightSector is not null)
                foreach (var e in instance.lightSector)
                    lightSector.Add(e);
            signalGroup.Clear();
            if (instance.signalGroup is not null)
                foreach (var e in instance.signalGroup)
                    signalGroup.Add(e);
            signalPeriod = instance.signalPeriod;
            signalSequence.Clear();
            if (instance.signalSequence is not null)
                foreach (var e in instance.signalSequence)
                    signalSequence.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.ComplexAttributes.sectorCharacteristics
            {
                lightCharacteristic = this.lightCharacteristic,
                lightSector = this.lightSector.ToList(),
                signalGroup = this.signalGroup.ToList(),
                signalPeriod = this.signalPeriod,
                signalSequence = this.signalSequence.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.ComplexAttributes.sectorCharacteristics Model => new()
        {
            lightCharacteristic = this._lightCharacteristic,
            lightSector = this.lightSector.ToList(),
            signalGroup = this.signalGroup.ToList(),
            signalPeriod = this._signalPeriod,
            signalSequence = this.signalSequence.ToList(),
        };

        public sectorCharacteristicsViewModel() : base()
        {
            lightSector.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(lightSector));
            };
            signalGroup.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(signalGroup));
            };
            signalSequence.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(signalSequence));
            };
        }
    }

    [CategoryOrder("ContactDetails", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class ContactDetailsViewModel : ViewModelBase
    {
        private String _callSign = string.Empty;
        [Category("ContactDetails")]
        public String callSign
        {
            get
            {
                return _callSign;
            }

            set
            {
                SetValue(ref _callSign, value);
            }
        }

        [Category("ContactDetails")]
        public ObservableCollection<String> communicationChannel { get; set; } = new();

        private String _contactInstructions = string.Empty;
        [Category("ContactDetails")]
        public String contactInstructions
        {
            get
            {
                return _contactInstructions;
            }

            set
            {
                SetValue(ref _contactInstructions, value);
            }
        }

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("ContactDetails")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        [Category("ContactDetails")]
        public ObservableCollection<frequencyPair> frequencyPair { get; set; } = new();

        private String _mMSICode = string.Empty;
        [Category("ContactDetails")]
        public String mMSICode
        {
            get
            {
                return _mMSICode;
            }

            set
            {
                SetValue(ref _mMSICode, value);
            }
        }

        [Category("ContactDetails")]
        public ObservableCollection<onlineResource> onlineResource { get; set; } = new();

        [Category("ContactDetails")]
        public ObservableCollection<telecommunications> telecommunications { get; set; } = new();

        public class ContactDetailsRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails)];
        }

        public void Load(DomainModel.S101.InformationTypes.ContactDetails instance)
        {
            callSign = instance.callSign;
            communicationChannel.Clear();
            if (instance.communicationChannel is not null)
                foreach (var e in instance.communicationChannel)
                    communicationChannel.Add(e);
            contactInstructions = instance.contactInstructions;
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            frequencyPair.Clear();
            if (instance.frequencyPair is not null)
                foreach (var e in instance.frequencyPair)
                    frequencyPair.Add(e);
            mMSICode = instance.mMSICode;
            onlineResource.Clear();
            if (instance.onlineResource is not null)
                foreach (var e in instance.onlineResource)
                    onlineResource.Add(e);
            telecommunications.Clear();
            if (instance.telecommunications is not null)
                foreach (var e in instance.telecommunications)
                    telecommunications.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.InformationTypes.ContactDetails
            {
                callSign = this.callSign,
                communicationChannel = this.communicationChannel.ToList(),
                contactInstructions = this.contactInstructions,
                fixedDateRange = this.fixedDateRange?.Model,
                frequencyPair = this.frequencyPair.ToList(),
                mMSICode = this.mMSICode,
                onlineResource = this.onlineResource.ToList(),
                telecommunications = this.telecommunications.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.InformationTypes.ContactDetails Model => new()
        {
            callSign = this._callSign,
            communicationChannel = this.communicationChannel.ToList(),
            contactInstructions = this._contactInstructions,
            fixedDateRange = this._fixedDateRange?.Model,
            frequencyPair = this.frequencyPair.ToList(),
            mMSICode = this._mMSICode,
            onlineResource = this.onlineResource.ToList(),
            telecommunications = this.telecommunications.ToList(),
        };

        public ContactDetailsViewModel() : base()
        {
            communicationChannel.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(communicationChannel));
            };
            frequencyPair.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(frequencyPair));
            };
            onlineResource.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(onlineResource));
            };
            telecommunications.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(telecommunications));
            };
        }
    }

    [CategoryOrder("ServiceHours", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class ServiceHoursViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("ServiceHours")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        [Category("ServiceHours")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("ServiceHours")]
        public ObservableCollection<scheduleByDayOfWeek> scheduleByDayOfWeek { get; set; } = new();

        [Category("ServiceHours")]
        public ObservableCollection<information> information { get; set; } = new();

        public class ServiceHoursRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ServiceHours)];
        }

        public void Load(DomainModel.S101.InformationTypes.ServiceHours instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            scheduleByDayOfWeek.Clear();
            if (instance.scheduleByDayOfWeek is not null)
                foreach (var e in instance.scheduleByDayOfWeek)
                    scheduleByDayOfWeek.Add(e);
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.InformationTypes.ServiceHours
            {
                fixedDateRange = this.fixedDateRange?.Model,
                periodicDateRange = this.periodicDateRange.ToList(),
                scheduleByDayOfWeek = this.scheduleByDayOfWeek.ToList(),
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.InformationTypes.ServiceHours Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            periodicDateRange = this.periodicDateRange.ToList(),
            scheduleByDayOfWeek = this.scheduleByDayOfWeek.ToList(),
            information = this.information.ToList(),
        };

        public ServiceHoursViewModel() : base()
        {
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            scheduleByDayOfWeek.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(scheduleByDayOfWeek));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("NonStandardWorkingDay", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class NonStandardWorkingDayViewModel : ViewModelBase
    {
        [Category("NonStandardWorkingDay")]
        public ObservableCollection<DateOnly> dateFixed { get; set; } = new();

        [Category("NonStandardWorkingDay")]
        public ObservableCollection<String> dateVariable { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("NonStandardWorkingDay")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        [Category("NonStandardWorkingDay")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("NonStandardWorkingDay")]
        public ObservableCollection<information> information { get; set; } = new();

        public class NonStandardWorkingDayRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NonStandardWorkingDay)];
        }

        public void Load(DomainModel.S101.InformationTypes.NonStandardWorkingDay instance)
        {
            dateFixed.Clear();
            if (instance.dateFixed is not null)
                foreach (var e in instance.dateFixed)
                    dateFixed.Add(e);
            dateVariable.Clear();
            if (instance.dateVariable is not null)
                foreach (var e in instance.dateVariable)
                    dateVariable.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.InformationTypes.NonStandardWorkingDay
            {
                dateFixed = this.dateFixed.ToList(),
                dateVariable = this.dateVariable.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                periodicDateRange = this.periodicDateRange.ToList(),
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.InformationTypes.NonStandardWorkingDay Model => new()
        {
            dateFixed = this.dateFixed.ToList(),
            dateVariable = this.dateVariable.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            periodicDateRange = this.periodicDateRange.ToList(),
            information = this.information.ToList(),
        };

        public NonStandardWorkingDayViewModel() : base()
        {
            dateFixed.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(dateFixed));
            };
            dateVariable.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(dateVariable));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("NauticalInformation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class NauticalInformationViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("NauticalInformation")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        [Category("NauticalInformation")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("NauticalInformation")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("NauticalInformation")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class NauticalInformationRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public void Load(DomainModel.S101.InformationTypes.NauticalInformation instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.InformationTypes.NauticalInformation
            {
                fixedDateRange = this.fixedDateRange?.Model,
                periodicDateRange = this.periodicDateRange.ToList(),
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.InformationTypes.NauticalInformation Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            periodicDateRange = this.periodicDateRange.ToList(),
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public NauticalInformationViewModel() : base()
        {
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SpatialQuality", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SpatialQualityViewModel : ViewModelBase
    {
        private qualityOfHorizontalMeasurement? _qualityOfHorizontalMeasurement = default;
        [Category("SpatialQuality")]
        public qualityOfHorizontalMeasurement? qualityOfHorizontalMeasurement
        {
            get
            {
                return _qualityOfHorizontalMeasurement;
            }

            set
            {
                SetValue(ref _qualityOfHorizontalMeasurement, value);
            }
        }

        [Category("SpatialQuality")]
        public ObservableCollection<spatialAccuracy> spatialAccuracy { get; set; } = new();

        public class SpatialQualityRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SpatialQuality)];
        }

        public void Load(DomainModel.S101.InformationTypes.SpatialQuality instance)
        {
            qualityOfHorizontalMeasurement = instance.qualityOfHorizontalMeasurement;
            spatialAccuracy.Clear();
            if (instance.spatialAccuracy is not null)
                foreach (var e in instance.spatialAccuracy)
                    spatialAccuracy.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.InformationTypes.SpatialQuality
            {
                qualityOfHorizontalMeasurement = this.qualityOfHorizontalMeasurement,
                spatialAccuracy = this.spatialAccuracy.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.InformationTypes.SpatialQuality Model => new()
        {
            qualityOfHorizontalMeasurement = this._qualityOfHorizontalMeasurement,
            spatialAccuracy = this.spatialAccuracy.ToList(),
        };

        public SpatialQualityViewModel() : base()
        {
            spatialAccuracy.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(spatialAccuracy));
            };
        }
    }

    [CategoryOrder("QualityOfNonBathymetricData", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class QualityOfNonBathymetricDataViewModel : ViewModelBase
    {
        private categoryOfTemporalVariation? _categoryOfTemporalVariation = default;
        [Category("QualityOfNonBathymetricData")]
        public categoryOfTemporalVariation? categoryOfTemporalVariation
        {
            get
            {
                return _categoryOfTemporalVariation;
            }

            set
            {
                SetValue(ref _categoryOfTemporalVariation, value);
            }
        }

        private Decimal? _horizontalDistanceUncertainty = default;
        [Category("QualityOfNonBathymetricData")]
        public Decimal? horizontalDistanceUncertainty
        {
            get
            {
                return _horizontalDistanceUncertainty;
            }

            set
            {
                SetValue(ref _horizontalDistanceUncertainty, value);
            }
        }

        private horizontalPositionUncertaintyViewModel _horizontalPositionUncertainty;
        [Category("QualityOfNonBathymetricData")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public horizontalPositionUncertaintyViewModel horizontalPositionUncertainty
        {
            get
            {
                return _horizontalPositionUncertainty;
            }

            set
            {
                SetValue(ref _horizontalPositionUncertainty, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("QualityOfNonBathymetricData")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _orientationUncertainty = default;
        [Category("QualityOfNonBathymetricData")]
        public Decimal? orientationUncertainty
        {
            get
            {
                return _orientationUncertainty;
            }

            set
            {
                SetValue(ref _orientationUncertainty, value);
            }
        }

        private surveyDateRangeViewModel? _surveyDateRange;
        [Category("QualityOfNonBathymetricData")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public surveyDateRangeViewModel? surveyDateRange
        {
            get
            {
                return _surveyDateRange;
            }

            set
            {
                SetValue(ref _surveyDateRange, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("QualityOfNonBathymetricData")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        [Category("QualityOfNonBathymetricData")]
        public ObservableCollection<information> information { get; set; } = new();

        public class QualityOfNonBathymetricDataRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(QualityOfNonBathymetricData)];
        }

        public void Load(DomainModel.S101.FeatureTypes.QualityOfNonBathymetricData instance)
        {
            categoryOfTemporalVariation = instance.categoryOfTemporalVariation;
            horizontalDistanceUncertainty = instance.horizontalDistanceUncertainty;
            horizontalPositionUncertainty = new();
            if (instance.horizontalPositionUncertainty != null)
            {
                horizontalPositionUncertainty = new();
                horizontalPositionUncertainty.Load(instance.horizontalPositionUncertainty);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            orientationUncertainty = instance.orientationUncertainty;
            surveyDateRange = new();
            if (instance.surveyDateRange != null)
            {
                surveyDateRange = new();
                surveyDateRange.Load(instance.surveyDateRange);
            }

            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }

            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.QualityOfNonBathymetricData
            {
                categoryOfTemporalVariation = this.categoryOfTemporalVariation,
                horizontalDistanceUncertainty = this.horizontalDistanceUncertainty,
                horizontalPositionUncertainty = this.horizontalPositionUncertainty?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                orientationUncertainty = this.orientationUncertainty,
                surveyDateRange = this.surveyDateRange?.Model,
                verticalUncertainty = this.verticalUncertainty?.Model,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.QualityOfNonBathymetricData Model => new()
        {
            categoryOfTemporalVariation = this._categoryOfTemporalVariation,
            horizontalDistanceUncertainty = this._horizontalDistanceUncertainty,
            horizontalPositionUncertainty = this._horizontalPositionUncertainty?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            orientationUncertainty = this._orientationUncertainty,
            surveyDateRange = this._surveyDateRange?.Model,
            verticalUncertainty = this._verticalUncertainty?.Model,
            information = this.information.ToList(),
        };

        public QualityOfNonBathymetricDataViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("DataCoverage", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DataCoverageViewModel : ViewModelBase
    {
        private Int32? _drawingIndex = default;
        [Category("DataCoverage")]
        public Int32? drawingIndex
        {
            get
            {
                return _drawingIndex;
            }

            set
            {
                SetValue(ref _drawingIndex, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("DataCoverage")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32 _maximumDisplayScale;
        [Category("DataCoverage")]
        public Int32 maximumDisplayScale
        {
            get
            {
                return _maximumDisplayScale;
            }

            set
            {
                SetValue(ref _maximumDisplayScale, value);
            }
        }

        private Int32 _minimumDisplayScale;
        [Category("DataCoverage")]
        public Int32 minimumDisplayScale
        {
            get
            {
                return _minimumDisplayScale;
            }

            set
            {
                SetValue(ref _minimumDisplayScale, value);
            }
        }

        private Int32 _optimumDisplayScale;
        [Category("DataCoverage")]
        public Int32 optimumDisplayScale
        {
            get
            {
                return _optimumDisplayScale;
            }

            set
            {
                SetValue(ref _optimumDisplayScale, value);
            }
        }

        [Category("DataCoverage")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DataCoverageRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DataCoverage)];
        }

        public void Load(DomainModel.S101.FeatureTypes.DataCoverage instance)
        {
            drawingIndex = instance.drawingIndex;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            maximumDisplayScale = instance.maximumDisplayScale;
            minimumDisplayScale = instance.minimumDisplayScale;
            optimumDisplayScale = instance.optimumDisplayScale;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.DataCoverage
            {
                drawingIndex = this.drawingIndex,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                maximumDisplayScale = this.maximumDisplayScale,
                minimumDisplayScale = this.minimumDisplayScale,
                optimumDisplayScale = this.optimumDisplayScale,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.DataCoverage Model => new()
        {
            drawingIndex = this._drawingIndex,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            maximumDisplayScale = this._maximumDisplayScale,
            minimumDisplayScale = this._minimumDisplayScale,
            optimumDisplayScale = this._optimumDisplayScale,
            information = this.information.ToList(),
        };

        public DataCoverageViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("NavigationalSystemOfMarks", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class NavigationalSystemOfMarksViewModel : ViewModelBase
    {
        private marksNavigationalSystemOf _marksNavigationalSystemOf;
        [Category("NavigationalSystemOfMarks")]
        public marksNavigationalSystemOf marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("NavigationalSystemOfMarks")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("NavigationalSystemOfMarks")]
        public ObservableCollection<information> information { get; set; } = new();

        public class NavigationalSystemOfMarksRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NavigationalSystemOfMarks)];
        }

        public void Load(DomainModel.S101.FeatureTypes.NavigationalSystemOfMarks instance)
        {
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.NavigationalSystemOfMarks
            {
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.NavigationalSystemOfMarks Model => new()
        {
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            information = this.information.ToList(),
        };

        public NavigationalSystemOfMarksViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LocalDirectionOfBuoyage", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LocalDirectionOfBuoyageViewModel : ViewModelBase
    {
        private String _interoperabilityIdentifier = string.Empty;
        [Category("LocalDirectionOfBuoyage")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private marksNavigationalSystemOf _marksNavigationalSystemOf;
        [Category("LocalDirectionOfBuoyage")]
        public marksNavigationalSystemOf marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        private Decimal _orientationValue;
        [Category("LocalDirectionOfBuoyage")]
        public Decimal orientationValue
        {
            get
            {
                return _orientationValue;
            }

            set
            {
                SetValue(ref _orientationValue, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("LocalDirectionOfBuoyage")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LocalDirectionOfBuoyage")]
        public ObservableCollection<information> information { get; set; } = new();

        public class LocalDirectionOfBuoyageRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LocalDirectionOfBuoyage)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LocalDirectionOfBuoyage instance)
        {
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            orientationValue = instance.orientationValue;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LocalDirectionOfBuoyage
            {
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                orientationValue = this.orientationValue,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LocalDirectionOfBuoyage Model => new()
        {
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            orientationValue = this._orientationValue,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public LocalDirectionOfBuoyageViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("QualityOfBathymetricData", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class QualityOfBathymetricDataViewModel : ViewModelBase
    {
        private categoryOfTemporalVariation _categoryOfTemporalVariation;
        [Category("QualityOfBathymetricData")]
        public categoryOfTemporalVariation categoryOfTemporalVariation
        {
            get
            {
                return _categoryOfTemporalVariation;
            }

            set
            {
                SetValue(ref _categoryOfTemporalVariation, value);
            }
        }

        private dataAssessment _dataAssessment;
        [Category("QualityOfBathymetricData")]
        public dataAssessment dataAssessment
        {
            get
            {
                return _dataAssessment;
            }

            set
            {
                SetValue(ref _dataAssessment, value);
            }
        }

        private Decimal? _depthRangeMaximumValue = default;
        [Category("QualityOfBathymetricData")]
        public Decimal? depthRangeMaximumValue
        {
            get
            {
                return _depthRangeMaximumValue;
            }

            set
            {
                SetValue(ref _depthRangeMaximumValue, value);
            }
        }

        private Decimal? _depthRangeMinimumValue = default;
        [Category("QualityOfBathymetricData")]
        public Decimal? depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        private featuresDetectedViewModel _featuresDetected;
        [Category("QualityOfBathymetricData")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public featuresDetectedViewModel featuresDetected
        {
            get
            {
                return _featuresDetected;
            }

            set
            {
                SetValue(ref _featuresDetected, value);
            }
        }

        private Boolean _fullSeafloorCoverageAchieved;
        [Category("QualityOfBathymetricData")]
        public Boolean fullSeafloorCoverageAchieved
        {
            get
            {
                return _fullSeafloorCoverageAchieved;
            }

            set
            {
                SetValue(ref _fullSeafloorCoverageAchieved, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("QualityOfBathymetricData")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private surveyDateRangeViewModel? _surveyDateRange;
        [Category("QualityOfBathymetricData")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public surveyDateRangeViewModel? surveyDateRange
        {
            get
            {
                return _surveyDateRange;
            }

            set
            {
                SetValue(ref _surveyDateRange, value);
            }
        }

        [Category("QualityOfBathymetricData")]
        public ObservableCollection<zoneOfConfidence> zoneOfConfidence { get; set; } = new();

        [Category("QualityOfBathymetricData")]
        public ObservableCollection<information> information { get; set; } = new();

        public class QualityOfBathymetricDataRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(QualityOfBathymetricData)];
        }

        public void Load(DomainModel.S101.FeatureTypes.QualityOfBathymetricData instance)
        {
            categoryOfTemporalVariation = instance.categoryOfTemporalVariation;
            dataAssessment = instance.dataAssessment;
            depthRangeMaximumValue = instance.depthRangeMaximumValue;
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            featuresDetected = new();
            if (instance.featuresDetected != null)
            {
                featuresDetected = new();
                featuresDetected.Load(instance.featuresDetected);
            }

            fullSeafloorCoverageAchieved = instance.fullSeafloorCoverageAchieved;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            surveyDateRange = new();
            if (instance.surveyDateRange != null)
            {
                surveyDateRange = new();
                surveyDateRange.Load(instance.surveyDateRange);
            }

            zoneOfConfidence.Clear();
            if (instance.zoneOfConfidence is not null)
                foreach (var e in instance.zoneOfConfidence)
                    zoneOfConfidence.Add(e);
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.QualityOfBathymetricData
            {
                categoryOfTemporalVariation = this.categoryOfTemporalVariation,
                dataAssessment = this.dataAssessment,
                depthRangeMaximumValue = this.depthRangeMaximumValue,
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                featuresDetected = this.featuresDetected?.Model,
                fullSeafloorCoverageAchieved = this.fullSeafloorCoverageAchieved,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                surveyDateRange = this.surveyDateRange?.Model,
                zoneOfConfidence = this.zoneOfConfidence.ToList(),
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.QualityOfBathymetricData Model => new()
        {
            categoryOfTemporalVariation = this._categoryOfTemporalVariation,
            dataAssessment = this._dataAssessment,
            depthRangeMaximumValue = this._depthRangeMaximumValue,
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            featuresDetected = this._featuresDetected?.Model,
            fullSeafloorCoverageAchieved = this._fullSeafloorCoverageAchieved,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            surveyDateRange = this._surveyDateRange?.Model,
            zoneOfConfidence = this.zoneOfConfidence.ToList(),
            information = this.information.ToList(),
        };

        public QualityOfBathymetricDataViewModel() : base()
        {
            zoneOfConfidence.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(zoneOfConfidence));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SoundingDatum", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SoundingDatumViewModel : ViewModelBase
    {
        private String _interoperabilityIdentifier = string.Empty;
        [Category("SoundingDatum")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private verticalDatum _verticalDatum;
        [Category("SoundingDatum")]
        public verticalDatum verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        [Category("SoundingDatum")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SoundingDatumRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SoundingDatum)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SoundingDatum instance)
        {
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            verticalDatum = instance.verticalDatum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SoundingDatum
            {
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                verticalDatum = this.verticalDatum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SoundingDatum Model => new()
        {
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            verticalDatum = this._verticalDatum,
            information = this.information.ToList(),
        };

        public SoundingDatumViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("VerticalDatumOfData", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class VerticalDatumOfDataViewModel : ViewModelBase
    {
        private String _interoperabilityIdentifier = string.Empty;
        [Category("VerticalDatumOfData")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private verticalDatum _verticalDatum;
        [Category("VerticalDatumOfData")]
        public verticalDatum verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        [Category("VerticalDatumOfData")]
        public ObservableCollection<information> information { get; set; } = new();

        public class VerticalDatumOfDataRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(VerticalDatumOfData)];
        }

        public void Load(DomainModel.S101.FeatureTypes.VerticalDatumOfData instance)
        {
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            verticalDatum = instance.verticalDatum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.VerticalDatumOfData
            {
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                verticalDatum = this.verticalDatum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.VerticalDatumOfData Model => new()
        {
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            verticalDatum = this._verticalDatum,
            information = this.information.ToList(),
        };

        public VerticalDatumOfDataViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("QualityOfSurvey", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class QualityOfSurveyViewModel : ViewModelBase
    {
        private Decimal? _depthRangeMaximumValue = default;
        [Category("QualityOfSurvey")]
        public Decimal? depthRangeMaximumValue
        {
            get
            {
                return _depthRangeMaximumValue;
            }

            set
            {
                SetValue(ref _depthRangeMaximumValue, value);
            }
        }

        private Decimal? _depthRangeMinimumValue = default;
        [Category("QualityOfSurvey")]
        public Decimal? depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        private featuresDetectedViewModel? _featuresDetected;
        [Category("QualityOfSurvey")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public featuresDetectedViewModel? featuresDetected
        {
            get
            {
                return _featuresDetected;
            }

            set
            {
                SetValue(ref _featuresDetected, value);
            }
        }

        private Boolean? _fullSeafloorCoverageAchieved = default;
        [Category("QualityOfSurvey")]
        public Boolean? fullSeafloorCoverageAchieved
        {
            get
            {
                return _fullSeafloorCoverageAchieved;
            }

            set
            {
                SetValue(ref _fullSeafloorCoverageAchieved, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("QualityOfSurvey")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32? _lineSpacingMaximum = default;
        [Category("QualityOfSurvey")]
        public Int32? lineSpacingMaximum
        {
            get
            {
                return _lineSpacingMaximum;
            }

            set
            {
                SetValue(ref _lineSpacingMaximum, value);
            }
        }

        private Int32? _lineSpacingMinimum = default;
        [Category("QualityOfSurvey")]
        public Int32? lineSpacingMinimum
        {
            get
            {
                return _lineSpacingMinimum;
            }

            set
            {
                SetValue(ref _lineSpacingMinimum, value);
            }
        }

        private Int32? _measurementDistanceMaximum = default;
        [Category("QualityOfSurvey")]
        public Int32? measurementDistanceMaximum
        {
            get
            {
                return _measurementDistanceMaximum;
            }

            set
            {
                SetValue(ref _measurementDistanceMaximum, value);
            }
        }

        private Int32? _measurementDistanceMinimum = default;
        [Category("QualityOfSurvey")]
        public Int32? measurementDistanceMinimum
        {
            get
            {
                return _measurementDistanceMinimum;
            }

            set
            {
                SetValue(ref _measurementDistanceMinimum, value);
            }
        }

        private qualityOfHorizontalMeasurement? _qualityOfHorizontalMeasurement = default;
        [Category("QualityOfSurvey")]
        public qualityOfHorizontalMeasurement? qualityOfHorizontalMeasurement
        {
            get
            {
                return _qualityOfHorizontalMeasurement;
            }

            set
            {
                SetValue(ref _qualityOfHorizontalMeasurement, value);
            }
        }

        [Category("QualityOfSurvey")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        private Int32? _scaleValueMaximum = default;
        [Category("QualityOfSurvey")]
        public Int32? scaleValueMaximum
        {
            get
            {
                return _scaleValueMaximum;
            }

            set
            {
                SetValue(ref _scaleValueMaximum, value);
            }
        }

        private Int32? _scaleValueMinimum = default;
        [Category("QualityOfSurvey")]
        public Int32? scaleValueMinimum
        {
            get
            {
                return _scaleValueMinimum;
            }

            set
            {
                SetValue(ref _scaleValueMinimum, value);
            }
        }

        private String _surveyAuthority = string.Empty;
        [Category("QualityOfSurvey")]
        public String surveyAuthority
        {
            get
            {
                return _surveyAuthority;
            }

            set
            {
                SetValue(ref _surveyAuthority, value);
            }
        }

        private surveyDateRangeViewModel _surveyDateRange;
        [Category("QualityOfSurvey")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public surveyDateRangeViewModel surveyDateRange
        {
            get
            {
                return _surveyDateRange;
            }

            set
            {
                SetValue(ref _surveyDateRange, value);
            }
        }

        [Category("QualityOfSurvey")]
        public ObservableCollection<surveyType> surveyType { get; set; } = new();

        [Category("QualityOfSurvey")]
        public ObservableCollection<techniqueOfVerticalMeasurement> techniqueOfVerticalMeasurement { get; set; } = new();

        [Category("QualityOfSurvey")]
        public ObservableCollection<information> information { get; set; } = new();

        public class QualityOfSurveyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(QualityOfSurvey)];
        }

        public void Load(DomainModel.S101.FeatureTypes.QualityOfSurvey instance)
        {
            depthRangeMaximumValue = instance.depthRangeMaximumValue;
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            featuresDetected = new();
            if (instance.featuresDetected != null)
            {
                featuresDetected = new();
                featuresDetected.Load(instance.featuresDetected);
            }

            fullSeafloorCoverageAchieved = instance.fullSeafloorCoverageAchieved;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            lineSpacingMaximum = instance.lineSpacingMaximum;
            lineSpacingMinimum = instance.lineSpacingMinimum;
            measurementDistanceMaximum = instance.measurementDistanceMaximum;
            measurementDistanceMinimum = instance.measurementDistanceMinimum;
            qualityOfHorizontalMeasurement = instance.qualityOfHorizontalMeasurement;
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            scaleValueMaximum = instance.scaleValueMaximum;
            scaleValueMinimum = instance.scaleValueMinimum;
            surveyAuthority = instance.surveyAuthority;
            surveyDateRange = new();
            if (instance.surveyDateRange != null)
            {
                surveyDateRange = new();
                surveyDateRange.Load(instance.surveyDateRange);
            }

            surveyType.Clear();
            if (instance.surveyType is not null)
                foreach (var e in instance.surveyType)
                    surveyType.Add(e);
            techniqueOfVerticalMeasurement.Clear();
            if (instance.techniqueOfVerticalMeasurement is not null)
                foreach (var e in instance.techniqueOfVerticalMeasurement)
                    techniqueOfVerticalMeasurement.Add(e);
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.QualityOfSurvey
            {
                depthRangeMaximumValue = this.depthRangeMaximumValue,
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                featuresDetected = this.featuresDetected?.Model,
                fullSeafloorCoverageAchieved = this.fullSeafloorCoverageAchieved,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                lineSpacingMaximum = this.lineSpacingMaximum,
                lineSpacingMinimum = this.lineSpacingMinimum,
                measurementDistanceMaximum = this.measurementDistanceMaximum,
                measurementDistanceMinimum = this.measurementDistanceMinimum,
                qualityOfHorizontalMeasurement = this.qualityOfHorizontalMeasurement,
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                scaleValueMaximum = this.scaleValueMaximum,
                scaleValueMinimum = this.scaleValueMinimum,
                surveyAuthority = this.surveyAuthority,
                surveyDateRange = this.surveyDateRange?.Model,
                surveyType = this.surveyType.ToList(),
                techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.QualityOfSurvey Model => new()
        {
            depthRangeMaximumValue = this._depthRangeMaximumValue,
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            featuresDetected = this._featuresDetected?.Model,
            fullSeafloorCoverageAchieved = this._fullSeafloorCoverageAchieved,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            lineSpacingMaximum = this._lineSpacingMaximum,
            lineSpacingMinimum = this._lineSpacingMinimum,
            measurementDistanceMaximum = this._measurementDistanceMaximum,
            measurementDistanceMinimum = this._measurementDistanceMinimum,
            qualityOfHorizontalMeasurement = this._qualityOfHorizontalMeasurement,
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            scaleValueMaximum = this._scaleValueMaximum,
            scaleValueMinimum = this._scaleValueMinimum,
            surveyAuthority = this._surveyAuthority,
            surveyDateRange = this._surveyDateRange?.Model,
            surveyType = this.surveyType.ToList(),
            techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
            information = this.information.ToList(),
        };

        public QualityOfSurveyViewModel() : base()
        {
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            surveyType.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(surveyType));
            };
            techniqueOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(techniqueOfVerticalMeasurement));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("UpdateInformation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class UpdateInformationViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("UpdateInformation")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("UpdateInformation")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32 _updateNumber;
        [Category("UpdateInformation")]
        public Int32 updateNumber
        {
            get
            {
                return _updateNumber;
            }

            set
            {
                SetValue(ref _updateNumber, value);
            }
        }

        private updateType _updateType;
        [Category("UpdateInformation")]
        public updateType updateType
        {
            get
            {
                return _updateType;
            }

            set
            {
                SetValue(ref _updateType, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("UpdateInformation")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        private String _source = string.Empty;
        [Category("UpdateInformation")]
        public String source
        {
            get
            {
                return _source;
            }

            set
            {
                SetValue(ref _source, value);
            }
        }

        [Category("UpdateInformation")]
        public ObservableCollection<information> information { get; set; } = new();

        public class UpdateInformationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public void Load(DomainModel.S101.FeatureTypes.UpdateInformation instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            updateNumber = instance.updateNumber;
            updateType = instance.updateType;
            scaleMinimum = instance.scaleMinimum;
            source = instance.source;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.UpdateInformation
            {
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                updateNumber = this.updateNumber,
                updateType = this.updateType,
                scaleMinimum = this.scaleMinimum,
                source = this.source,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.UpdateInformation Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            updateNumber = this._updateNumber,
            updateType = this._updateType,
            scaleMinimum = this._scaleMinimum,
            source = this._source,
            information = this.information.ToList(),
        };

        public UpdateInformationViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("MagneticVariation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class MagneticVariationViewModel : ViewModelBase
    {
        private String _interoperabilityIdentifier = string.Empty;
        [Category("MagneticVariation")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private DateOnly _referenceYearForMagneticVariation;
        [Category("MagneticVariation")]
        public DateOnly referenceYearForMagneticVariation
        {
            get
            {
                return _referenceYearForMagneticVariation;
            }

            set
            {
                SetValue(ref _referenceYearForMagneticVariation, value);
            }
        }

        private Decimal _valueOfAnnualChangeInMagneticVariation;
        [Category("MagneticVariation")]
        public Decimal valueOfAnnualChangeInMagneticVariation
        {
            get
            {
                return _valueOfAnnualChangeInMagneticVariation;
            }

            set
            {
                SetValue(ref _valueOfAnnualChangeInMagneticVariation, value);
            }
        }

        private Decimal _valueOfMagneticVariation;
        [Category("MagneticVariation")]
        public Decimal valueOfMagneticVariation
        {
            get
            {
                return _valueOfMagneticVariation;
            }

            set
            {
                SetValue(ref _valueOfMagneticVariation, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("MagneticVariation")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("MagneticVariation")]
        public ObservableCollection<information> information { get; set; } = new();

        public class MagneticVariationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(MagneticVariation)];
        }

        public void Load(DomainModel.S101.FeatureTypes.MagneticVariation instance)
        {
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            referenceYearForMagneticVariation = instance.referenceYearForMagneticVariation;
            valueOfAnnualChangeInMagneticVariation = instance.valueOfAnnualChangeInMagneticVariation;
            valueOfMagneticVariation = instance.valueOfMagneticVariation;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.MagneticVariation
            {
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                referenceYearForMagneticVariation = this.referenceYearForMagneticVariation,
                valueOfAnnualChangeInMagneticVariation = this.valueOfAnnualChangeInMagneticVariation,
                valueOfMagneticVariation = this.valueOfMagneticVariation,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.MagneticVariation Model => new()
        {
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            referenceYearForMagneticVariation = this._referenceYearForMagneticVariation,
            valueOfAnnualChangeInMagneticVariation = this._valueOfAnnualChangeInMagneticVariation,
            valueOfMagneticVariation = this._valueOfMagneticVariation,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public MagneticVariationViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LocalMagneticAnomaly", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LocalMagneticAnomalyViewModel : ViewModelBase
    {
        [Category("LocalMagneticAnomaly")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LocalMagneticAnomaly")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("LocalMagneticAnomaly")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("LocalMagneticAnomaly")]
        public ObservableCollection<valueOfLocalMagneticAnomaly> valueOfLocalMagneticAnomaly { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("LocalMagneticAnomaly")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LocalMagneticAnomaly")]
        public ObservableCollection<information> information { get; set; } = new();

        public class LocalMagneticAnomalyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LocalMagneticAnomaly)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LocalMagneticAnomaly instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            reportedDate = instance.reportedDate;
            valueOfLocalMagneticAnomaly.Clear();
            if (instance.valueOfLocalMagneticAnomaly is not null)
                foreach (var e in instance.valueOfLocalMagneticAnomaly)
                    valueOfLocalMagneticAnomaly.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LocalMagneticAnomaly
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                reportedDate = this.reportedDate,
                valueOfLocalMagneticAnomaly = this.valueOfLocalMagneticAnomaly.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LocalMagneticAnomaly Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            reportedDate = this._reportedDate,
            valueOfLocalMagneticAnomaly = this.valueOfLocalMagneticAnomaly.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public LocalMagneticAnomalyViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            valueOfLocalMagneticAnomaly.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(valueOfLocalMagneticAnomaly));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Coastline", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CoastlineViewModel : ViewModelBase
    {
        private categoryOfCoastline? _categoryOfCoastline = default;
        [Category("Coastline")]
        public categoryOfCoastline? categoryOfCoastline
        {
            get
            {
                return _categoryOfCoastline;
            }

            set
            {
                SetValue(ref _categoryOfCoastline, value);
            }
        }

        [Category("Coastline")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private Decimal? _elevation = default;
        [Category("Coastline")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("Coastline")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Coastline")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Coastline")]
        public ObservableCollection<natureOfSurface> natureOfSurface { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("Coastline")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("Coastline")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        [Category("Coastline")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Coastline")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class CoastlineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Coastline)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Coastline instance)
        {
            categoryOfCoastline = instance.categoryOfCoastline;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfSurface.Clear();
            if (instance.natureOfSurface is not null)
                foreach (var e in instance.natureOfSurface)
                    natureOfSurface.Add(e);
            radarConspicuous = instance.radarConspicuous;
            visualProminence = instance.visualProminence;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Coastline
            {
                categoryOfCoastline = this.categoryOfCoastline,
                colour = this.colour.ToList(),
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfSurface = this.natureOfSurface.ToList(),
                radarConspicuous = this.radarConspicuous,
                visualProminence = this.visualProminence,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Coastline Model => new()
        {
            categoryOfCoastline = this._categoryOfCoastline,
            colour = this.colour.ToList(),
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfSurface = this.natureOfSurface.ToList(),
            radarConspicuous = this._radarConspicuous,
            visualProminence = this._visualProminence,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public CoastlineViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfSurface.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfSurface));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LandArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LandAreaViewModel : ViewModelBase
    {
        private condition? _condition = default;
        [Category("LandArea")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("LandArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LandArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("LandArea")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        private status? _status = default;
        [Category("LandArea")]
        public status? status
        {
            get
            {
                return _status;
            }

            set
            {
                SetValue(ref _status, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("LandArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LandArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class LandAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LandArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LandArea instance)
        {
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            reportedDate = instance.reportedDate;
            status = instance.status;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LandArea
            {
                condition = this.condition,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                reportedDate = this.reportedDate,
                status = this.status,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LandArea Model => new()
        {
            condition = this._condition,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            reportedDate = this._reportedDate,
            status = this._status,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public LandAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("IslandGroup", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class IslandGroupViewModel : ViewModelBase
    {
        [Category("IslandGroup")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("IslandGroup")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("IslandGroup")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("IslandGroup")]
        public ObservableCollection<information> information { get; set; } = new();

        public class IslandGroupRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(IslandGroup)];
        }

        public void Load(DomainModel.S101.FeatureTypes.IslandGroup instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.IslandGroup
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.IslandGroup Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public IslandGroupViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LandElevation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LandElevationViewModel : ViewModelBase
    {
        private Decimal _elevation;
        [Category("LandElevation")]
        public Decimal elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("LandElevation")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LandElevation")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("LandElevation")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("LandElevation")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LandElevation")]
        public ObservableCollection<information> information { get; set; } = new();

        public class LandElevationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LandElevation)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LandElevation instance)
        {
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LandElevation
            {
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LandElevation Model => new()
        {
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public LandElevationViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("River", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RiverViewModel : ViewModelBase
    {
        [Category("River")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("River")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private status? _status = default;
        [Category("River")]
        public status? status
        {
            get
            {
                return _status;
            }

            set
            {
                SetValue(ref _status, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("River")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("River")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RiverRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(River)];
        }

        public void Load(DomainModel.S101.FeatureTypes.River instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            status = instance.status;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.River
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                status = this.status,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.River Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            status = this._status,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RiverViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Rapids", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RapidsViewModel : ViewModelBase
    {
        [Category("Rapids")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Rapids")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("Rapids")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Rapids")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Rapids")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RapidsRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Rapids)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Rapids instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            verticalLength = instance.verticalLength;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Rapids
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                verticalLength = this.verticalLength,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Rapids Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            verticalLength = this._verticalLength,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RapidsViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Waterfall", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class WaterfallViewModel : ViewModelBase
    {
        [Category("Waterfall")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Waterfall")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("Waterfall")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("Waterfall")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Waterfall")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Waterfall")]
        public ObservableCollection<information> information { get; set; } = new();

        public class WaterfallRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Waterfall)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Waterfall instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Waterfall
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Waterfall Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public WaterfallViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Lake", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LakeViewModel : ViewModelBase
    {
        private Decimal? _elevation = default;
        [Category("Lake")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("Lake")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Lake")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private status? _status = default;
        [Category("Lake")]
        public status? status
        {
            get
            {
                return _status;
            }

            set
            {
                SetValue(ref _status, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Lake")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Lake")]
        public ObservableCollection<information> information { get; set; } = new();

        public class LakeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Lake)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Lake instance)
        {
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            status = instance.status;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Lake
            {
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                status = this.status,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Lake Model => new()
        {
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            status = this._status,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public LakeViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LandRegion", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LandRegionViewModel : ViewModelBase
    {
        [Category("LandRegion")]
        public ObservableCollection<categoryOfLandRegion> categoryOfLandRegion { get; set; } = new();

        [Category("LandRegion")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LandRegion")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("LandRegion")]
        public ObservableCollection<natureOfSurface> natureOfSurface { get; set; } = new();

        private waterLevelEffect? _waterLevelEffect = default;
        [Category("LandRegion")]
        public waterLevelEffect? waterLevelEffect
        {
            get
            {
                return _waterLevelEffect;
            }

            set
            {
                SetValue(ref _waterLevelEffect, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("LandRegion")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LandRegion")]
        public ObservableCollection<information> information { get; set; } = new();

        public class LandRegionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LandRegion)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LandRegion instance)
        {
            categoryOfLandRegion.Clear();
            if (instance.categoryOfLandRegion is not null)
                foreach (var e in instance.categoryOfLandRegion)
                    categoryOfLandRegion.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfSurface.Clear();
            if (instance.natureOfSurface is not null)
                foreach (var e in instance.natureOfSurface)
                    natureOfSurface.Add(e);
            waterLevelEffect = instance.waterLevelEffect;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LandRegion
            {
                categoryOfLandRegion = this.categoryOfLandRegion.ToList(),
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfSurface = this.natureOfSurface.ToList(),
                waterLevelEffect = this.waterLevelEffect,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LandRegion Model => new()
        {
            categoryOfLandRegion = this.categoryOfLandRegion.ToList(),
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfSurface = this.natureOfSurface.ToList(),
            waterLevelEffect = this._waterLevelEffect,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public LandRegionViewModel() : base()
        {
            categoryOfLandRegion.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfLandRegion));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfSurface.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfSurface));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Vegetation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class VegetationViewModel : ViewModelBase
    {
        private categoryOfVegetation _categoryOfVegetation;
        [Category("Vegetation")]
        public categoryOfVegetation categoryOfVegetation
        {
            get
            {
                return _categoryOfVegetation;
            }

            set
            {
                SetValue(ref _categoryOfVegetation, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("Vegetation")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("Vegetation")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private Decimal? _height = default;
        [Category("Vegetation")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Vegetation")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("Vegetation")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("Vegetation")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Vegetation")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Vegetation")]
        public ObservableCollection<information> information { get; set; } = new();

        public class VegetationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Vegetation)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Vegetation instance)
        {
            categoryOfVegetation = instance.categoryOfVegetation;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Vegetation
            {
                categoryOfVegetation = this.categoryOfVegetation,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Vegetation Model => new()
        {
            categoryOfVegetation = this._categoryOfVegetation,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public VegetationViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("IceArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class IceAreaViewModel : ViewModelBase
    {
        private categoryOfIce _categoryOfIce;
        [Category("IceArea")]
        public categoryOfIce categoryOfIce
        {
            get
            {
                return _categoryOfIce;
            }

            set
            {
                SetValue(ref _categoryOfIce, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("IceArea")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("IceArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private Decimal? _height = default;
        [Category("IceArea")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("IceArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("IceArea")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("IceArea")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("IceArea")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("IceArea")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("IceArea")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("IceArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("IceArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class IceAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(IceArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.IceArea instance)
        {
            categoryOfIce = instance.categoryOfIce;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.IceArea
            {
                categoryOfIce = this.categoryOfIce,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.IceArea Model => new()
        {
            categoryOfIce = this._categoryOfIce,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public IceAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SlopingGround", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SlopingGroundViewModel : ViewModelBase
    {
        private categoryOfSlope? _categoryOfSlope = default;
        [Category("SlopingGround")]
        public categoryOfSlope? categoryOfSlope
        {
            get
            {
                return _categoryOfSlope;
            }

            set
            {
                SetValue(ref _categoryOfSlope, value);
            }
        }

        [Category("SlopingGround")]
        public ObservableCollection<colour> colour { get; set; } = new();

        [Category("SlopingGround")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SlopingGround")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("SlopingGround")]
        public ObservableCollection<natureOfSurface> natureOfSurface { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("SlopingGround")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("SlopingGround")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("SlopingGround")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SlopingGround")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SlopingGroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SlopingGround)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SlopingGround instance)
        {
            categoryOfSlope = instance.categoryOfSlope;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfSurface.Clear();
            if (instance.natureOfSurface is not null)
                foreach (var e in instance.natureOfSurface)
                    natureOfSurface.Add(e);
            radarConspicuous = instance.radarConspicuous;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SlopingGround
            {
                categoryOfSlope = this.categoryOfSlope,
                colour = this.colour.ToList(),
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfSurface = this.natureOfSurface.ToList(),
                radarConspicuous = this.radarConspicuous,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SlopingGround Model => new()
        {
            categoryOfSlope = this._categoryOfSlope,
            colour = this.colour.ToList(),
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfSurface = this.natureOfSurface.ToList(),
            radarConspicuous = this._radarConspicuous,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SlopingGroundViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfSurface.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfSurface));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SlopeTopline", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SlopeToplineViewModel : ViewModelBase
    {
        private categoryOfSlope? _categoryOfSlope = default;
        [Category("SlopeTopline")]
        public categoryOfSlope? categoryOfSlope
        {
            get
            {
                return _categoryOfSlope;
            }

            set
            {
                SetValue(ref _categoryOfSlope, value);
            }
        }

        [Category("SlopeTopline")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private Decimal? _elevation = default;
        [Category("SlopeTopline")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("SlopeTopline")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SlopeTopline")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("SlopeTopline")]
        public ObservableCollection<natureOfSurface> natureOfSurface { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("SlopeTopline")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("SlopeTopline")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("SlopeTopline")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SlopeTopline")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SlopeToplineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SlopeTopline)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SlopeTopline instance)
        {
            categoryOfSlope = instance.categoryOfSlope;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfSurface.Clear();
            if (instance.natureOfSurface is not null)
                foreach (var e in instance.natureOfSurface)
                    natureOfSurface.Add(e);
            radarConspicuous = instance.radarConspicuous;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SlopeTopline
            {
                categoryOfSlope = this.categoryOfSlope,
                colour = this.colour.ToList(),
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfSurface = this.natureOfSurface.ToList(),
                radarConspicuous = this.radarConspicuous,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SlopeTopline Model => new()
        {
            categoryOfSlope = this._categoryOfSlope,
            colour = this.colour.ToList(),
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfSurface = this.natureOfSurface.ToList(),
            radarConspicuous = this._radarConspicuous,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SlopeToplineViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfSurface.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfSurface));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Tideway", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class TidewayViewModel : ViewModelBase
    {
        [Category("Tideway")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Tideway")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Tideway")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Tideway")]
        public ObservableCollection<information> information { get; set; } = new();

        public class TidewayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Tideway)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Tideway instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Tideway
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Tideway Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public TidewayViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("BuiltUpArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class BuiltUpAreaViewModel : ViewModelBase
    {
        private categoryOfBuiltUpArea? _categoryOfBuiltUpArea = default;
        [Category("BuiltUpArea")]
        public categoryOfBuiltUpArea? categoryOfBuiltUpArea
        {
            get
            {
                return _categoryOfBuiltUpArea;
            }

            set
            {
                SetValue(ref _categoryOfBuiltUpArea, value);
            }
        }

        private condition? _condition = default;
        [Category("BuiltUpArea")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("BuiltUpArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private Decimal? _height = default;
        [Category("BuiltUpArea")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("BuiltUpArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Boolean? _radarConspicuous = default;
        [Category("BuiltUpArea")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("BuiltUpArea")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("BuiltUpArea")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("BuiltUpArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("BuiltUpArea")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("BuiltUpArea")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        private Boolean? _inTheWater = default;
        [Category("BuiltUpArea")]
        public Boolean? inTheWater
        {
            get
            {
                return _inTheWater;
            }

            set
            {
                SetValue(ref _inTheWater, value);
            }
        }

        public class BuiltUpAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(BuiltUpArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.BuiltUpArea instance)
        {
            categoryOfBuiltUpArea = instance.categoryOfBuiltUpArea;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
            inTheWater = instance.inTheWater;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.BuiltUpArea
            {
                categoryOfBuiltUpArea = this.categoryOfBuiltUpArea,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
                inTheWater = this.inTheWater,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.BuiltUpArea Model => new()
        {
            categoryOfBuiltUpArea = this._categoryOfBuiltUpArea,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
            inTheWater = this._inTheWater,
        };

        public BuiltUpAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Building", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class BuildingViewModel : ViewModelBase
    {
        private buildingShape? _buildingShape = default;
        [Category("Building")]
        public buildingShape? buildingShape
        {
            get
            {
                return _buildingShape;
            }

            set
            {
                SetValue(ref _buildingShape, value);
            }
        }

        [Category("Building")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("Building")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("Building")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("Building")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("Building")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        [Category("Building")]
        public ObservableCollection<function> function { get; set; } = new();

        private Decimal? _height = default;
        [Category("Building")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Building")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private multiplicityOfFeaturesViewModel? _multiplicityOfFeatures;
        [Category("Building")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public multiplicityOfFeaturesViewModel? multiplicityOfFeatures
        {
            get
            {
                return _multiplicityOfFeatures;
            }

            set
            {
                SetValue(ref _multiplicityOfFeatures, value);
            }
        }

        [Category("Building")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("Building")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("Building")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Building")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("Building")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("Building")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Building")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Building")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Building")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        private Boolean? _inTheWater = default;
        [Category("Building")]
        public Boolean? inTheWater
        {
            get
            {
                return _inTheWater;
            }

            set
            {
                SetValue(ref _inTheWater, value);
            }
        }

        public class BuildingRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Building)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Building instance)
        {
            buildingShape = instance.buildingShape;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            function.Clear();
            if (instance.function is not null)
                foreach (var e in instance.function)
                    function.Add(e);
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            multiplicityOfFeatures = new();
            if (instance.multiplicityOfFeatures != null)
            {
                multiplicityOfFeatures = new();
                multiplicityOfFeatures.Load(instance.multiplicityOfFeatures);
            }

            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
            inTheWater = instance.inTheWater;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Building
            {
                buildingShape = this.buildingShape,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                function = this.function.ToList(),
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                multiplicityOfFeatures = this.multiplicityOfFeatures?.Model,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
                inTheWater = this.inTheWater,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Building Model => new()
        {
            buildingShape = this._buildingShape,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            function = this.function.ToList(),
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            multiplicityOfFeatures = this._multiplicityOfFeatures?.Model,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
            inTheWater = this._inTheWater,
        };

        public BuildingViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            function.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(function));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("AirportAirfield", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class AirportAirfieldViewModel : ViewModelBase
    {
        [Category("AirportAirfield")]
        public ObservableCollection<categoryOfAirportAirfield> categoryOfAirportAirfield { get; set; } = new();

        private condition? _condition = default;
        [Category("AirportAirfield")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("AirportAirfield")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("AirportAirfield")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("AirportAirfield")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("AirportAirfield")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("AirportAirfield")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("AirportAirfield")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("AirportAirfield")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class AirportAirfieldRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(AirportAirfield)];
        }

        public void Load(DomainModel.S101.FeatureTypes.AirportAirfield instance)
        {
            categoryOfAirportAirfield.Clear();
            if (instance.categoryOfAirportAirfield is not null)
                foreach (var e in instance.categoryOfAirportAirfield)
                    categoryOfAirportAirfield.Add(e);
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.AirportAirfield
            {
                categoryOfAirportAirfield = this.categoryOfAirportAirfield.ToList(),
                condition = this.condition,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.AirportAirfield Model => new()
        {
            categoryOfAirportAirfield = this.categoryOfAirportAirfield.ToList(),
            condition = this._condition,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public AirportAirfieldViewModel() : base()
        {
            categoryOfAirportAirfield.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfAirportAirfield));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Runway", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RunwayViewModel : ViewModelBase
    {
        private condition? _condition = default;
        [Category("Runway")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Runway")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Runway")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Runway")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("Runway")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("Runway")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Runway")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("Runway")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Runway")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RunwayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Runway)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Runway instance)
        {
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Runway
            {
                condition = this.condition,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Runway Model => new()
        {
            condition = this._condition,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RunwayViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Helipad", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class HelipadViewModel : ViewModelBase
    {
        private condition? _condition = default;
        [Category("Helipad")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Helipad")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Helipad")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Helipad")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("Helipad")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("Helipad")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Helipad")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("Helipad")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Helipad")]
        public ObservableCollection<information> information { get; set; } = new();

        public class HelipadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Helipad)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Helipad instance)
        {
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Helipad
            {
                condition = this.condition,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Helipad Model => new()
        {
            condition = this._condition,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public HelipadViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Bridge", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class BridgeViewModel : ViewModelBase
    {
        private bridgeConstruction? _bridgeConstruction = default;
        [Category("Bridge")]
        public bridgeConstruction? bridgeConstruction
        {
            get
            {
                return _bridgeConstruction;
            }

            set
            {
                SetValue(ref _bridgeConstruction, value);
            }
        }

        [Category("Bridge")]
        public ObservableCollection<bridgeFunction> bridgeFunction { get; set; } = new();

        private categoryOfOpeningBridge? _categoryOfOpeningBridge = default;
        [Category("Bridge")]
        public categoryOfOpeningBridge? categoryOfOpeningBridge
        {
            get
            {
                return _categoryOfOpeningBridge;
            }

            set
            {
                SetValue(ref _categoryOfOpeningBridge, value);
            }
        }

        [Category("Bridge")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("Bridge")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("Bridge")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Bridge")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Bridge")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("Bridge")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Bridge")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Bridge")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        private Boolean? _openingBridge = default;
        [Category("Bridge")]
        public Boolean? openingBridge
        {
            get
            {
                return _openingBridge;
            }

            set
            {
                SetValue(ref _openingBridge, value);
            }
        }

        private Boolean? _radarConspicuous = default;
        [Category("Bridge")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("Bridge")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Bridge")]
        public ObservableCollection<status> status { get; set; } = new();

        private visualProminence? _visualProminence = default;
        [Category("Bridge")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Bridge")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Bridge")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Bridge")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class BridgeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Bridge instance)
        {
            bridgeConstruction = instance.bridgeConstruction;
            bridgeFunction.Clear();
            if (instance.bridgeFunction is not null)
                foreach (var e in instance.bridgeFunction)
                    bridgeFunction.Add(e);
            categoryOfOpeningBridge = instance.categoryOfOpeningBridge;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            openingBridge = instance.openingBridge;
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Bridge
            {
                bridgeConstruction = this.bridgeConstruction,
                bridgeFunction = this.bridgeFunction.ToList(),
                categoryOfOpeningBridge = this.categoryOfOpeningBridge,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                openingBridge = this.openingBridge,
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Bridge Model => new()
        {
            bridgeConstruction = this._bridgeConstruction,
            bridgeFunction = this.bridgeFunction.ToList(),
            categoryOfOpeningBridge = this._categoryOfOpeningBridge,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            openingBridge = this._openingBridge,
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public BridgeViewModel() : base()
        {
            bridgeFunction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(bridgeFunction));
            };
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SpanFixed", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SpanFixedViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("SpanFixed")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private horizontalClearanceFixedViewModel? _horizontalClearanceFixed;
        [Category("SpanFixed")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public horizontalClearanceFixedViewModel? horizontalClearanceFixed
        {
            get
            {
                return _horizontalClearanceFixed;
            }

            set
            {
                SetValue(ref _horizontalClearanceFixed, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SpanFixed")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private verticalClearanceFixedViewModel _verticalClearanceFixed;
        [Category("SpanFixed")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalClearanceFixedViewModel verticalClearanceFixed
        {
            get
            {
                return _verticalClearanceFixed;
            }

            set
            {
                SetValue(ref _verticalClearanceFixed, value);
            }
        }

        private verticalDatum? _verticalDatum = default;
        [Category("SpanFixed")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("SpanFixed")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SpanFixed")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("SpanFixed")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class SpanFixedRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SpanFixed)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SpanFixed instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            horizontalClearanceFixed = new();
            if (instance.horizontalClearanceFixed != null)
            {
                horizontalClearanceFixed = new();
                horizontalClearanceFixed.Load(instance.horizontalClearanceFixed);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            verticalClearanceFixed = new();
            if (instance.verticalClearanceFixed != null)
            {
                verticalClearanceFixed = new();
                verticalClearanceFixed.Load(instance.verticalClearanceFixed);
            }

            verticalDatum = instance.verticalDatum;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SpanFixed
            {
                fixedDateRange = this.fixedDateRange?.Model,
                horizontalClearanceFixed = this.horizontalClearanceFixed?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                verticalClearanceFixed = this.verticalClearanceFixed?.Model,
                verticalDatum = this.verticalDatum,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SpanFixed Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            horizontalClearanceFixed = this._horizontalClearanceFixed?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            verticalClearanceFixed = this._verticalClearanceFixed?.Model,
            verticalDatum = this._verticalDatum,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public SpanFixedViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SpanOpening", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SpanOpeningViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("SpanOpening")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private horizontalClearanceFixedViewModel? _horizontalClearanceFixed;
        [Category("SpanOpening")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public horizontalClearanceFixedViewModel? horizontalClearanceFixed
        {
            get
            {
                return _horizontalClearanceFixed;
            }

            set
            {
                SetValue(ref _horizontalClearanceFixed, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SpanOpening")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private verticalClearanceClosedViewModel _verticalClearanceClosed;
        [Category("SpanOpening")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalClearanceClosedViewModel verticalClearanceClosed
        {
            get
            {
                return _verticalClearanceClosed;
            }

            set
            {
                SetValue(ref _verticalClearanceClosed, value);
            }
        }

        private verticalClearanceOpenViewModel _verticalClearanceOpen;
        [Category("SpanOpening")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalClearanceOpenViewModel verticalClearanceOpen
        {
            get
            {
                return _verticalClearanceOpen;
            }

            set
            {
                SetValue(ref _verticalClearanceOpen, value);
            }
        }

        private verticalDatum? _verticalDatum = default;
        [Category("SpanOpening")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("SpanOpening")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SpanOpening")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("SpanOpening")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class SpanOpeningRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SpanOpening)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SpanOpening instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            horizontalClearanceFixed = new();
            if (instance.horizontalClearanceFixed != null)
            {
                horizontalClearanceFixed = new();
                horizontalClearanceFixed.Load(instance.horizontalClearanceFixed);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            verticalClearanceClosed = new();
            if (instance.verticalClearanceClosed != null)
            {
                verticalClearanceClosed = new();
                verticalClearanceClosed.Load(instance.verticalClearanceClosed);
            }

            verticalClearanceOpen = new();
            if (instance.verticalClearanceOpen != null)
            {
                verticalClearanceOpen = new();
                verticalClearanceOpen.Load(instance.verticalClearanceOpen);
            }

            verticalDatum = instance.verticalDatum;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SpanOpening
            {
                fixedDateRange = this.fixedDateRange?.Model,
                horizontalClearanceFixed = this.horizontalClearanceFixed?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                verticalClearanceClosed = this.verticalClearanceClosed?.Model,
                verticalClearanceOpen = this.verticalClearanceOpen?.Model,
                verticalDatum = this.verticalDatum,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SpanOpening Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            horizontalClearanceFixed = this._horizontalClearanceFixed?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            verticalClearanceClosed = this._verticalClearanceClosed?.Model,
            verticalClearanceOpen = this._verticalClearanceOpen?.Model,
            verticalDatum = this._verticalDatum,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public SpanOpeningViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Conveyor", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class ConveyorViewModel : ViewModelBase
    {
        private categoryOfConveyor? _categoryOfConveyor = default;
        [Category("Conveyor")]
        public categoryOfConveyor? categoryOfConveyor
        {
            get
            {
                return _categoryOfConveyor;
            }

            set
            {
                SetValue(ref _categoryOfConveyor, value);
            }
        }

        [Category("Conveyor")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("Conveyor")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("Conveyor")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Conveyor")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Conveyor")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("Conveyor")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Conveyor")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _liftingCapacity = default;
        [Category("Conveyor")]
        public Decimal? liftingCapacity
        {
            get
            {
                return _liftingCapacity;
            }

            set
            {
                SetValue(ref _liftingCapacity, value);
            }
        }

        private multiplicityOfFeaturesViewModel? _multiplicityOfFeatures;
        [Category("Conveyor")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public multiplicityOfFeaturesViewModel? multiplicityOfFeatures
        {
            get
            {
                return _multiplicityOfFeatures;
            }

            set
            {
                SetValue(ref _multiplicityOfFeatures, value);
            }
        }

        [Category("Conveyor")]
        public ObservableCollection<product> product { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("Conveyor")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("Conveyor")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Conveyor")]
        public ObservableCollection<status> status { get; set; } = new();

        private verticalClearanceFixedViewModel? _verticalClearanceFixed;
        [Category("Conveyor")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalClearanceFixedViewModel? verticalClearanceFixed
        {
            get
            {
                return _verticalClearanceFixed;
            }

            set
            {
                SetValue(ref _verticalClearanceFixed, value);
            }
        }

        private verticalDatum? _verticalDatum = default;
        [Category("Conveyor")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("Conveyor")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("Conveyor")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Conveyor")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Conveyor")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Conveyor")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class ConveyorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Conveyor)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Conveyor instance)
        {
            categoryOfConveyor = instance.categoryOfConveyor;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            liftingCapacity = instance.liftingCapacity;
            multiplicityOfFeatures = new();
            if (instance.multiplicityOfFeatures != null)
            {
                multiplicityOfFeatures = new();
                multiplicityOfFeatures.Load(instance.multiplicityOfFeatures);
            }

            product.Clear();
            if (instance.product is not null)
                foreach (var e in instance.product)
                    product.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalClearanceFixed = new();
            if (instance.verticalClearanceFixed != null)
            {
                verticalClearanceFixed = new();
                verticalClearanceFixed.Load(instance.verticalClearanceFixed);
            }

            verticalDatum = instance.verticalDatum;
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Conveyor
            {
                categoryOfConveyor = this.categoryOfConveyor,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                liftingCapacity = this.liftingCapacity,
                multiplicityOfFeatures = this.multiplicityOfFeatures?.Model,
                product = this.product.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalClearanceFixed = this.verticalClearanceFixed?.Model,
                verticalDatum = this.verticalDatum,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Conveyor Model => new()
        {
            categoryOfConveyor = this._categoryOfConveyor,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            liftingCapacity = this._liftingCapacity,
            multiplicityOfFeatures = this._multiplicityOfFeatures?.Model,
            product = this.product.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalClearanceFixed = this._verticalClearanceFixed?.Model,
            verticalDatum = this._verticalDatum,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public ConveyorViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            product.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(product));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("CableOverhead", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CableOverheadViewModel : ViewModelBase
    {
        private categoryOfCable? _categoryOfCable = default;
        [Category("CableOverhead")]
        public categoryOfCable? categoryOfCable
        {
            get
            {
                return _categoryOfCable;
            }

            set
            {
                SetValue(ref _categoryOfCable, value);
            }
        }

        private condition? _condition = default;
        [Category("CableOverhead")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("CableOverhead")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _iceFactor = default;
        [Category("CableOverhead")]
        public Decimal? iceFactor
        {
            get
            {
                return _iceFactor;
            }

            set
            {
                SetValue(ref _iceFactor, value);
            }
        }

        [Category("CableOverhead")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("CableOverhead")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private multiplicityOfFeaturesViewModel? _multiplicityOfFeatures;
        [Category("CableOverhead")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public multiplicityOfFeaturesViewModel? multiplicityOfFeatures
        {
            get
            {
                return _multiplicityOfFeatures;
            }

            set
            {
                SetValue(ref _multiplicityOfFeatures, value);
            }
        }

        private Boolean? _radarConspicuous = default;
        [Category("CableOverhead")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("CableOverhead")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("CableOverhead")]
        public ObservableCollection<status> status { get; set; } = new();

        private verticalClearanceFixedViewModel? _verticalClearanceFixed;
        [Category("CableOverhead")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalClearanceFixedViewModel? verticalClearanceFixed
        {
            get
            {
                return _verticalClearanceFixed;
            }

            set
            {
                SetValue(ref _verticalClearanceFixed, value);
            }
        }

        private verticalClearanceSafeViewModel? _verticalClearanceSafe;
        [Category("CableOverhead")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalClearanceSafeViewModel? verticalClearanceSafe
        {
            get
            {
                return _verticalClearanceSafe;
            }

            set
            {
                SetValue(ref _verticalClearanceSafe, value);
            }
        }

        private verticalDatum? _verticalDatum = default;
        [Category("CableOverhead")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("CableOverhead")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("CableOverhead")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("CableOverhead")]
        public ObservableCollection<information> information { get; set; } = new();

        public class CableOverheadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CableOverhead)];
        }

        public void Load(DomainModel.S101.FeatureTypes.CableOverhead instance)
        {
            categoryOfCable = instance.categoryOfCable;
            condition = instance.condition;
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            iceFactor = instance.iceFactor;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            multiplicityOfFeatures = new();
            if (instance.multiplicityOfFeatures != null)
            {
                multiplicityOfFeatures = new();
                multiplicityOfFeatures.Load(instance.multiplicityOfFeatures);
            }

            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalClearanceFixed = new();
            if (instance.verticalClearanceFixed != null)
            {
                verticalClearanceFixed = new();
                verticalClearanceFixed.Load(instance.verticalClearanceFixed);
            }

            verticalClearanceSafe = new();
            if (instance.verticalClearanceSafe != null)
            {
                verticalClearanceSafe = new();
                verticalClearanceSafe.Load(instance.verticalClearanceSafe);
            }

            verticalDatum = instance.verticalDatum;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.CableOverhead
            {
                categoryOfCable = this.categoryOfCable,
                condition = this.condition,
                fixedDateRange = this.fixedDateRange?.Model,
                iceFactor = this.iceFactor,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                multiplicityOfFeatures = this.multiplicityOfFeatures?.Model,
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalClearanceFixed = this.verticalClearanceFixed?.Model,
                verticalClearanceSafe = this.verticalClearanceSafe?.Model,
                verticalDatum = this.verticalDatum,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.CableOverhead Model => new()
        {
            categoryOfCable = this._categoryOfCable,
            condition = this._condition,
            fixedDateRange = this._fixedDateRange?.Model,
            iceFactor = this._iceFactor,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            multiplicityOfFeatures = this._multiplicityOfFeatures?.Model,
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalClearanceFixed = this._verticalClearanceFixed?.Model,
            verticalClearanceSafe = this._verticalClearanceSafe?.Model,
            verticalDatum = this._verticalDatum,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public CableOverheadViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("PipelineOverhead", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class PipelineOverheadViewModel : ViewModelBase
    {
        private categoryOfPipelinePipe? _categoryOfPipelinePipe = default;
        [Category("PipelineOverhead")]
        public categoryOfPipelinePipe? categoryOfPipelinePipe
        {
            get
            {
                return _categoryOfPipelinePipe;
            }

            set
            {
                SetValue(ref _categoryOfPipelinePipe, value);
            }
        }

        private condition? _condition = default;
        [Category("PipelineOverhead")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("PipelineOverhead")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("PipelineOverhead")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("PipelineOverhead")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private multiplicityOfFeaturesViewModel? _multiplicityOfFeatures;
        [Category("PipelineOverhead")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public multiplicityOfFeaturesViewModel? multiplicityOfFeatures
        {
            get
            {
                return _multiplicityOfFeatures;
            }

            set
            {
                SetValue(ref _multiplicityOfFeatures, value);
            }
        }

        [Category("PipelineOverhead")]
        public ObservableCollection<product> product { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("PipelineOverhead")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("PipelineOverhead")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("PipelineOverhead")]
        public ObservableCollection<status> status { get; set; } = new();

        private verticalClearanceFixedViewModel? _verticalClearanceFixed;
        [Category("PipelineOverhead")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalClearanceFixedViewModel? verticalClearanceFixed
        {
            get
            {
                return _verticalClearanceFixed;
            }

            set
            {
                SetValue(ref _verticalClearanceFixed, value);
            }
        }

        private verticalDatum? _verticalDatum = default;
        [Category("PipelineOverhead")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("PipelineOverhead")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("PipelineOverhead")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("PipelineOverhead")]
        public ObservableCollection<information> information { get; set; } = new();

        public class PipelineOverheadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(PipelineOverhead)];
        }

        public void Load(DomainModel.S101.FeatureTypes.PipelineOverhead instance)
        {
            categoryOfPipelinePipe = instance.categoryOfPipelinePipe;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            multiplicityOfFeatures = new();
            if (instance.multiplicityOfFeatures != null)
            {
                multiplicityOfFeatures = new();
                multiplicityOfFeatures.Load(instance.multiplicityOfFeatures);
            }

            product.Clear();
            if (instance.product is not null)
                foreach (var e in instance.product)
                    product.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalClearanceFixed = new();
            if (instance.verticalClearanceFixed != null)
            {
                verticalClearanceFixed = new();
                verticalClearanceFixed.Load(instance.verticalClearanceFixed);
            }

            verticalDatum = instance.verticalDatum;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.PipelineOverhead
            {
                categoryOfPipelinePipe = this.categoryOfPipelinePipe,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                multiplicityOfFeatures = this.multiplicityOfFeatures?.Model,
                product = this.product.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalClearanceFixed = this.verticalClearanceFixed?.Model,
                verticalDatum = this.verticalDatum,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.PipelineOverhead Model => new()
        {
            categoryOfPipelinePipe = this._categoryOfPipelinePipe,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            multiplicityOfFeatures = this._multiplicityOfFeatures?.Model,
            product = this.product.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalClearanceFixed = this._verticalClearanceFixed?.Model,
            verticalDatum = this._verticalDatum,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public PipelineOverheadViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            product.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(product));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("PylonBridgeSupport", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class PylonBridgeSupportViewModel : ViewModelBase
    {
        private categoryOfPylon _categoryOfPylon;
        [Category("PylonBridgeSupport")]
        public categoryOfPylon categoryOfPylon
        {
            get
            {
                return _categoryOfPylon;
            }

            set
            {
                SetValue(ref _categoryOfPylon, value);
            }
        }

        [Category("PylonBridgeSupport")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("PylonBridgeSupport")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("PylonBridgeSupport")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("PylonBridgeSupport")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("PylonBridgeSupport")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("PylonBridgeSupport")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("PylonBridgeSupport")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private multiplicityOfFeaturesViewModel? _multiplicityOfFeatures;
        [Category("PylonBridgeSupport")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public multiplicityOfFeaturesViewModel? multiplicityOfFeatures
        {
            get
            {
                return _multiplicityOfFeatures;
            }

            set
            {
                SetValue(ref _multiplicityOfFeatures, value);
            }
        }

        [Category("PylonBridgeSupport")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("PylonBridgeSupport")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("PylonBridgeSupport")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("PylonBridgeSupport")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("PylonBridgeSupport")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("PylonBridgeSupport")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private waterLevelEffect? _waterLevelEffect = default;
        [Category("PylonBridgeSupport")]
        public waterLevelEffect? waterLevelEffect
        {
            get
            {
                return _waterLevelEffect;
            }

            set
            {
                SetValue(ref _waterLevelEffect, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("PylonBridgeSupport")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("PylonBridgeSupport")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("PylonBridgeSupport")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class PylonBridgeSupportRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(PylonBridgeSupport)];
        }

        public void Load(DomainModel.S101.FeatureTypes.PylonBridgeSupport instance)
        {
            categoryOfPylon = instance.categoryOfPylon;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            multiplicityOfFeatures = new();
            if (instance.multiplicityOfFeatures != null)
            {
                multiplicityOfFeatures = new();
                multiplicityOfFeatures.Load(instance.multiplicityOfFeatures);
            }

            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            waterLevelEffect = instance.waterLevelEffect;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.PylonBridgeSupport
            {
                categoryOfPylon = this.categoryOfPylon,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                multiplicityOfFeatures = this.multiplicityOfFeatures?.Model,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                waterLevelEffect = this.waterLevelEffect,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.PylonBridgeSupport Model => new()
        {
            categoryOfPylon = this._categoryOfPylon,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            multiplicityOfFeatures = this._multiplicityOfFeatures?.Model,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            waterLevelEffect = this._waterLevelEffect,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public PylonBridgeSupportViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("FenceWall", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class FenceWallViewModel : ViewModelBase
    {
        private categoryOfFence? _categoryOfFence = default;
        [Category("FenceWall")]
        public categoryOfFence? categoryOfFence
        {
            get
            {
                return _categoryOfFence;
            }

            set
            {
                SetValue(ref _categoryOfFence, value);
            }
        }

        [Category("FenceWall")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("FenceWall")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("FenceWall")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("FenceWall")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("FenceWall")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private Decimal? _height = default;
        [Category("FenceWall")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("FenceWall")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("FenceWall")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("FenceWall")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("FenceWall")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("FenceWall")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("FenceWall")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("FenceWall")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("FenceWall")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("FenceWall")]
        public ObservableCollection<information> information { get; set; } = new();

        public class FenceWallRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FenceWall)];
        }

        public void Load(DomainModel.S101.FeatureTypes.FenceWall instance)
        {
            categoryOfFence = instance.categoryOfFence;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.FenceWall
            {
                categoryOfFence = this.categoryOfFence,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.FenceWall Model => new()
        {
            categoryOfFence = this._categoryOfFence,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public FenceWallViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Railway", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RailwayViewModel : ViewModelBase
    {
        private condition? _condition = default;
        [Category("Railway")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Railway")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private Decimal? _height = default;
        [Category("Railway")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Railway")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("Railway")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Railway")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("Railway")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Railway")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RailwayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Railway)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Railway instance)
        {
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Railway
            {
                condition = this.condition,
                featureName = this.featureName.ToList(),
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Railway Model => new()
        {
            condition = this._condition,
            featureName = this.featureName.ToList(),
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RailwayViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Road", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RoadViewModel : ViewModelBase
    {
        private categoryOfRoad? _categoryOfRoad = default;
        [Category("Road")]
        public categoryOfRoad? categoryOfRoad
        {
            get
            {
                return _categoryOfRoad;
            }

            set
            {
                SetValue(ref _categoryOfRoad, value);
            }
        }

        private condition? _condition = default;
        [Category("Road")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Road")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Road")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Road")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("Road")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Road")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("Road")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Road")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RoadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Road)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Road instance)
        {
            categoryOfRoad = instance.categoryOfRoad;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Road
            {
                categoryOfRoad = this.categoryOfRoad,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Road Model => new()
        {
            categoryOfRoad = this._categoryOfRoad,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RoadViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Tunnel", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class TunnelViewModel : ViewModelBase
    {
        private condition? _condition = default;
        [Category("Tunnel")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Tunnel")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private horizontalClearanceFixedViewModel? _horizontalClearanceFixed;
        [Category("Tunnel")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public horizontalClearanceFixedViewModel? horizontalClearanceFixed
        {
            get
            {
                return _horizontalClearanceFixed;
            }

            set
            {
                SetValue(ref _horizontalClearanceFixed, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Tunnel")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("Tunnel")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Tunnel")]
        public ObservableCollection<status> status { get; set; } = new();

        private verticalClearanceFixedViewModel? _verticalClearanceFixed;
        [Category("Tunnel")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalClearanceFixedViewModel? verticalClearanceFixed
        {
            get
            {
                return _verticalClearanceFixed;
            }

            set
            {
                SetValue(ref _verticalClearanceFixed, value);
            }
        }

        private verticalDatum? _verticalDatum = default;
        [Category("Tunnel")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Tunnel")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Tunnel")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Tunnel")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class TunnelRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Tunnel)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Tunnel instance)
        {
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            horizontalClearanceFixed = new();
            if (instance.horizontalClearanceFixed != null)
            {
                horizontalClearanceFixed = new();
                horizontalClearanceFixed.Load(instance.horizontalClearanceFixed);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalClearanceFixed = new();
            if (instance.verticalClearanceFixed != null)
            {
                verticalClearanceFixed = new();
                verticalClearanceFixed.Load(instance.verticalClearanceFixed);
            }

            verticalDatum = instance.verticalDatum;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Tunnel
            {
                condition = this.condition,
                featureName = this.featureName.ToList(),
                horizontalClearanceFixed = this.horizontalClearanceFixed?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalClearanceFixed = this.verticalClearanceFixed?.Model,
                verticalDatum = this.verticalDatum,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Tunnel Model => new()
        {
            condition = this._condition,
            featureName = this.featureName.ToList(),
            horizontalClearanceFixed = this._horizontalClearanceFixed?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalClearanceFixed = this._verticalClearanceFixed?.Model,
            verticalDatum = this._verticalDatum,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public TunnelViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Landmark", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LandmarkViewModel : ViewModelBase
    {
        [Category("Landmark")]
        public ObservableCollection<categoryOfLandmark> categoryOfLandmark { get; set; } = new();

        [Category("Landmark")]
        public ObservableCollection<categoryOfSpecialPurposeMark> categoryOfSpecialPurposeMark { get; set; } = new();

        [Category("Landmark")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("Landmark")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("Landmark")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("Landmark")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("Landmark")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        [Category("Landmark")]
        public ObservableCollection<function> function { get; set; } = new();

        private Decimal? _height = default;
        [Category("Landmark")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Landmark")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private multiplicityOfFeaturesViewModel? _multiplicityOfFeatures;
        [Category("Landmark")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public multiplicityOfFeaturesViewModel? multiplicityOfFeatures
        {
            get
            {
                return _multiplicityOfFeatures;
            }

            set
            {
                SetValue(ref _multiplicityOfFeatures, value);
            }
        }

        [Category("Landmark")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("Landmark")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("Landmark")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Landmark")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("Landmark")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence _visualProminence;
        [Category("Landmark")]
        public visualProminence visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Landmark")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Landmark")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Landmark")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        private Boolean? _inTheWater = default;
        [Category("Landmark")]
        public Boolean? inTheWater
        {
            get
            {
                return _inTheWater;
            }

            set
            {
                SetValue(ref _inTheWater, value);
            }
        }

        public class LandmarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Landmark)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Landmark instance)
        {
            categoryOfLandmark.Clear();
            if (instance.categoryOfLandmark is not null)
                foreach (var e in instance.categoryOfLandmark)
                    categoryOfLandmark.Add(e);
            categoryOfSpecialPurposeMark.Clear();
            if (instance.categoryOfSpecialPurposeMark is not null)
                foreach (var e in instance.categoryOfSpecialPurposeMark)
                    categoryOfSpecialPurposeMark.Add(e);
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            function.Clear();
            if (instance.function is not null)
                foreach (var e in instance.function)
                    function.Add(e);
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            multiplicityOfFeatures = new();
            if (instance.multiplicityOfFeatures != null)
            {
                multiplicityOfFeatures = new();
                multiplicityOfFeatures.Load(instance.multiplicityOfFeatures);
            }

            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
            inTheWater = instance.inTheWater;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Landmark
            {
                categoryOfLandmark = this.categoryOfLandmark.ToList(),
                categoryOfSpecialPurposeMark = this.categoryOfSpecialPurposeMark.ToList(),
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                function = this.function.ToList(),
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                multiplicityOfFeatures = this.multiplicityOfFeatures?.Model,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
                inTheWater = this.inTheWater,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Landmark Model => new()
        {
            categoryOfLandmark = this.categoryOfLandmark.ToList(),
            categoryOfSpecialPurposeMark = this.categoryOfSpecialPurposeMark.ToList(),
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            function = this.function.ToList(),
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            multiplicityOfFeatures = this._multiplicityOfFeatures?.Model,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
            inTheWater = this._inTheWater,
        };

        public LandmarkViewModel() : base()
        {
            categoryOfLandmark.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfLandmark));
            };
            categoryOfSpecialPurposeMark.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfSpecialPurposeMark));
            };
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            function.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(function));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SiloTank", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SiloTankViewModel : ViewModelBase
    {
        private buildingShape? _buildingShape = default;
        [Category("SiloTank")]
        public buildingShape? buildingShape
        {
            get
            {
                return _buildingShape;
            }

            set
            {
                SetValue(ref _buildingShape, value);
            }
        }

        private categoryOfSiloTank? _categoryOfSiloTank = default;
        [Category("SiloTank")]
        public categoryOfSiloTank? categoryOfSiloTank
        {
            get
            {
                return _categoryOfSiloTank;
            }

            set
            {
                SetValue(ref _categoryOfSiloTank, value);
            }
        }

        [Category("SiloTank")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("SiloTank")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("SiloTank")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("SiloTank")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("SiloTank")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private Decimal? _height = default;
        [Category("SiloTank")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SiloTank")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private multiplicityOfFeaturesViewModel? _multiplicityOfFeatures;
        [Category("SiloTank")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public multiplicityOfFeaturesViewModel? multiplicityOfFeatures
        {
            get
            {
                return _multiplicityOfFeatures;
            }

            set
            {
                SetValue(ref _multiplicityOfFeatures, value);
            }
        }

        [Category("SiloTank")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("SiloTank")]
        public ObservableCollection<product> product { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("SiloTank")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("SiloTank")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("SiloTank")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("SiloTank")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("SiloTank")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("SiloTank")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SiloTank")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("SiloTank")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        private Boolean? _inTheWater = default;
        [Category("SiloTank")]
        public Boolean? inTheWater
        {
            get
            {
                return _inTheWater;
            }

            set
            {
                SetValue(ref _inTheWater, value);
            }
        }

        public class SiloTankRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SiloTank)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SiloTank instance)
        {
            buildingShape = instance.buildingShape;
            categoryOfSiloTank = instance.categoryOfSiloTank;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            multiplicityOfFeatures = new();
            if (instance.multiplicityOfFeatures != null)
            {
                multiplicityOfFeatures = new();
                multiplicityOfFeatures.Load(instance.multiplicityOfFeatures);
            }

            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            product.Clear();
            if (instance.product is not null)
                foreach (var e in instance.product)
                    product.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
            inTheWater = instance.inTheWater;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SiloTank
            {
                buildingShape = this.buildingShape,
                categoryOfSiloTank = this.categoryOfSiloTank,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                multiplicityOfFeatures = this.multiplicityOfFeatures?.Model,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                product = this.product.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
                inTheWater = this.inTheWater,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SiloTank Model => new()
        {
            buildingShape = this._buildingShape,
            categoryOfSiloTank = this._categoryOfSiloTank,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            multiplicityOfFeatures = this._multiplicityOfFeatures?.Model,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            product = this.product.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
            inTheWater = this._inTheWater,
        };

        public SiloTankViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            product.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(product));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("WindTurbine", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class WindTurbineViewModel : ViewModelBase
    {
        [Category("WindTurbine")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("WindTurbine")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("WindTurbine")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("WindTurbine")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("WindTurbine")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("WindTurbine")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("WindTurbine")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("WindTurbine")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private multiplicityOfFeaturesViewModel? _multiplicityOfFeatures;
        [Category("WindTurbine")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public multiplicityOfFeaturesViewModel? multiplicityOfFeatures
        {
            get
            {
                return _multiplicityOfFeatures;
            }

            set
            {
                SetValue(ref _multiplicityOfFeatures, value);
            }
        }

        [Category("WindTurbine")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("WindTurbine")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("WindTurbine")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("WindTurbine")]
        public ObservableCollection<status> status { get; set; } = new();

        private verticalClearanceFixedViewModel? _verticalClearanceFixed;
        [Category("WindTurbine")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalClearanceFixedViewModel? verticalClearanceFixed
        {
            get
            {
                return _verticalClearanceFixed;
            }

            set
            {
                SetValue(ref _verticalClearanceFixed, value);
            }
        }

        private verticalDatum? _verticalDatum = default;
        [Category("WindTurbine")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("WindTurbine")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("WindTurbine")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private waterLevelEffect? _waterLevelEffect = default;
        [Category("WindTurbine")]
        public waterLevelEffect? waterLevelEffect
        {
            get
            {
                return _waterLevelEffect;
            }

            set
            {
                SetValue(ref _waterLevelEffect, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("WindTurbine")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("WindTurbine")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("WindTurbine")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        private Boolean? _inTheWater = default;
        [Category("WindTurbine")]
        public Boolean? inTheWater
        {
            get
            {
                return _inTheWater;
            }

            set
            {
                SetValue(ref _inTheWater, value);
            }
        }

        public class WindTurbineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(WindTurbine)];
        }

        public void Load(DomainModel.S101.FeatureTypes.WindTurbine instance)
        {
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            multiplicityOfFeatures = new();
            if (instance.multiplicityOfFeatures != null)
            {
                multiplicityOfFeatures = new();
                multiplicityOfFeatures.Load(instance.multiplicityOfFeatures);
            }

            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalClearanceFixed = new();
            if (instance.verticalClearanceFixed != null)
            {
                verticalClearanceFixed = new();
                verticalClearanceFixed.Load(instance.verticalClearanceFixed);
            }

            verticalDatum = instance.verticalDatum;
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            waterLevelEffect = instance.waterLevelEffect;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
            inTheWater = instance.inTheWater;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.WindTurbine
            {
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                multiplicityOfFeatures = this.multiplicityOfFeatures?.Model,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalClearanceFixed = this.verticalClearanceFixed?.Model,
                verticalDatum = this.verticalDatum,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                waterLevelEffect = this.waterLevelEffect,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
                inTheWater = this.inTheWater,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.WindTurbine Model => new()
        {
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            multiplicityOfFeatures = this._multiplicityOfFeatures?.Model,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalClearanceFixed = this._verticalClearanceFixed?.Model,
            verticalDatum = this._verticalDatum,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            waterLevelEffect = this._waterLevelEffect,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
            inTheWater = this._inTheWater,
        };

        public WindTurbineViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("FortifiedStructure", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class FortifiedStructureViewModel : ViewModelBase
    {
        private categoryOfFortifiedStructure? _categoryOfFortifiedStructure = default;
        [Category("FortifiedStructure")]
        public categoryOfFortifiedStructure? categoryOfFortifiedStructure
        {
            get
            {
                return _categoryOfFortifiedStructure;
            }

            set
            {
                SetValue(ref _categoryOfFortifiedStructure, value);
            }
        }

        private condition? _condition = default;
        [Category("FortifiedStructure")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("FortifiedStructure")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private Decimal? _height = default;
        [Category("FortifiedStructure")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("FortifiedStructure")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("FortifiedStructure")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("FortifiedStructure")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("FortifiedStructure")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("FortifiedStructure")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("FortifiedStructure")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("FortifiedStructure")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("FortifiedStructure")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("FortifiedStructure")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("FortifiedStructure")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        private Boolean? _inTheWater = default;
        [Category("FortifiedStructure")]
        public Boolean? inTheWater
        {
            get
            {
                return _inTheWater;
            }

            set
            {
                SetValue(ref _inTheWater, value);
            }
        }

        public class FortifiedStructureRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FortifiedStructure)];
        }

        public void Load(DomainModel.S101.FeatureTypes.FortifiedStructure instance)
        {
            categoryOfFortifiedStructure = instance.categoryOfFortifiedStructure;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
            inTheWater = instance.inTheWater;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.FortifiedStructure
            {
                categoryOfFortifiedStructure = this.categoryOfFortifiedStructure,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
                inTheWater = this.inTheWater,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.FortifiedStructure Model => new()
        {
            categoryOfFortifiedStructure = this._categoryOfFortifiedStructure,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
            inTheWater = this._inTheWater,
        };

        public FortifiedStructureViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("ProductionStorageArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class ProductionStorageAreaViewModel : ViewModelBase
    {
        private categoryOfProductionArea _categoryOfProductionArea;
        [Category("ProductionStorageArea")]
        public categoryOfProductionArea categoryOfProductionArea
        {
            get
            {
                return _categoryOfProductionArea;
            }

            set
            {
                SetValue(ref _categoryOfProductionArea, value);
            }
        }

        private condition? _condition = default;
        [Category("ProductionStorageArea")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("ProductionStorageArea")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("ProductionStorageArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("ProductionStorageArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("ProductionStorageArea")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("ProductionStorageArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("ProductionStorageArea")]
        public ObservableCollection<product> product { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("ProductionStorageArea")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("ProductionStorageArea")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("ProductionStorageArea")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("ProductionStorageArea")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("ProductionStorageArea")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("ProductionStorageArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("ProductionStorageArea")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("ProductionStorageArea")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class ProductionStorageAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ProductionStorageArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.ProductionStorageArea instance)
        {
            categoryOfProductionArea = instance.categoryOfProductionArea;
            condition = instance.condition;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            product.Clear();
            if (instance.product is not null)
                foreach (var e in instance.product)
                    product.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.ProductionStorageArea
            {
                categoryOfProductionArea = this.categoryOfProductionArea,
                condition = this.condition,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                product = this.product.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.ProductionStorageArea Model => new()
        {
            categoryOfProductionArea = this._categoryOfProductionArea,
            condition = this._condition,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            product = this.product.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public ProductionStorageAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            product.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(product));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Checkpoint", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CheckpointViewModel : ViewModelBase
    {
        private categoryOfCheckpoint? _categoryOfCheckpoint = default;
        [Category("Checkpoint")]
        public categoryOfCheckpoint? categoryOfCheckpoint
        {
            get
            {
                return _categoryOfCheckpoint;
            }

            set
            {
                SetValue(ref _categoryOfCheckpoint, value);
            }
        }

        [Category("Checkpoint")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Checkpoint")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Checkpoint")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("Checkpoint")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Checkpoint")]
        public ObservableCollection<information> information { get; set; } = new();

        public class CheckpointRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Checkpoint)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Checkpoint instance)
        {
            categoryOfCheckpoint = instance.categoryOfCheckpoint;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Checkpoint
            {
                categoryOfCheckpoint = this.categoryOfCheckpoint,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Checkpoint Model => new()
        {
            categoryOfCheckpoint = this._categoryOfCheckpoint,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public CheckpointViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Hulk", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class HulkViewModel : ViewModelBase
    {
        [Category("Hulk")]
        public ObservableCollection<categoryOfHulk> categoryOfHulk { get; set; } = new();

        [Category("Hulk")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("Hulk")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("Hulk")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Hulk")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Hulk")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _horizontalLength = default;
        [Category("Hulk")]
        public Decimal? horizontalLength
        {
            get
            {
                return _horizontalLength;
            }

            set
            {
                SetValue(ref _horizontalLength, value);
            }
        }

        private Decimal? _horizontalWidth = default;
        [Category("Hulk")]
        public Decimal? horizontalWidth
        {
            get
            {
                return _horizontalWidth;
            }

            set
            {
                SetValue(ref _horizontalWidth, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Hulk")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Hulk")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("Hulk")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("Hulk")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("Hulk")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("Hulk")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Hulk")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Hulk")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Hulk")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class HulkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Hulk)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Hulk instance)
        {
            categoryOfHulk.Clear();
            if (instance.categoryOfHulk is not null)
                foreach (var e in instance.categoryOfHulk)
                    categoryOfHulk.Add(e);
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            horizontalLength = instance.horizontalLength;
            horizontalWidth = instance.horizontalWidth;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Hulk
            {
                categoryOfHulk = this.categoryOfHulk.ToList(),
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                horizontalLength = this.horizontalLength,
                horizontalWidth = this.horizontalWidth,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Hulk Model => new()
        {
            categoryOfHulk = this.categoryOfHulk.ToList(),
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            horizontalLength = this._horizontalLength,
            horizontalWidth = this._horizontalWidth,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public HulkViewModel() : base()
        {
            categoryOfHulk.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfHulk));
            };
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Pile", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class PileViewModel : ViewModelBase
    {
        private categoryOfPile? _categoryOfPile = default;
        [Category("Pile")]
        public categoryOfPile? categoryOfPile
        {
            get
            {
                return _categoryOfPile;
            }

            set
            {
                SetValue(ref _categoryOfPile, value);
            }
        }

        [Category("Pile")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("Pile")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("Pile")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Pile")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Pile")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("Pile")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Pile")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Boolean? _radarConspicuous = default;
        [Category("Pile")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("Pile")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Pile")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("Pile")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("Pile")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Pile")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Pile")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Pile")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class PileRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Pile)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Pile instance)
        {
            categoryOfPile = instance.categoryOfPile;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Pile
            {
                categoryOfPile = this.categoryOfPile,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Pile Model => new()
        {
            categoryOfPile = this._categoryOfPile,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public PileViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Dyke", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DykeViewModel : ViewModelBase
    {
        private condition? _condition = default;
        [Category("Dyke")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Dyke")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Dyke")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("Dyke")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Dyke")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Dyke")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("Dyke")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("Dyke")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("Dyke")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("Dyke")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Dyke")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Dyke")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DykeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Dyke)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Dyke instance)
        {
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Dyke
            {
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Dyke Model => new()
        {
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public DykeViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("ShorelineConstruction", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class ShorelineConstructionViewModel : ViewModelBase
    {
        private categoryOfShorelineConstruction? _categoryOfShorelineConstruction = default;
        [Category("ShorelineConstruction")]
        public categoryOfShorelineConstruction? categoryOfShorelineConstruction
        {
            get
            {
                return _categoryOfShorelineConstruction;
            }

            set
            {
                SetValue(ref _categoryOfShorelineConstruction, value);
            }
        }

        [Category("ShorelineConstruction")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("ShorelineConstruction")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("ShorelineConstruction")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("ShorelineConstruction")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("ShorelineConstruction")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("ShorelineConstruction")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private horizontalClearanceFixedViewModel? _horizontalClearanceFixed;
        [Category("ShorelineConstruction")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public horizontalClearanceFixedViewModel? horizontalClearanceFixed
        {
            get
            {
                return _horizontalClearanceFixed;
            }

            set
            {
                SetValue(ref _horizontalClearanceFixed, value);
            }
        }

        private Decimal? _horizontalLength = default;
        [Category("ShorelineConstruction")]
        public Decimal? horizontalLength
        {
            get
            {
                return _horizontalLength;
            }

            set
            {
                SetValue(ref _horizontalLength, value);
            }
        }

        private Decimal? _horizontalWidth = default;
        [Category("ShorelineConstruction")]
        public Decimal? horizontalWidth
        {
            get
            {
                return _horizontalWidth;
            }

            set
            {
                SetValue(ref _horizontalWidth, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("ShorelineConstruction")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("ShorelineConstruction")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("ShorelineConstruction")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("ShorelineConstruction")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("ShorelineConstruction")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("ShorelineConstruction")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("ShorelineConstruction")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private waterLevelEffect? _waterLevelEffect = default;
        [Category("ShorelineConstruction")]
        public waterLevelEffect? waterLevelEffect
        {
            get
            {
                return _waterLevelEffect;
            }

            set
            {
                SetValue(ref _waterLevelEffect, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("ShorelineConstruction")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("ShorelineConstruction")]
        public ObservableCollection<information> information { get; set; } = new();

        public class ShorelineConstructionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ShorelineConstruction)];
        }

        public void Load(DomainModel.S101.FeatureTypes.ShorelineConstruction instance)
        {
            categoryOfShorelineConstruction = instance.categoryOfShorelineConstruction;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            horizontalClearanceFixed = new();
            if (instance.horizontalClearanceFixed != null)
            {
                horizontalClearanceFixed = new();
                horizontalClearanceFixed.Load(instance.horizontalClearanceFixed);
            }

            horizontalLength = instance.horizontalLength;
            horizontalWidth = instance.horizontalWidth;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            waterLevelEffect = instance.waterLevelEffect;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.ShorelineConstruction
            {
                categoryOfShorelineConstruction = this.categoryOfShorelineConstruction,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                horizontalClearanceFixed = this.horizontalClearanceFixed?.Model,
                horizontalLength = this.horizontalLength,
                horizontalWidth = this.horizontalWidth,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                waterLevelEffect = this.waterLevelEffect,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.ShorelineConstruction Model => new()
        {
            categoryOfShorelineConstruction = this._categoryOfShorelineConstruction,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            horizontalClearanceFixed = this._horizontalClearanceFixed?.Model,
            horizontalLength = this._horizontalLength,
            horizontalWidth = this._horizontalWidth,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            waterLevelEffect = this._waterLevelEffect,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public ShorelineConstructionViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("StructureOverNavigableWater", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class StructureOverNavigableWaterViewModel : ViewModelBase
    {
        [Category("StructureOverNavigableWater")]
        public ObservableCollection<categoryOfStructure> categoryOfStructure { get; set; } = new();

        [Category("StructureOverNavigableWater")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("StructureOverNavigableWater")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("StructureOverNavigableWater")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("StructureOverNavigableWater")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("StructureOverNavigableWater")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("StructureOverNavigableWater")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private horizontalClearanceFixedViewModel _horizontalClearanceFixed;
        [Category("StructureOverNavigableWater")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public horizontalClearanceFixedViewModel horizontalClearanceFixed
        {
            get
            {
                return _horizontalClearanceFixed;
            }

            set
            {
                SetValue(ref _horizontalClearanceFixed, value);
            }
        }

        private Decimal? _horizontalLength = default;
        [Category("StructureOverNavigableWater")]
        public Decimal? horizontalLength
        {
            get
            {
                return _horizontalLength;
            }

            set
            {
                SetValue(ref _horizontalLength, value);
            }
        }

        private Decimal? _horizontalWidth = default;
        [Category("StructureOverNavigableWater")]
        public Decimal? horizontalWidth
        {
            get
            {
                return _horizontalWidth;
            }

            set
            {
                SetValue(ref _horizontalWidth, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("StructureOverNavigableWater")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("StructureOverNavigableWater")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("StructureOverNavigableWater")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private product? _product = default;
        [Category("StructureOverNavigableWater")]
        public product? product
        {
            get
            {
                return _product;
            }

            set
            {
                SetValue(ref _product, value);
            }
        }

        private Boolean? _radarConspicuous = default;
        [Category("StructureOverNavigableWater")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("StructureOverNavigableWater")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("StructureOverNavigableWater")]
        public ObservableCollection<status> status { get; set; } = new();

        private verticalClearanceFixedViewModel _verticalClearanceFixed;
        [Category("StructureOverNavigableWater")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalClearanceFixedViewModel verticalClearanceFixed
        {
            get
            {
                return _verticalClearanceFixed;
            }

            set
            {
                SetValue(ref _verticalClearanceFixed, value);
            }
        }

        private verticalDatum? _verticalDatum = default;
        [Category("StructureOverNavigableWater")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("StructureOverNavigableWater")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("StructureOverNavigableWater")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("StructureOverNavigableWater")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("StructureOverNavigableWater")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("StructureOverNavigableWater")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class StructureOverNavigableWaterRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(StructureOverNavigableWater)];
        }

        public void Load(DomainModel.S101.FeatureTypes.StructureOverNavigableWater instance)
        {
            categoryOfStructure.Clear();
            if (instance.categoryOfStructure is not null)
                foreach (var e in instance.categoryOfStructure)
                    categoryOfStructure.Add(e);
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            horizontalClearanceFixed = new();
            if (instance.horizontalClearanceFixed != null)
            {
                horizontalClearanceFixed = new();
                horizontalClearanceFixed.Load(instance.horizontalClearanceFixed);
            }

            horizontalLength = instance.horizontalLength;
            horizontalWidth = instance.horizontalWidth;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            product = instance.product;
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalClearanceFixed = new();
            if (instance.verticalClearanceFixed != null)
            {
                verticalClearanceFixed = new();
                verticalClearanceFixed.Load(instance.verticalClearanceFixed);
            }

            verticalDatum = instance.verticalDatum;
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.StructureOverNavigableWater
            {
                categoryOfStructure = this.categoryOfStructure.ToList(),
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                horizontalClearanceFixed = this.horizontalClearanceFixed?.Model,
                horizontalLength = this.horizontalLength,
                horizontalWidth = this.horizontalWidth,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                product = this.product,
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalClearanceFixed = this.verticalClearanceFixed?.Model,
                verticalDatum = this.verticalDatum,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.StructureOverNavigableWater Model => new()
        {
            categoryOfStructure = this.categoryOfStructure.ToList(),
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            horizontalClearanceFixed = this._horizontalClearanceFixed?.Model,
            horizontalLength = this._horizontalLength,
            horizontalWidth = this._horizontalWidth,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            product = this._product,
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalClearanceFixed = this._verticalClearanceFixed?.Model,
            verticalDatum = this._verticalDatum,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public StructureOverNavigableWaterViewModel() : base()
        {
            categoryOfStructure.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfStructure));
            };
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Causeway", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CausewayViewModel : ViewModelBase
    {
        private condition? _condition = default;
        [Category("Causeway")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Causeway")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Causeway")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Causeway")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("Causeway")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Causeway")]
        public ObservableCollection<status> status { get; set; } = new();

        private waterLevelEffect? _waterLevelEffect = default;
        [Category("Causeway")]
        public waterLevelEffect? waterLevelEffect
        {
            get
            {
                return _waterLevelEffect;
            }

            set
            {
                SetValue(ref _waterLevelEffect, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Causeway")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Causeway")]
        public ObservableCollection<information> information { get; set; } = new();

        public class CausewayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Causeway)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Causeway instance)
        {
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            waterLevelEffect = instance.waterLevelEffect;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Causeway
            {
                condition = this.condition,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                waterLevelEffect = this.waterLevelEffect,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Causeway Model => new()
        {
            condition = this._condition,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            waterLevelEffect = this._waterLevelEffect,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public CausewayViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Canal", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CanalViewModel : ViewModelBase
    {
        private categoryOfCanal? _categoryOfCanal = default;
        [Category("Canal")]
        public categoryOfCanal? categoryOfCanal
        {
            get
            {
                return _categoryOfCanal;
            }

            set
            {
                SetValue(ref _categoryOfCanal, value);
            }
        }

        private condition? _condition = default;
        [Category("Canal")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Canal")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Canal")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private horizontalClearanceFixedViewModel? _horizontalClearanceFixed;
        [Category("Canal")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public horizontalClearanceFixedViewModel? horizontalClearanceFixed
        {
            get
            {
                return _horizontalClearanceFixed;
            }

            set
            {
                SetValue(ref _horizontalClearanceFixed, value);
            }
        }

        private Decimal? _horizontalWidth = default;
        [Category("Canal")]
        public Decimal? horizontalWidth
        {
            get
            {
                return _horizontalWidth;
            }

            set
            {
                SetValue(ref _horizontalWidth, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Canal")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("Canal")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Canal")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("Canal")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Canal")]
        public ObservableCollection<information> information { get; set; } = new();

        public class CanalRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Canal)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Canal instance)
        {
            categoryOfCanal = instance.categoryOfCanal;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            horizontalClearanceFixed = new();
            if (instance.horizontalClearanceFixed != null)
            {
                horizontalClearanceFixed = new();
                horizontalClearanceFixed.Load(instance.horizontalClearanceFixed);
            }

            horizontalWidth = instance.horizontalWidth;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Canal
            {
                categoryOfCanal = this.categoryOfCanal,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                horizontalClearanceFixed = this.horizontalClearanceFixed?.Model,
                horizontalWidth = this.horizontalWidth,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Canal Model => new()
        {
            categoryOfCanal = this._categoryOfCanal,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            horizontalClearanceFixed = this._horizontalClearanceFixed?.Model,
            horizontalWidth = this._horizontalWidth,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public CanalViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("DistanceMark", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DistanceMarkViewModel : ViewModelBase
    {
        private Boolean _distanceMarkVisible;
        [Category("DistanceMark")]
        public Boolean distanceMarkVisible
        {
            get
            {
                return _distanceMarkVisible;
            }

            set
            {
                SetValue(ref _distanceMarkVisible, value);
            }
        }

        [Category("DistanceMark")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("DistanceMark")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("DistanceMark")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private measuredDistanceValueViewModel _measuredDistanceValue;
        [Category("DistanceMark")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public measuredDistanceValueViewModel measuredDistanceValue
        {
            get
            {
                return _measuredDistanceValue;
            }

            set
            {
                SetValue(ref _measuredDistanceValue, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("DistanceMark")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("DistanceMark")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DistanceMarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DistanceMark)];
        }

        public void Load(DomainModel.S101.FeatureTypes.DistanceMark instance)
        {
            distanceMarkVisible = instance.distanceMarkVisible;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            measuredDistanceValue = new();
            if (instance.measuredDistanceValue != null)
            {
                measuredDistanceValue = new();
                measuredDistanceValue.Load(instance.measuredDistanceValue);
            }

            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.DistanceMark
            {
                distanceMarkVisible = this.distanceMarkVisible,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                measuredDistanceValue = this.measuredDistanceValue?.Model,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.DistanceMark Model => new()
        {
            distanceMarkVisible = this._distanceMarkVisible,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            measuredDistanceValue = this._measuredDistanceValue?.Model,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public DistanceMarkViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Gate", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class GateViewModel : ViewModelBase
    {
        private categoryOfGate? _categoryOfGate = default;
        [Category("Gate")]
        public categoryOfGate? categoryOfGate
        {
            get
            {
                return _categoryOfGate;
            }

            set
            {
                SetValue(ref _categoryOfGate, value);
            }
        }

        private condition? _condition = default;
        [Category("Gate")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _depthRangeMinimumValue = default;
        [Category("Gate")]
        public Decimal? depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        [Category("Gate")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private horizontalClearanceOpenViewModel? _horizontalClearanceOpen;
        [Category("Gate")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public horizontalClearanceOpenViewModel? horizontalClearanceOpen
        {
            get
            {
                return _horizontalClearanceOpen;
            }

            set
            {
                SetValue(ref _horizontalClearanceOpen, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Gate")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Gate")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("Gate")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        [Category("Gate")]
        public ObservableCollection<status> status { get; set; } = new();

        private verticalClearanceOpenViewModel? _verticalClearanceOpen;
        [Category("Gate")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalClearanceOpenViewModel? verticalClearanceOpen
        {
            get
            {
                return _verticalClearanceOpen;
            }

            set
            {
                SetValue(ref _verticalClearanceOpen, value);
            }
        }

        private verticalDatum? _verticalDatum = default;
        [Category("Gate")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("Gate")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Gate")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Gate")]
        public ObservableCollection<information> information { get; set; } = new();

        public class GateRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Gate)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Gate instance)
        {
            categoryOfGate = instance.categoryOfGate;
            condition = instance.condition;
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            horizontalClearanceOpen = new();
            if (instance.horizontalClearanceOpen != null)
            {
                horizontalClearanceOpen = new();
                horizontalClearanceOpen.Load(instance.horizontalClearanceOpen);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalClearanceOpen = new();
            if (instance.verticalClearanceOpen != null)
            {
                verticalClearanceOpen = new();
                verticalClearanceOpen.Load(instance.verticalClearanceOpen);
            }

            verticalDatum = instance.verticalDatum;
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }

            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Gate
            {
                categoryOfGate = this.categoryOfGate,
                condition = this.condition,
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                featureName = this.featureName.ToList(),
                horizontalClearanceOpen = this.horizontalClearanceOpen?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                status = this.status.ToList(),
                verticalClearanceOpen = this.verticalClearanceOpen?.Model,
                verticalDatum = this.verticalDatum,
                verticalUncertainty = this.verticalUncertainty?.Model,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Gate Model => new()
        {
            categoryOfGate = this._categoryOfGate,
            condition = this._condition,
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            featureName = this.featureName.ToList(),
            horizontalClearanceOpen = this._horizontalClearanceOpen?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            status = this.status.ToList(),
            verticalClearanceOpen = this._verticalClearanceOpen?.Model,
            verticalDatum = this._verticalDatum,
            verticalUncertainty = this._verticalUncertainty?.Model,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public GateViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Dam", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DamViewModel : ViewModelBase
    {
        private categoryOfDam? _categoryOfDam = default;
        [Category("Dam")]
        public categoryOfDam? categoryOfDam
        {
            get
            {
                return _categoryOfDam;
            }

            set
            {
                SetValue(ref _categoryOfDam, value);
            }
        }

        [Category("Dam")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("Dam")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("Dam")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Dam")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Dam")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("Dam")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Dam")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Dam")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("Dam")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        [Category("Dam")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("Dam")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("Dam")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private waterLevelEffect? _waterLevelEffect = default;
        [Category("Dam")]
        public waterLevelEffect? waterLevelEffect
        {
            get
            {
                return _waterLevelEffect;
            }

            set
            {
                SetValue(ref _waterLevelEffect, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Dam")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Dam")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DamRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Dam)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Dam instance)
        {
            categoryOfDam = instance.categoryOfDam;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            radarConspicuous = instance.radarConspicuous;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            waterLevelEffect = instance.waterLevelEffect;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Dam
            {
                categoryOfDam = this.categoryOfDam,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                radarConspicuous = this.radarConspicuous,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                waterLevelEffect = this.waterLevelEffect,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Dam Model => new()
        {
            categoryOfDam = this._categoryOfDam,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            radarConspicuous = this._radarConspicuous,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            waterLevelEffect = this._waterLevelEffect,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public DamViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Crane", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CraneViewModel : ViewModelBase
    {
        private categoryOfCrane? _categoryOfCrane = default;
        [Category("Crane")]
        public categoryOfCrane? categoryOfCrane
        {
            get
            {
                return _categoryOfCrane;
            }

            set
            {
                SetValue(ref _categoryOfCrane, value);
            }
        }

        [Category("Crane")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("Crane")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("Crane")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Crane")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private Decimal? _height = default;
        [Category("Crane")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Crane")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _liftingCapacity = default;
        [Category("Crane")]
        public Decimal? liftingCapacity
        {
            get
            {
                return _liftingCapacity;
            }

            set
            {
                SetValue(ref _liftingCapacity, value);
            }
        }

        private orientationViewModel? _orientation;
        [Category("Crane")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public orientationViewModel? orientation
        {
            get
            {
                return _orientation;
            }

            set
            {
                SetValue(ref _orientation, value);
            }
        }

        private Boolean? _radarConspicuous = default;
        [Category("Crane")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private Decimal? _radius = default;
        [Category("Crane")]
        public Decimal? radius
        {
            get
            {
                return _radius;
            }

            set
            {
                SetValue(ref _radius, value);
            }
        }

        [Category("Crane")]
        public ObservableCollection<status> status { get; set; } = new();

        private verticalClearanceFixedViewModel? _verticalClearanceFixed;
        [Category("Crane")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalClearanceFixedViewModel? verticalClearanceFixed
        {
            get
            {
                return _verticalClearanceFixed;
            }

            set
            {
                SetValue(ref _verticalClearanceFixed, value);
            }
        }

        private verticalDatum? _verticalDatum = default;
        [Category("Crane")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("Crane")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("Crane")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Crane")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Crane")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Crane")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        private Boolean? _inTheWater = default;
        [Category("Crane")]
        public Boolean? inTheWater
        {
            get
            {
                return _inTheWater;
            }

            set
            {
                SetValue(ref _inTheWater, value);
            }
        }

        public class CraneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Crane)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Crane instance)
        {
            categoryOfCrane = instance.categoryOfCrane;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            liftingCapacity = instance.liftingCapacity;
            orientation = new();
            if (instance.orientation != null)
            {
                orientation = new();
                orientation.Load(instance.orientation);
            }

            radarConspicuous = instance.radarConspicuous;
            radius = instance.radius;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalClearanceFixed = new();
            if (instance.verticalClearanceFixed != null)
            {
                verticalClearanceFixed = new();
                verticalClearanceFixed.Load(instance.verticalClearanceFixed);
            }

            verticalDatum = instance.verticalDatum;
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
            inTheWater = instance.inTheWater;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Crane
            {
                categoryOfCrane = this.categoryOfCrane,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                liftingCapacity = this.liftingCapacity,
                orientation = this.orientation?.Model,
                radarConspicuous = this.radarConspicuous,
                radius = this.radius,
                status = this.status.ToList(),
                verticalClearanceFixed = this.verticalClearanceFixed?.Model,
                verticalDatum = this.verticalDatum,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
                inTheWater = this.inTheWater,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Crane Model => new()
        {
            categoryOfCrane = this._categoryOfCrane,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            liftingCapacity = this._liftingCapacity,
            orientation = this._orientation?.Model,
            radarConspicuous = this._radarConspicuous,
            radius = this._radius,
            status = this.status.ToList(),
            verticalClearanceFixed = this._verticalClearanceFixed?.Model,
            verticalDatum = this._verticalDatum,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
            inTheWater = this._inTheWater,
        };

        public CraneViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Berth", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class BerthViewModel : ViewModelBase
    {
        [Category("Berth")]
        public ObservableCollection<categoryOfCargo> categoryOfCargo { get; set; } = new();

        [Category("Berth")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Berth")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _horizontalClearanceLength = default;
        [Category("Berth")]
        public Decimal? horizontalClearanceLength
        {
            get
            {
                return _horizontalClearanceLength;
            }

            set
            {
                SetValue(ref _horizontalClearanceLength, value);
            }
        }

        private Decimal? _horizontalClearanceWidth = default;
        [Category("Berth")]
        public Decimal? horizontalClearanceWidth
        {
            get
            {
                return _horizontalClearanceWidth;
            }

            set
            {
                SetValue(ref _horizontalClearanceWidth, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Berth")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("Berth")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        private Decimal? _minimumBerthDepth = default;
        [Category("Berth")]
        public Decimal? minimumBerthDepth
        {
            get
            {
                return _minimumBerthDepth;
            }

            set
            {
                SetValue(ref _minimumBerthDepth, value);
            }
        }

        [Category("Berth")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("Berth")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        [Category("Berth")]
        public ObservableCollection<status> status { get; set; } = new();

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("Berth")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Berth")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Berth")]
        public ObservableCollection<information> information { get; set; } = new();

        public class BerthRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Berth)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Berth instance)
        {
            categoryOfCargo.Clear();
            if (instance.categoryOfCargo is not null)
                foreach (var e in instance.categoryOfCargo)
                    categoryOfCargo.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            horizontalClearanceLength = instance.horizontalClearanceLength;
            horizontalClearanceWidth = instance.horizontalClearanceWidth;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            minimumBerthDepth = instance.minimumBerthDepth;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }

            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Berth
            {
                categoryOfCargo = this.categoryOfCargo.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                horizontalClearanceLength = this.horizontalClearanceLength,
                horizontalClearanceWidth = this.horizontalClearanceWidth,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                maximumPermittedDraught = this.maximumPermittedDraught,
                minimumBerthDepth = this.minimumBerthDepth,
                periodicDateRange = this.periodicDateRange.ToList(),
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                status = this.status.ToList(),
                verticalUncertainty = this.verticalUncertainty?.Model,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Berth Model => new()
        {
            categoryOfCargo = this.categoryOfCargo.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            horizontalClearanceLength = this._horizontalClearanceLength,
            horizontalClearanceWidth = this._horizontalClearanceWidth,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            maximumPermittedDraught = this._maximumPermittedDraught,
            minimumBerthDepth = this._minimumBerthDepth,
            periodicDateRange = this.periodicDateRange.ToList(),
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            status = this.status.ToList(),
            verticalUncertainty = this._verticalUncertainty?.Model,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public BerthViewModel() : base()
        {
            categoryOfCargo.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfCargo));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Dolphin", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DolphinViewModel : ViewModelBase
    {
        [Category("Dolphin")]
        public ObservableCollection<categoryOfDolphin> categoryOfDolphin { get; set; } = new();

        [Category("Dolphin")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("Dolphin")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("Dolphin")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("Dolphin")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("Dolphin")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Dolphin")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("Dolphin")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Dolphin")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Dolphin")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("Dolphin")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("Dolphin")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("Dolphin")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Dolphin")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("Dolphin")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("Dolphin")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Dolphin")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Dolphin")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Dolphin")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class DolphinRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Dolphin)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Dolphin instance)
        {
            categoryOfDolphin.Clear();
            if (instance.categoryOfDolphin is not null)
                foreach (var e in instance.categoryOfDolphin)
                    categoryOfDolphin.Add(e);
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Dolphin
            {
                categoryOfDolphin = this.categoryOfDolphin.ToList(),
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Dolphin Model => new()
        {
            categoryOfDolphin = this.categoryOfDolphin.ToList(),
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public DolphinViewModel() : base()
        {
            categoryOfDolphin.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfDolphin));
            };
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Bollard", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class BollardViewModel : ViewModelBase
    {
        private condition? _condition = default;
        [Category("Bollard")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Bollard")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Bollard")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Bollard")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Bollard")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("Bollard")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Bollard")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("Bollard")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Bollard")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Bollard")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class BollardRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bollard)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Bollard instance)
        {
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Bollard
            {
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Bollard Model => new()
        {
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public BollardViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("DryDock", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DryDockViewModel : ViewModelBase
    {
        private condition? _condition = default;
        [Category("DryDock")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _depthRangeMinimumValue = default;
        [Category("DryDock")]
        public Decimal? depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("DryDock")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("DryDock")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("DryDock")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _horizontalClearanceLength = default;
        [Category("DryDock")]
        public Decimal? horizontalClearanceLength
        {
            get
            {
                return _horizontalClearanceLength;
            }

            set
            {
                SetValue(ref _horizontalClearanceLength, value);
            }
        }

        private Decimal? _horizontalClearanceWidth = default;
        [Category("DryDock")]
        public Decimal? horizontalClearanceWidth
        {
            get
            {
                return _horizontalClearanceWidth;
            }

            set
            {
                SetValue(ref _horizontalClearanceWidth, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("DryDock")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _horizontalLength = default;
        [Category("DryDock")]
        public Decimal? horizontalLength
        {
            get
            {
                return _horizontalLength;
            }

            set
            {
                SetValue(ref _horizontalLength, value);
            }
        }

        private Decimal? _horizontalWidth = default;
        [Category("DryDock")]
        public Decimal? horizontalWidth
        {
            get
            {
                return _horizontalWidth;
            }

            set
            {
                SetValue(ref _horizontalWidth, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("DryDock")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        [Category("DryDock")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        [Category("DryDock")]
        public ObservableCollection<status> status { get; set; } = new();

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("DryDock")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("DryDock")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("DryDock")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DryDockRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DryDock)];
        }

        public void Load(DomainModel.S101.FeatureTypes.DryDock instance)
        {
            condition = instance.condition;
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            horizontalClearanceLength = instance.horizontalClearanceLength;
            horizontalClearanceWidth = instance.horizontalClearanceWidth;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            horizontalLength = instance.horizontalLength;
            horizontalWidth = instance.horizontalWidth;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }

            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.DryDock
            {
                condition = this.condition,
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                horizontalClearanceLength = this.horizontalClearanceLength,
                horizontalClearanceWidth = this.horizontalClearanceWidth,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                horizontalLength = this.horizontalLength,
                horizontalWidth = this.horizontalWidth,
                maximumPermittedDraught = this.maximumPermittedDraught,
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                status = this.status.ToList(),
                verticalUncertainty = this.verticalUncertainty?.Model,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.DryDock Model => new()
        {
            condition = this._condition,
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            horizontalClearanceLength = this._horizontalClearanceLength,
            horizontalClearanceWidth = this._horizontalClearanceWidth,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            horizontalLength = this._horizontalLength,
            horizontalWidth = this._horizontalWidth,
            maximumPermittedDraught = this._maximumPermittedDraught,
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            status = this.status.ToList(),
            verticalUncertainty = this._verticalUncertainty?.Model,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public DryDockViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("FloatingDock", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class FloatingDockViewModel : ViewModelBase
    {
        [Category("FloatingDock")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("FloatingDock")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("FloatingDock")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _depthRangeMinimumValue = default;
        [Category("FloatingDock")]
        public Decimal? depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        [Category("FloatingDock")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("FloatingDock")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _horizontalClearanceLength = default;
        [Category("FloatingDock")]
        public Decimal? horizontalClearanceLength
        {
            get
            {
                return _horizontalClearanceLength;
            }

            set
            {
                SetValue(ref _horizontalClearanceLength, value);
            }
        }

        private Decimal? _horizontalClearanceWidth = default;
        [Category("FloatingDock")]
        public Decimal? horizontalClearanceWidth
        {
            get
            {
                return _horizontalClearanceWidth;
            }

            set
            {
                SetValue(ref _horizontalClearanceWidth, value);
            }
        }

        private Decimal? _horizontalLength = default;
        [Category("FloatingDock")]
        public Decimal? horizontalLength
        {
            get
            {
                return _horizontalLength;
            }

            set
            {
                SetValue(ref _horizontalLength, value);
            }
        }

        private Decimal? _horizontalWidth = default;
        [Category("FloatingDock")]
        public Decimal? horizontalWidth
        {
            get
            {
                return _horizontalWidth;
            }

            set
            {
                SetValue(ref _horizontalWidth, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("FloatingDock")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _liftingCapacity = default;
        [Category("FloatingDock")]
        public Decimal? liftingCapacity
        {
            get
            {
                return _liftingCapacity;
            }

            set
            {
                SetValue(ref _liftingCapacity, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("FloatingDock")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        private Boolean? _radarConspicuous = default;
        [Category("FloatingDock")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        [Category("FloatingDock")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("FloatingDock")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("FloatingDock")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("FloatingDock")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("FloatingDock")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("FloatingDock")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class FloatingDockRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FloatingDock)];
        }

        public void Load(DomainModel.S101.FeatureTypes.FloatingDock instance)
        {
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            horizontalClearanceLength = instance.horizontalClearanceLength;
            horizontalClearanceWidth = instance.horizontalClearanceWidth;
            horizontalLength = instance.horizontalLength;
            horizontalWidth = instance.horizontalWidth;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            liftingCapacity = instance.liftingCapacity;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            radarConspicuous = instance.radarConspicuous;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.FloatingDock
            {
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                horizontalClearanceLength = this.horizontalClearanceLength,
                horizontalClearanceWidth = this.horizontalClearanceWidth,
                horizontalLength = this.horizontalLength,
                horizontalWidth = this.horizontalWidth,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                liftingCapacity = this.liftingCapacity,
                maximumPermittedDraught = this.maximumPermittedDraught,
                radarConspicuous = this.radarConspicuous,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.FloatingDock Model => new()
        {
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            horizontalClearanceLength = this._horizontalClearanceLength,
            horizontalClearanceWidth = this._horizontalClearanceWidth,
            horizontalLength = this._horizontalLength,
            horizontalWidth = this._horizontalWidth,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            liftingCapacity = this._liftingCapacity,
            maximumPermittedDraught = this._maximumPermittedDraught,
            radarConspicuous = this._radarConspicuous,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public FloatingDockViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Pontoon", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class PontoonViewModel : ViewModelBase
    {
        private condition? _condition = default;
        [Category("Pontoon")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("Pontoon")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Pontoon")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Pontoon")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Pontoon")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("Pontoon")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        [Category("Pontoon")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("Pontoon")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("Pontoon")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Pontoon")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Pontoon")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Pontoon")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class PontoonRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Pontoon)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Pontoon instance)
        {
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Pontoon
            {
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Pontoon Model => new()
        {
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public PontoonViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("DockArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DockAreaViewModel : ViewModelBase
    {
        private categoryOfDock? _categoryOfDock = default;
        [Category("DockArea")]
        public categoryOfDock? categoryOfDock
        {
            get
            {
                return _categoryOfDock;
            }

            set
            {
                SetValue(ref _categoryOfDock, value);
            }
        }

        private condition? _condition = default;
        [Category("DockArea")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("DockArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("DockArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        [Category("DockArea")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private horizontalClearanceFixedViewModel? _horizontalClearanceFixed;
        [Category("DockArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public horizontalClearanceFixedViewModel? horizontalClearanceFixed
        {
            get
            {
                return _horizontalClearanceFixed;
            }

            set
            {
                SetValue(ref _horizontalClearanceFixed, value);
            }
        }

        private Decimal? _horizontalClearanceLength = default;
        [Category("DockArea")]
        public Decimal? horizontalClearanceLength
        {
            get
            {
                return _horizontalClearanceLength;
            }

            set
            {
                SetValue(ref _horizontalClearanceLength, value);
            }
        }

        private Decimal? _horizontalClearanceWidth = default;
        [Category("DockArea")]
        public Decimal? horizontalClearanceWidth
        {
            get
            {
                return _horizontalClearanceWidth;
            }

            set
            {
                SetValue(ref _horizontalClearanceWidth, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("DockArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("DockArea")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        [Category("DockArea")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("DockArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("DockArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DockAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DockArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.DockArea instance)
        {
            categoryOfDock = instance.categoryOfDock;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            horizontalClearanceFixed = new();
            if (instance.horizontalClearanceFixed != null)
            {
                horizontalClearanceFixed = new();
                horizontalClearanceFixed.Load(instance.horizontalClearanceFixed);
            }

            horizontalClearanceLength = instance.horizontalClearanceLength;
            horizontalClearanceWidth = instance.horizontalClearanceWidth;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.DockArea
            {
                categoryOfDock = this.categoryOfDock,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                periodicDateRange = this.periodicDateRange.ToList(),
                horizontalClearanceFixed = this.horizontalClearanceFixed?.Model,
                horizontalClearanceLength = this.horizontalClearanceLength,
                horizontalClearanceWidth = this.horizontalClearanceWidth,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                maximumPermittedDraught = this.maximumPermittedDraught,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.DockArea Model => new()
        {
            categoryOfDock = this._categoryOfDock,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            periodicDateRange = this.periodicDateRange.ToList(),
            horizontalClearanceFixed = this._horizontalClearanceFixed?.Model,
            horizontalClearanceLength = this._horizontalClearanceLength,
            horizontalClearanceWidth = this._horizontalClearanceWidth,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            maximumPermittedDraught = this._maximumPermittedDraught,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public DockAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Gridiron", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class GridironViewModel : ViewModelBase
    {
        [Category("Gridiron")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private Decimal? _horizontalLength = default;
        [Category("Gridiron")]
        public Decimal? horizontalLength
        {
            get
            {
                return _horizontalLength;
            }

            set
            {
                SetValue(ref _horizontalLength, value);
            }
        }

        private Decimal? _horizontalWidth = default;
        [Category("Gridiron")]
        public Decimal? horizontalWidth
        {
            get
            {
                return _horizontalWidth;
            }

            set
            {
                SetValue(ref _horizontalWidth, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Gridiron")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Gridiron")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("Gridiron")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("Gridiron")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private waterLevelEffect? _waterLevelEffect = default;
        [Category("Gridiron")]
        public waterLevelEffect? waterLevelEffect
        {
            get
            {
                return _waterLevelEffect;
            }

            set
            {
                SetValue(ref _waterLevelEffect, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Gridiron")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Gridiron")]
        public ObservableCollection<information> information { get; set; } = new();

        public class GridironRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Gridiron)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Gridiron instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            horizontalLength = instance.horizontalLength;
            horizontalWidth = instance.horizontalWidth;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            waterLevelEffect = instance.waterLevelEffect;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Gridiron
            {
                featureName = this.featureName.ToList(),
                horizontalLength = this.horizontalLength,
                horizontalWidth = this.horizontalWidth,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                waterLevelEffect = this.waterLevelEffect,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Gridiron Model => new()
        {
            featureName = this.featureName.ToList(),
            horizontalLength = this._horizontalLength,
            horizontalWidth = this._horizontalWidth,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            waterLevelEffect = this._waterLevelEffect,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public GridironViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LockBasin", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LockBasinViewModel : ViewModelBase
    {
        [Category("LockBasin")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("LockBasin")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        [Category("LockBasin")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private horizontalClearanceFixedViewModel? _horizontalClearanceFixed;
        [Category("LockBasin")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public horizontalClearanceFixedViewModel? horizontalClearanceFixed
        {
            get
            {
                return _horizontalClearanceFixed;
            }

            set
            {
                SetValue(ref _horizontalClearanceFixed, value);
            }
        }

        private Decimal? _horizontalLength = default;
        [Category("LockBasin")]
        public Decimal? horizontalLength
        {
            get
            {
                return _horizontalLength;
            }

            set
            {
                SetValue(ref _horizontalLength, value);
            }
        }

        private Decimal? _horizontalWidth = default;
        [Category("LockBasin")]
        public Decimal? horizontalWidth
        {
            get
            {
                return _horizontalWidth;
            }

            set
            {
                SetValue(ref _horizontalWidth, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LockBasin")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("LockBasin")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("LockBasin")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LockBasin")]
        public ObservableCollection<information> information { get; set; } = new();

        public class LockBasinRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LockBasin)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LockBasin instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            horizontalClearanceFixed = new();
            if (instance.horizontalClearanceFixed != null)
            {
                horizontalClearanceFixed = new();
                horizontalClearanceFixed.Load(instance.horizontalClearanceFixed);
            }

            horizontalLength = instance.horizontalLength;
            horizontalWidth = instance.horizontalWidth;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LockBasin
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                periodicDateRange = this.periodicDateRange.ToList(),
                horizontalClearanceFixed = this.horizontalClearanceFixed?.Model,
                horizontalLength = this.horizontalLength,
                horizontalWidth = this.horizontalWidth,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LockBasin Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            periodicDateRange = this.periodicDateRange.ToList(),
            horizontalClearanceFixed = this._horizontalClearanceFixed?.Model,
            horizontalLength = this._horizontalLength,
            horizontalWidth = this._horizontalWidth,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public LockBasinViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("MooringTrot", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class MooringTrotViewModel : ViewModelBase
    {
        [Category("MooringTrot")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("MooringTrot")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("MooringTrot")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("MooringTrot")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("MooringTrot")]
        public ObservableCollection<information> information { get; set; } = new();

        public class MooringTrotRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(MooringTrot)];
        }

        public void Load(DomainModel.S101.FeatureTypes.MooringTrot instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.MooringTrot
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.MooringTrot Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public MooringTrotViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SeaAreaNamedWaterArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SeaAreaNamedWaterAreaViewModel : ViewModelBase
    {
        private categoryOfSeaArea? _categoryOfSeaArea = default;
        [Category("SeaAreaNamedWaterArea")]
        public categoryOfSeaArea? categoryOfSeaArea
        {
            get
            {
                return _categoryOfSeaArea;
            }

            set
            {
                SetValue(ref _categoryOfSeaArea, value);
            }
        }

        [Category("SeaAreaNamedWaterArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SeaAreaNamedWaterArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("SeaAreaNamedWaterArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SeaAreaNamedWaterArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SeaAreaNamedWaterAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SeaAreaNamedWaterArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SeaAreaNamedWaterArea instance)
        {
            categoryOfSeaArea = instance.categoryOfSeaArea;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SeaAreaNamedWaterArea
            {
                categoryOfSeaArea = this.categoryOfSeaArea,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SeaAreaNamedWaterArea Model => new()
        {
            categoryOfSeaArea = this._categoryOfSeaArea,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SeaAreaNamedWaterAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("TidalStreamFloodEbb", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class TidalStreamFloodEbbViewModel : ViewModelBase
    {
        private categoryOfTidalStream _categoryOfTidalStream;
        [Category("TidalStreamFloodEbb")]
        public categoryOfTidalStream categoryOfTidalStream
        {
            get
            {
                return _categoryOfTidalStream;
            }

            set
            {
                SetValue(ref _categoryOfTidalStream, value);
            }
        }

        [Category("TidalStreamFloodEbb")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("TidalStreamFloodEbb")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("TidalStreamFloodEbb")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private orientationViewModel _orientation;
        [Category("TidalStreamFloodEbb")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public orientationViewModel orientation
        {
            get
            {
                return _orientation;
            }

            set
            {
                SetValue(ref _orientation, value);
            }
        }

        private speedViewModel _speed;
        [Category("TidalStreamFloodEbb")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public speedViewModel speed
        {
            get
            {
                return _speed;
            }

            set
            {
                SetValue(ref _speed, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("TidalStreamFloodEbb")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("TidalStreamFloodEbb")]
        public ObservableCollection<information> information { get; set; } = new();

        public class TidalStreamFloodEbbRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TidalStreamFloodEbb)];
        }

        public void Load(DomainModel.S101.FeatureTypes.TidalStreamFloodEbb instance)
        {
            categoryOfTidalStream = instance.categoryOfTidalStream;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            orientation = new();
            if (instance.orientation != null)
            {
                orientation = new();
                orientation.Load(instance.orientation);
            }

            speed = new();
            if (instance.speed != null)
            {
                speed = new();
                speed.Load(instance.speed);
            }

            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.TidalStreamFloodEbb
            {
                categoryOfTidalStream = this.categoryOfTidalStream,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                orientation = this.orientation?.Model,
                speed = this.speed?.Model,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.TidalStreamFloodEbb Model => new()
        {
            categoryOfTidalStream = this._categoryOfTidalStream,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            orientation = this._orientation?.Model,
            speed = this._speed?.Model,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public TidalStreamFloodEbbViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("CurrentNonGravitational", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CurrentNonGravitationalViewModel : ViewModelBase
    {
        [Category("CurrentNonGravitational")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("CurrentNonGravitational")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("CurrentNonGravitational")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private orientationViewModel _orientation;
        [Category("CurrentNonGravitational")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public orientationViewModel orientation
        {
            get
            {
                return _orientation;
            }

            set
            {
                SetValue(ref _orientation, value);
            }
        }

        [Category("CurrentNonGravitational")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private speedViewModel _speed;
        [Category("CurrentNonGravitational")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public speedViewModel speed
        {
            get
            {
                return _speed;
            }

            set
            {
                SetValue(ref _speed, value);
            }
        }

        private status? _status = default;
        [Category("CurrentNonGravitational")]
        public status? status
        {
            get
            {
                return _status;
            }

            set
            {
                SetValue(ref _status, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("CurrentNonGravitational")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("CurrentNonGravitational")]
        public ObservableCollection<information> information { get; set; } = new();

        public class CurrentNonGravitationalRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CurrentNonGravitational)];
        }

        public void Load(DomainModel.S101.FeatureTypes.CurrentNonGravitational instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            orientation = new();
            if (instance.orientation != null)
            {
                orientation = new();
                orientation.Load(instance.orientation);
            }

            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            speed = new();
            if (instance.speed != null)
            {
                speed = new();
                speed.Load(instance.speed);
            }

            status = instance.status;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.CurrentNonGravitational
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                orientation = this.orientation?.Model,
                periodicDateRange = this.periodicDateRange.ToList(),
                speed = this.speed?.Model,
                status = this.status,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.CurrentNonGravitational Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            orientation = this._orientation?.Model,
            periodicDateRange = this.periodicDateRange.ToList(),
            speed = this._speed?.Model,
            status = this._status,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public CurrentNonGravitationalViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("WaterTurbulence", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class WaterTurbulenceViewModel : ViewModelBase
    {
        private categoryOfWaterTurbulence _categoryOfWaterTurbulence;
        [Category("WaterTurbulence")]
        public categoryOfWaterTurbulence categoryOfWaterTurbulence
        {
            get
            {
                return _categoryOfWaterTurbulence;
            }

            set
            {
                SetValue(ref _categoryOfWaterTurbulence, value);
            }
        }

        [Category("WaterTurbulence")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("WaterTurbulence")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("WaterTurbulence")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("WaterTurbulence")]
        public ObservableCollection<information> information { get; set; } = new();

        public class WaterTurbulenceRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(WaterTurbulence)];
        }

        public void Load(DomainModel.S101.FeatureTypes.WaterTurbulence instance)
        {
            categoryOfWaterTurbulence = instance.categoryOfWaterTurbulence;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.WaterTurbulence
            {
                categoryOfWaterTurbulence = this.categoryOfWaterTurbulence,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.WaterTurbulence Model => new()
        {
            categoryOfWaterTurbulence = this._categoryOfWaterTurbulence,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public WaterTurbulenceViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("TidalStreamPanelData", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class TidalStreamPanelDataViewModel : ViewModelBase
    {
        [Category("TidalStreamPanelData")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("TidalStreamPanelData")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private String _stationName = string.Empty;
        [Category("TidalStreamPanelData")]
        public String stationName
        {
            get
            {
                return _stationName;
            }

            set
            {
                SetValue(ref _stationName, value);
            }
        }

        private String _stationNumber = string.Empty;
        [Category("TidalStreamPanelData")]
        public String stationNumber
        {
            get
            {
                return _stationNumber;
            }

            set
            {
                SetValue(ref _stationNumber, value);
            }
        }

        [Category("TidalStreamPanelData")]
        public ObservableCollection<tidalStreamPanelValues> tidalStreamPanelValues { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("TidalStreamPanelData")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("TidalStreamPanelData")]
        public ObservableCollection<information> information { get; set; } = new();

        public class TidalStreamPanelDataRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TidalStreamPanelData)];
        }

        public void Load(DomainModel.S101.FeatureTypes.TidalStreamPanelData instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            stationName = instance.stationName;
            stationNumber = instance.stationNumber;
            tidalStreamPanelValues.Clear();
            if (instance.tidalStreamPanelValues is not null)
                foreach (var e in instance.tidalStreamPanelValues)
                    tidalStreamPanelValues.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.TidalStreamPanelData
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                stationName = this.stationName,
                stationNumber = this.stationNumber,
                tidalStreamPanelValues = this.tidalStreamPanelValues.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.TidalStreamPanelData Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            stationName = this._stationName,
            stationNumber = this._stationNumber,
            tidalStreamPanelValues = this.tidalStreamPanelValues.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public TidalStreamPanelDataViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            tidalStreamPanelValues.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(tidalStreamPanelValues));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Sounding", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SoundingViewModel : ViewModelBase
    {
        [Category("Sounding")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Sounding")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Sounding")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("Sounding")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        private status? _status = default;
        [Category("Sounding")]
        public status? status
        {
            get
            {
                return _status;
            }

            set
            {
                SetValue(ref _status, value);
            }
        }

        [Category("Sounding")]
        public ObservableCollection<techniqueOfVerticalMeasurement> techniqueOfVerticalMeasurement { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("Sounding")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Sounding")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SoundingRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Sounding)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Sounding instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            reportedDate = instance.reportedDate;
            status = instance.status;
            techniqueOfVerticalMeasurement.Clear();
            if (instance.techniqueOfVerticalMeasurement is not null)
                foreach (var e in instance.techniqueOfVerticalMeasurement)
                    techniqueOfVerticalMeasurement.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Sounding
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                reportedDate = this.reportedDate,
                status = this.status,
                techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Sounding Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            reportedDate = this._reportedDate,
            status = this._status,
            techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SoundingViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            techniqueOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(techniqueOfVerticalMeasurement));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("DredgedArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DredgedAreaViewModel : ViewModelBase
    {
        private Decimal _depthRangeMinimumValue;
        [Category("DredgedArea")]
        public Decimal depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        private Decimal? _depthRangeMaximumValue = default;
        [Category("DredgedArea")]
        public Decimal? depthRangeMaximumValue
        {
            get
            {
                return _depthRangeMaximumValue;
            }

            set
            {
                SetValue(ref _depthRangeMaximumValue, value);
            }
        }

        private DateOnly? _dredgedDate = default;
        [Category("DredgedArea")]
        public DateOnly? dredgedDate
        {
            get
            {
                return _dredgedDate;
            }

            set
            {
                SetValue(ref _dredgedDate, value);
            }
        }

        [Category("DredgedArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("DredgedArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("DredgedArea")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        private qualityOfVerticalMeasurement? _qualityOfVerticalMeasurement = default;
        [Category("DredgedArea")]
        public qualityOfVerticalMeasurement? qualityOfVerticalMeasurement
        {
            get
            {
                return _qualityOfVerticalMeasurement;
            }

            set
            {
                SetValue(ref _qualityOfVerticalMeasurement, value);
            }
        }

        [Category("DredgedArea")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("DredgedArea")]
        public ObservableCollection<techniqueOfVerticalMeasurement> techniqueOfVerticalMeasurement { get; set; } = new();

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("DredgedArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        [Category("DredgedArea")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        [Category("DredgedArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DredgedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DredgedArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.DredgedArea instance)
        {
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            depthRangeMaximumValue = instance.depthRangeMaximumValue;
            dredgedDate = instance.dredgedDate;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            qualityOfVerticalMeasurement = instance.qualityOfVerticalMeasurement;
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            techniqueOfVerticalMeasurement.Clear();
            if (instance.techniqueOfVerticalMeasurement is not null)
                foreach (var e in instance.techniqueOfVerticalMeasurement)
                    techniqueOfVerticalMeasurement.Add(e);
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }

            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.DredgedArea
            {
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                depthRangeMaximumValue = this.depthRangeMaximumValue,
                dredgedDate = this.dredgedDate,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                maximumPermittedDraught = this.maximumPermittedDraught,
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement,
                restriction = this.restriction.ToList(),
                techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
                verticalUncertainty = this.verticalUncertainty?.Model,
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.DredgedArea Model => new()
        {
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            depthRangeMaximumValue = this._depthRangeMaximumValue,
            dredgedDate = this._dredgedDate,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            maximumPermittedDraught = this._maximumPermittedDraught,
            qualityOfVerticalMeasurement = this._qualityOfVerticalMeasurement,
            restriction = this.restriction.ToList(),
            techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
            verticalUncertainty = this._verticalUncertainty?.Model,
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            information = this.information.ToList(),
        };

        public DredgedAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            techniqueOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(techniqueOfVerticalMeasurement));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SweptArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SweptAreaViewModel : ViewModelBase
    {
        private Decimal _depthRangeMinimumValue;
        [Category("SweptArea")]
        public Decimal depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SweptArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private DateOnly? _sweptDate = default;
        [Category("SweptArea")]
        public DateOnly? sweptDate
        {
            get
            {
                return _sweptDate;
            }

            set
            {
                SetValue(ref _sweptDate, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("SweptArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SweptArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SweptAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SweptArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SweptArea instance)
        {
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            sweptDate = instance.sweptDate;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SweptArea
            {
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                sweptDate = this.sweptDate,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SweptArea Model => new()
        {
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            sweptDate = this._sweptDate,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SweptAreaViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("DepthContour", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DepthContourViewModel : ViewModelBase
    {
        private String _interoperabilityIdentifier = string.Empty;
        [Category("DepthContour")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal _valueOfDepthContour;
        [Category("DepthContour")]
        public Decimal valueOfDepthContour
        {
            get
            {
                return _valueOfDepthContour;
            }

            set
            {
                SetValue(ref _valueOfDepthContour, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("DepthContour")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("DepthContour")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DepthContourRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DepthContour)];
        }

        public void Load(DomainModel.S101.FeatureTypes.DepthContour instance)
        {
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            valueOfDepthContour = instance.valueOfDepthContour;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.DepthContour
            {
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                valueOfDepthContour = this.valueOfDepthContour,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.DepthContour Model => new()
        {
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            valueOfDepthContour = this._valueOfDepthContour,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public DepthContourViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("DepthArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DepthAreaViewModel : ViewModelBase
    {
        private Decimal _depthRangeMinimumValue;
        [Category("DepthArea")]
        public Decimal depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        private Decimal _depthRangeMaximumValue;
        [Category("DepthArea")]
        public Decimal depthRangeMaximumValue
        {
            get
            {
                return _depthRangeMaximumValue;
            }

            set
            {
                SetValue(ref _depthRangeMaximumValue, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("DepthArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("DepthArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DepthAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DepthArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.DepthArea instance)
        {
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            depthRangeMaximumValue = instance.depthRangeMaximumValue;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.DepthArea
            {
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                depthRangeMaximumValue = this.depthRangeMaximumValue,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.DepthArea Model => new()
        {
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            depthRangeMaximumValue = this._depthRangeMaximumValue,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            information = this.information.ToList(),
        };

        public DepthAreaViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("DepthNoBottomFound", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DepthNoBottomFoundViewModel : ViewModelBase
    {
        private String _interoperabilityIdentifier = string.Empty;
        [Category("DepthNoBottomFound")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("DepthNoBottomFound")]
        public ObservableCollection<techniqueOfVerticalMeasurement> techniqueOfVerticalMeasurement { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("DepthNoBottomFound")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("DepthNoBottomFound")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DepthNoBottomFoundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DepthNoBottomFound)];
        }

        public void Load(DomainModel.S101.FeatureTypes.DepthNoBottomFound instance)
        {
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            techniqueOfVerticalMeasurement.Clear();
            if (instance.techniqueOfVerticalMeasurement is not null)
                foreach (var e in instance.techniqueOfVerticalMeasurement)
                    techniqueOfVerticalMeasurement.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.DepthNoBottomFound
            {
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.DepthNoBottomFound Model => new()
        {
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public DepthNoBottomFoundViewModel() : base()
        {
            techniqueOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(techniqueOfVerticalMeasurement));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("UnsurveyedArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class UnsurveyedAreaViewModel : ViewModelBase
    {
        private String _interoperabilityIdentifier = string.Empty;
        [Category("UnsurveyedArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("UnsurveyedArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class UnsurveyedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UnsurveyedArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.UnsurveyedArea instance)
        {
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.UnsurveyedArea
            {
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.UnsurveyedArea Model => new()
        {
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            information = this.information.ToList(),
        };

        public UnsurveyedAreaViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SeabedArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SeabedAreaViewModel : ViewModelBase
    {
        [Category("SeabedArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SeabedArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("SeabedArea")]
        public ObservableCollection<surfaceCharacteristics> surfaceCharacteristics { get; set; } = new();

        private waterLevelEffect? _waterLevelEffect = default;
        [Category("SeabedArea")]
        public waterLevelEffect? waterLevelEffect
        {
            get
            {
                return _waterLevelEffect;
            }

            set
            {
                SetValue(ref _waterLevelEffect, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("SeabedArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SeabedArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SeabedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SeabedArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SeabedArea instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            surfaceCharacteristics.Clear();
            if (instance.surfaceCharacteristics is not null)
                foreach (var e in instance.surfaceCharacteristics)
                    surfaceCharacteristics.Add(e);
            waterLevelEffect = instance.waterLevelEffect;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SeabedArea
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                surfaceCharacteristics = this.surfaceCharacteristics.ToList(),
                waterLevelEffect = this.waterLevelEffect,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SeabedArea Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            surfaceCharacteristics = this.surfaceCharacteristics.ToList(),
            waterLevelEffect = this._waterLevelEffect,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SeabedAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            surfaceCharacteristics.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(surfaceCharacteristics));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("WeedKelp", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class WeedKelpViewModel : ViewModelBase
    {
        private categoryOfWeedKelp? _categoryOfWeedKelp = default;
        [Category("WeedKelp")]
        public categoryOfWeedKelp? categoryOfWeedKelp
        {
            get
            {
                return _categoryOfWeedKelp;
            }

            set
            {
                SetValue(ref _categoryOfWeedKelp, value);
            }
        }

        [Category("WeedKelp")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("WeedKelp")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("WeedKelp")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("WeedKelp")]
        public ObservableCollection<information> information { get; set; } = new();

        public class WeedKelpRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(WeedKelp)];
        }

        public void Load(DomainModel.S101.FeatureTypes.WeedKelp instance)
        {
            categoryOfWeedKelp = instance.categoryOfWeedKelp;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.WeedKelp
            {
                categoryOfWeedKelp = this.categoryOfWeedKelp,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.WeedKelp Model => new()
        {
            categoryOfWeedKelp = this._categoryOfWeedKelp,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public WeedKelpViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Seagrass", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SeagrassViewModel : ViewModelBase
    {
        [Category("Seagrass")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Seagrass")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Seagrass")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Seagrass")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SeagrassRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Seagrass)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Seagrass instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Seagrass
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Seagrass Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SeagrassViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Sandwave", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SandwaveViewModel : ViewModelBase
    {
        private String _interoperabilityIdentifier = string.Empty;
        [Category("Sandwave")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("Sandwave")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Sandwave")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Sandwave")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SandwaveRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Sandwave)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Sandwave instance)
        {
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            verticalLength = instance.verticalLength;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Sandwave
            {
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                verticalLength = this.verticalLength,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Sandwave Model => new()
        {
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            verticalLength = this._verticalLength,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SandwaveViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Spring", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SpringViewModel : ViewModelBase
    {
        [Category("Spring")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Spring")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Spring")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Spring")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SpringRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Spring)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Spring instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Spring
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Spring Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SpringViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("UnderwaterAwashRock", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class UnderwaterAwashRockViewModel : ViewModelBase
    {
        private expositionOfSounding? _expositionOfSounding = default;
        [Category("UnderwaterAwashRock")]
        public expositionOfSounding? expositionOfSounding
        {
            get
            {
                return _expositionOfSounding;
            }

            set
            {
                SetValue(ref _expositionOfSounding, value);
            }
        }

        [Category("UnderwaterAwashRock")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("UnderwaterAwashRock")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private natureOfSurface? _natureOfSurface = default;
        [Category("UnderwaterAwashRock")]
        public natureOfSurface? natureOfSurface
        {
            get
            {
                return _natureOfSurface;
            }

            set
            {
                SetValue(ref _natureOfSurface, value);
            }
        }

        [Category("UnderwaterAwashRock")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("UnderwaterAwashRock")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        private status? _status = default;
        [Category("UnderwaterAwashRock")]
        public status? status
        {
            get
            {
                return _status;
            }

            set
            {
                SetValue(ref _status, value);
            }
        }

        [Category("UnderwaterAwashRock")]
        public ObservableCollection<techniqueOfVerticalMeasurement> techniqueOfVerticalMeasurement { get; set; } = new();

        private Decimal _valueOfSounding;
        [Category("UnderwaterAwashRock")]
        public Decimal valueOfSounding
        {
            get
            {
                return _valueOfSounding;
            }

            set
            {
                SetValue(ref _valueOfSounding, value);
            }
        }

        private waterLevelEffect _waterLevelEffect;
        [Category("UnderwaterAwashRock")]
        public waterLevelEffect waterLevelEffect
        {
            get
            {
                return _waterLevelEffect;
            }

            set
            {
                SetValue(ref _waterLevelEffect, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("UnderwaterAwashRock")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("UnderwaterAwashRock")]
        public ObservableCollection<information> information { get; set; } = new();

        private Decimal? _defaultClearanceDepth = default;
        [Category("UnderwaterAwashRock")]
        public Decimal? defaultClearanceDepth
        {
            get
            {
                return _defaultClearanceDepth;
            }

            set
            {
                SetValue(ref _defaultClearanceDepth, value);
            }
        }

        private Decimal _surroundingDepth;
        [Category("UnderwaterAwashRock")]
        public Decimal surroundingDepth
        {
            get
            {
                return _surroundingDepth;
            }

            set
            {
                SetValue(ref _surroundingDepth, value);
            }
        }

        public class UnderwaterAwashRockRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UnderwaterAwashRock)];
        }

        public void Load(DomainModel.S101.FeatureTypes.UnderwaterAwashRock instance)
        {
            expositionOfSounding = instance.expositionOfSounding;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfSurface = instance.natureOfSurface;
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            reportedDate = instance.reportedDate;
            status = instance.status;
            techniqueOfVerticalMeasurement.Clear();
            if (instance.techniqueOfVerticalMeasurement is not null)
                foreach (var e in instance.techniqueOfVerticalMeasurement)
                    techniqueOfVerticalMeasurement.Add(e);
            valueOfSounding = instance.valueOfSounding;
            waterLevelEffect = instance.waterLevelEffect;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            defaultClearanceDepth = instance.defaultClearanceDepth;
            surroundingDepth = instance.surroundingDepth;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.UnderwaterAwashRock
            {
                expositionOfSounding = this.expositionOfSounding,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfSurface = this.natureOfSurface,
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                reportedDate = this.reportedDate,
                status = this.status,
                techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
                valueOfSounding = this.valueOfSounding,
                waterLevelEffect = this.waterLevelEffect,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                defaultClearanceDepth = this.defaultClearanceDepth,
                surroundingDepth = this.surroundingDepth,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.UnderwaterAwashRock Model => new()
        {
            expositionOfSounding = this._expositionOfSounding,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfSurface = this._natureOfSurface,
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            reportedDate = this._reportedDate,
            status = this._status,
            techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
            valueOfSounding = this._valueOfSounding,
            waterLevelEffect = this._waterLevelEffect,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            defaultClearanceDepth = this._defaultClearanceDepth,
            surroundingDepth = this._surroundingDepth,
        };

        public UnderwaterAwashRockViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            techniqueOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(techniqueOfVerticalMeasurement));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Wreck", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class WreckViewModel : ViewModelBase
    {
        private categoryOfWreck? _categoryOfWreck = default;
        [Category("Wreck")]
        public categoryOfWreck? categoryOfWreck
        {
            get
            {
                return _categoryOfWreck;
            }

            set
            {
                SetValue(ref _categoryOfWreck, value);
            }
        }

        private expositionOfSounding? _expositionOfSounding = default;
        [Category("Wreck")]
        public expositionOfSounding? expositionOfSounding
        {
            get
            {
                return _expositionOfSounding;
            }

            set
            {
                SetValue(ref _expositionOfSounding, value);
            }
        }

        [Category("Wreck")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private Decimal? _height = default;
        [Category("Wreck")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Wreck")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Wreck")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("Wreck")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("Wreck")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Wreck")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("Wreck")]
        public ObservableCollection<techniqueOfVerticalMeasurement> techniqueOfVerticalMeasurement { get; set; } = new();

        private Decimal? _valueOfSounding = default;
        [Category("Wreck")]
        public Decimal? valueOfSounding
        {
            get
            {
                return _valueOfSounding;
            }

            set
            {
                SetValue(ref _valueOfSounding, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("Wreck")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private waterLevelEffect _waterLevelEffect;
        [Category("Wreck")]
        public waterLevelEffect waterLevelEffect
        {
            get
            {
                return _waterLevelEffect;
            }

            set
            {
                SetValue(ref _waterLevelEffect, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Wreck")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Wreck")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Wreck")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        private Decimal? _defaultClearanceDepth = default;
        [Category("Wreck")]
        public Decimal? defaultClearanceDepth
        {
            get
            {
                return _defaultClearanceDepth;
            }

            set
            {
                SetValue(ref _defaultClearanceDepth, value);
            }
        }

        private Decimal _surroundingDepth;
        [Category("Wreck")]
        public Decimal surroundingDepth
        {
            get
            {
                return _surroundingDepth;
            }

            set
            {
                SetValue(ref _surroundingDepth, value);
            }
        }

        public class WreckRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Wreck)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Wreck instance)
        {
            categoryOfWreck = instance.categoryOfWreck;
            expositionOfSounding = instance.expositionOfSounding;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            techniqueOfVerticalMeasurement.Clear();
            if (instance.techniqueOfVerticalMeasurement is not null)
                foreach (var e in instance.techniqueOfVerticalMeasurement)
                    techniqueOfVerticalMeasurement.Add(e);
            valueOfSounding = instance.valueOfSounding;
            visualProminence = instance.visualProminence;
            waterLevelEffect = instance.waterLevelEffect;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
            defaultClearanceDepth = instance.defaultClearanceDepth;
            surroundingDepth = instance.surroundingDepth;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Wreck
            {
                categoryOfWreck = this.categoryOfWreck,
                expositionOfSounding = this.expositionOfSounding,
                featureName = this.featureName.ToList(),
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
                valueOfSounding = this.valueOfSounding,
                visualProminence = this.visualProminence,
                waterLevelEffect = this.waterLevelEffect,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
                defaultClearanceDepth = this.defaultClearanceDepth,
                surroundingDepth = this.surroundingDepth,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Wreck Model => new()
        {
            categoryOfWreck = this._categoryOfWreck,
            expositionOfSounding = this._expositionOfSounding,
            featureName = this.featureName.ToList(),
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
            valueOfSounding = this._valueOfSounding,
            visualProminence = this._visualProminence,
            waterLevelEffect = this._waterLevelEffect,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
            defaultClearanceDepth = this._defaultClearanceDepth,
            surroundingDepth = this._surroundingDepth,
        };

        public WreckViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            techniqueOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(techniqueOfVerticalMeasurement));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Obstruction", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class ObstructionViewModel : ViewModelBase
    {
        private categoryOfObstruction? _categoryOfObstruction = default;
        [Category("Obstruction")]
        public categoryOfObstruction? categoryOfObstruction
        {
            get
            {
                return _categoryOfObstruction;
            }

            set
            {
                SetValue(ref _categoryOfObstruction, value);
            }
        }

        private condition? _condition = default;
        [Category("Obstruction")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private expositionOfSounding? _expositionOfSounding = default;
        [Category("Obstruction")]
        public expositionOfSounding? expositionOfSounding
        {
            get
            {
                return _expositionOfSounding;
            }

            set
            {
                SetValue(ref _expositionOfSounding, value);
            }
        }

        [Category("Obstruction")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private Decimal? _height = default;
        [Category("Obstruction")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Obstruction")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("Obstruction")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        [Category("Obstruction")]
        public ObservableCollection<natureOfSurface> natureOfSurface { get; set; } = new();

        [Category("Obstruction")]
        public ObservableCollection<product> product { get; set; } = new();

        [Category("Obstruction")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("Obstruction")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("Obstruction")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("Obstruction")]
        public ObservableCollection<techniqueOfVerticalMeasurement> techniqueOfVerticalMeasurement { get; set; } = new();

        private Decimal? _valueOfSounding = default;
        [Category("Obstruction")]
        public Decimal? valueOfSounding
        {
            get
            {
                return _valueOfSounding;
            }

            set
            {
                SetValue(ref _valueOfSounding, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("Obstruction")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private waterLevelEffect _waterLevelEffect;
        [Category("Obstruction")]
        public waterLevelEffect waterLevelEffect
        {
            get
            {
                return _waterLevelEffect;
            }

            set
            {
                SetValue(ref _waterLevelEffect, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("Obstruction")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Obstruction")]
        public ObservableCollection<information> information { get; set; } = new();

        private Decimal? _defaultClearanceDepth = default;
        [Category("Obstruction")]
        public Decimal? defaultClearanceDepth
        {
            get
            {
                return _defaultClearanceDepth;
            }

            set
            {
                SetValue(ref _defaultClearanceDepth, value);
            }
        }

        private Decimal _surroundingDepth;
        [Category("Obstruction")]
        public Decimal surroundingDepth
        {
            get
            {
                return _surroundingDepth;
            }

            set
            {
                SetValue(ref _surroundingDepth, value);
            }
        }

        public class ObstructionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Obstruction)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Obstruction instance)
        {
            categoryOfObstruction = instance.categoryOfObstruction;
            condition = instance.condition;
            expositionOfSounding = instance.expositionOfSounding;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            natureOfSurface.Clear();
            if (instance.natureOfSurface is not null)
                foreach (var e in instance.natureOfSurface)
                    natureOfSurface.Add(e);
            product.Clear();
            if (instance.product is not null)
                foreach (var e in instance.product)
                    product.Add(e);
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            techniqueOfVerticalMeasurement.Clear();
            if (instance.techniqueOfVerticalMeasurement is not null)
                foreach (var e in instance.techniqueOfVerticalMeasurement)
                    techniqueOfVerticalMeasurement.Add(e);
            valueOfSounding = instance.valueOfSounding;
            verticalLength = instance.verticalLength;
            waterLevelEffect = instance.waterLevelEffect;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            defaultClearanceDepth = instance.defaultClearanceDepth;
            surroundingDepth = instance.surroundingDepth;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Obstruction
            {
                categoryOfObstruction = this.categoryOfObstruction,
                condition = this.condition,
                expositionOfSounding = this.expositionOfSounding,
                featureName = this.featureName.ToList(),
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                maximumPermittedDraught = this.maximumPermittedDraught,
                natureOfSurface = this.natureOfSurface.ToList(),
                product = this.product.ToList(),
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
                valueOfSounding = this.valueOfSounding,
                verticalLength = this.verticalLength,
                waterLevelEffect = this.waterLevelEffect,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                defaultClearanceDepth = this.defaultClearanceDepth,
                surroundingDepth = this.surroundingDepth,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Obstruction Model => new()
        {
            categoryOfObstruction = this._categoryOfObstruction,
            condition = this._condition,
            expositionOfSounding = this._expositionOfSounding,
            featureName = this.featureName.ToList(),
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            maximumPermittedDraught = this._maximumPermittedDraught,
            natureOfSurface = this.natureOfSurface.ToList(),
            product = this.product.ToList(),
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
            valueOfSounding = this._valueOfSounding,
            verticalLength = this._verticalLength,
            waterLevelEffect = this._waterLevelEffect,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            defaultClearanceDepth = this._defaultClearanceDepth,
            surroundingDepth = this._surroundingDepth,
        };

        public ObstructionViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfSurface.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfSurface));
            };
            product.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(product));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            techniqueOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(techniqueOfVerticalMeasurement));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("FoulGround", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class FoulGroundViewModel : ViewModelBase
    {
        [Category("FoulGround")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("FoulGround")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("FoulGround")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("FoulGround")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("FoulGround")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("FoulGround")]
        public ObservableCollection<techniqueOfVerticalMeasurement> techniqueOfVerticalMeasurement { get; set; } = new();

        private Decimal? _valueOfSounding = default;
        [Category("FoulGround")]
        public Decimal? valueOfSounding
        {
            get
            {
                return _valueOfSounding;
            }

            set
            {
                SetValue(ref _valueOfSounding, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("FoulGround")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("FoulGround")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("FoulGround")]
        public ObservableCollection<information> information { get; set; } = new();

        public class FoulGroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FoulGround)];
        }

        public void Load(DomainModel.S101.FeatureTypes.FoulGround instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            techniqueOfVerticalMeasurement.Clear();
            if (instance.techniqueOfVerticalMeasurement is not null)
                foreach (var e in instance.techniqueOfVerticalMeasurement)
                    techniqueOfVerticalMeasurement.Add(e);
            valueOfSounding = instance.valueOfSounding;
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }

            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.FoulGround
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
                valueOfSounding = this.valueOfSounding,
                verticalUncertainty = this.verticalUncertainty?.Model,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.FoulGround Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
            valueOfSounding = this._valueOfSounding,
            verticalUncertainty = this._verticalUncertainty?.Model,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public FoulGroundViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            techniqueOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(techniqueOfVerticalMeasurement));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("DiscolouredWater", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DiscolouredWaterViewModel : ViewModelBase
    {
        private String _interoperabilityIdentifier = string.Empty;
        [Category("DiscolouredWater")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("DiscolouredWater")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("DiscolouredWater")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("DiscolouredWater")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DiscolouredWaterRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DiscolouredWater)];
        }

        public void Load(DomainModel.S101.FeatureTypes.DiscolouredWater instance)
        {
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            reportedDate = instance.reportedDate;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.DiscolouredWater
            {
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                reportedDate = this.reportedDate,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.DiscolouredWater Model => new()
        {
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            reportedDate = this._reportedDate,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public DiscolouredWaterViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("FishingFacility", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class FishingFacilityViewModel : ViewModelBase
    {
        private categoryOfFishingFacility? _categoryOfFishingFacility = default;
        [Category("FishingFacility")]
        public categoryOfFishingFacility? categoryOfFishingFacility
        {
            get
            {
                return _categoryOfFishingFacility;
            }

            set
            {
                SetValue(ref _categoryOfFishingFacility, value);
            }
        }

        private condition? _condition = default;
        [Category("FishingFacility")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("FishingFacility")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("FishingFacility")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("FishingFacility")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("FishingFacility")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("FishingFacility")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("FishingFacility")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("FishingFacility")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("FishingFacility")]
        public ObservableCollection<information> information { get; set; } = new();

        public class FishingFacilityRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FishingFacility)];
        }

        public void Load(DomainModel.S101.FeatureTypes.FishingFacility instance)
        {
            categoryOfFishingFacility = instance.categoryOfFishingFacility;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.FishingFacility
            {
                categoryOfFishingFacility = this.categoryOfFishingFacility,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.FishingFacility Model => new()
        {
            categoryOfFishingFacility = this._categoryOfFishingFacility,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public FishingFacilityViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("MarineFarmCulture", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class MarineFarmCultureViewModel : ViewModelBase
    {
        private categoryOfMarineFarmCulture? _categoryOfMarineFarmCulture = default;
        [Category("MarineFarmCulture")]
        public categoryOfMarineFarmCulture? categoryOfMarineFarmCulture
        {
            get
            {
                return _categoryOfMarineFarmCulture;
            }

            set
            {
                SetValue(ref _categoryOfMarineFarmCulture, value);
            }
        }

        private expositionOfSounding? _expositionOfSounding = default;
        [Category("MarineFarmCulture")]
        public expositionOfSounding? expositionOfSounding
        {
            get
            {
                return _expositionOfSounding;
            }

            set
            {
                SetValue(ref _expositionOfSounding, value);
            }
        }

        [Category("MarineFarmCulture")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("MarineFarmCulture")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("MarineFarmCulture")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("MarineFarmCulture")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("MarineFarmCulture")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("MarineFarmCulture")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        [Category("MarineFarmCulture")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("MarineFarmCulture")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _valueOfSounding = default;
        [Category("MarineFarmCulture")]
        public Decimal? valueOfSounding
        {
            get
            {
                return _valueOfSounding;
            }

            set
            {
                SetValue(ref _valueOfSounding, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("MarineFarmCulture")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("MarineFarmCulture")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        [Category("MarineFarmCulture")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private waterLevelEffect _waterLevelEffect;
        [Category("MarineFarmCulture")]
        public waterLevelEffect waterLevelEffect
        {
            get
            {
                return _waterLevelEffect;
            }

            set
            {
                SetValue(ref _waterLevelEffect, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("MarineFarmCulture")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("MarineFarmCulture")]
        public ObservableCollection<information> information { get; set; } = new();

        public class MarineFarmCultureRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(MarineFarmCulture)];
        }

        public void Load(DomainModel.S101.FeatureTypes.MarineFarmCulture instance)
        {
            categoryOfMarineFarmCulture = instance.categoryOfMarineFarmCulture;
            expositionOfSounding = instance.expositionOfSounding;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            valueOfSounding = instance.valueOfSounding;
            verticalLength = instance.verticalLength;
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }

            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            waterLevelEffect = instance.waterLevelEffect;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.MarineFarmCulture
            {
                categoryOfMarineFarmCulture = this.categoryOfMarineFarmCulture,
                expositionOfSounding = this.expositionOfSounding,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                valueOfSounding = this.valueOfSounding,
                verticalLength = this.verticalLength,
                verticalUncertainty = this.verticalUncertainty?.Model,
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                waterLevelEffect = this.waterLevelEffect,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.MarineFarmCulture Model => new()
        {
            categoryOfMarineFarmCulture = this._categoryOfMarineFarmCulture,
            expositionOfSounding = this._expositionOfSounding,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            valueOfSounding = this._valueOfSounding,
            verticalLength = this._verticalLength,
            verticalUncertainty = this._verticalUncertainty?.Model,
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            waterLevelEffect = this._waterLevelEffect,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public MarineFarmCultureViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("OffshorePlatform", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class OffshorePlatformViewModel : ViewModelBase
    {
        private categoryOfOffshorePlatform? _categoryOfOffshorePlatform = default;
        [Category("OffshorePlatform")]
        public categoryOfOffshorePlatform? categoryOfOffshorePlatform
        {
            get
            {
                return _categoryOfOffshorePlatform;
            }

            set
            {
                SetValue(ref _categoryOfOffshorePlatform, value);
            }
        }

        [Category("OffshorePlatform")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("OffshorePlatform")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("OffshorePlatform")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("OffshorePlatform")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("OffshorePlatform")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Boolean? _flareStack = default;
        [Category("OffshorePlatform")]
        public Boolean? flareStack
        {
            get
            {
                return _flareStack;
            }

            set
            {
                SetValue(ref _flareStack, value);
            }
        }

        private Decimal? _height = default;
        [Category("OffshorePlatform")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("OffshorePlatform")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("OffshorePlatform")]
        public ObservableCollection<product> product { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("OffshorePlatform")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("OffshorePlatform")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("OffshorePlatform")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("OffshorePlatform")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("OffshorePlatform")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("OffshorePlatform")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("OffshorePlatform")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("OffshorePlatform")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class OffshorePlatformRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(OffshorePlatform)];
        }

        public void Load(DomainModel.S101.FeatureTypes.OffshorePlatform instance)
        {
            categoryOfOffshorePlatform = instance.categoryOfOffshorePlatform;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            flareStack = instance.flareStack;
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            product.Clear();
            if (instance.product is not null)
                foreach (var e in instance.product)
                    product.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.OffshorePlatform
            {
                categoryOfOffshorePlatform = this.categoryOfOffshorePlatform,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                flareStack = this.flareStack,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                product = this.product.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.OffshorePlatform Model => new()
        {
            categoryOfOffshorePlatform = this._categoryOfOffshorePlatform,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            flareStack = this._flareStack,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            product = this.product.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public OffshorePlatformViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            product.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(product));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("CableSubmarine", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CableSubmarineViewModel : ViewModelBase
    {
        private Decimal? _buriedDepth = default;
        [Category("CableSubmarine")]
        public Decimal? buriedDepth
        {
            get
            {
                return _buriedDepth;
            }

            set
            {
                SetValue(ref _buriedDepth, value);
            }
        }

        private categoryOfCable? _categoryOfCable = default;
        [Category("CableSubmarine")]
        public categoryOfCable? categoryOfCable
        {
            get
            {
                return _categoryOfCable;
            }

            set
            {
                SetValue(ref _categoryOfCable, value);
            }
        }

        private condition? _condition = default;
        [Category("CableSubmarine")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("CableSubmarine")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("CableSubmarine")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("CableSubmarine")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("CableSubmarine")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("CableSubmarine")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("CableSubmarine")]
        public ObservableCollection<information> information { get; set; } = new();

        public class CableSubmarineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CableSubmarine)];
        }

        public void Load(DomainModel.S101.FeatureTypes.CableSubmarine instance)
        {
            buriedDepth = instance.buriedDepth;
            categoryOfCable = instance.categoryOfCable;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.CableSubmarine
            {
                buriedDepth = this.buriedDepth,
                categoryOfCable = this.categoryOfCable,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.CableSubmarine Model => new()
        {
            buriedDepth = this._buriedDepth,
            categoryOfCable = this._categoryOfCable,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public CableSubmarineViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("CableArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CableAreaViewModel : ViewModelBase
    {
        [Category("CableArea")]
        public ObservableCollection<categoryOfCable> categoryOfCable { get; set; } = new();

        [Category("CableArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("CableArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("CableArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("CableArea")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("CableArea")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("CableArea")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("CableArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("CableArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class CableAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CableArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.CableArea instance)
        {
            categoryOfCable.Clear();
            if (instance.categoryOfCable is not null)
                foreach (var e in instance.categoryOfCable)
                    categoryOfCable.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.CableArea
            {
                categoryOfCable = this.categoryOfCable.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.CableArea Model => new()
        {
            categoryOfCable = this.categoryOfCable.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public CableAreaViewModel() : base()
        {
            categoryOfCable.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfCable));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("PipelineSubmarineOnLand", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class PipelineSubmarineOnLandViewModel : ViewModelBase
    {
        private Decimal? _buriedDepth = default;
        [Category("PipelineSubmarineOnLand")]
        public Decimal? buriedDepth
        {
            get
            {
                return _buriedDepth;
            }

            set
            {
                SetValue(ref _buriedDepth, value);
            }
        }

        [Category("PipelineSubmarineOnLand")]
        public ObservableCollection<categoryOfPipelinePipe> categoryOfPipelinePipe { get; set; } = new();

        private condition? _condition = default;
        [Category("PipelineSubmarineOnLand")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _depthRangeMinimumValue = default;
        [Category("PipelineSubmarineOnLand")]
        public Decimal? depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        private Decimal? _depthRangeMaximumValue = default;
        [Category("PipelineSubmarineOnLand")]
        public Decimal? depthRangeMaximumValue
        {
            get
            {
                return _depthRangeMaximumValue;
            }

            set
            {
                SetValue(ref _depthRangeMaximumValue, value);
            }
        }

        [Category("PipelineSubmarineOnLand")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("PipelineSubmarineOnLand")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("PipelineSubmarineOnLand")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private multiplicityOfFeaturesViewModel? _multiplicityOfFeatures;
        [Category("PipelineSubmarineOnLand")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public multiplicityOfFeaturesViewModel? multiplicityOfFeatures
        {
            get
            {
                return _multiplicityOfFeatures;
            }

            set
            {
                SetValue(ref _multiplicityOfFeatures, value);
            }
        }

        [Category("PipelineSubmarineOnLand")]
        public ObservableCollection<product> product { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("PipelineSubmarineOnLand")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("PipelineSubmarineOnLand")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("PipelineSubmarineOnLand")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("PipelineSubmarineOnLand")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("PipelineSubmarineOnLand")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("PipelineSubmarineOnLand")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class PipelineSubmarineOnLandRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(PipelineSubmarineOnLand)];
        }

        public void Load(DomainModel.S101.FeatureTypes.PipelineSubmarineOnLand instance)
        {
            buriedDepth = instance.buriedDepth;
            categoryOfPipelinePipe.Clear();
            if (instance.categoryOfPipelinePipe is not null)
                foreach (var e in instance.categoryOfPipelinePipe)
                    categoryOfPipelinePipe.Add(e);
            condition = instance.condition;
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            depthRangeMaximumValue = instance.depthRangeMaximumValue;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            multiplicityOfFeatures = new();
            if (instance.multiplicityOfFeatures != null)
            {
                multiplicityOfFeatures = new();
                multiplicityOfFeatures.Load(instance.multiplicityOfFeatures);
            }

            product.Clear();
            if (instance.product is not null)
                foreach (var e in instance.product)
                    product.Add(e);
            reportedDate = instance.reportedDate;
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.PipelineSubmarineOnLand
            {
                buriedDepth = this.buriedDepth,
                categoryOfPipelinePipe = this.categoryOfPipelinePipe.ToList(),
                condition = this.condition,
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                depthRangeMaximumValue = this.depthRangeMaximumValue,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                multiplicityOfFeatures = this.multiplicityOfFeatures?.Model,
                product = this.product.ToList(),
                reportedDate = this.reportedDate,
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.PipelineSubmarineOnLand Model => new()
        {
            buriedDepth = this._buriedDepth,
            categoryOfPipelinePipe = this.categoryOfPipelinePipe.ToList(),
            condition = this._condition,
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            depthRangeMaximumValue = this._depthRangeMaximumValue,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            multiplicityOfFeatures = this._multiplicityOfFeatures?.Model,
            product = this.product.ToList(),
            reportedDate = this._reportedDate,
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public PipelineSubmarineOnLandViewModel() : base()
        {
            categoryOfPipelinePipe.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfPipelinePipe));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            product.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(product));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SubmarinePipelineArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SubmarinePipelineAreaViewModel : ViewModelBase
    {
        [Category("SubmarinePipelineArea")]
        public ObservableCollection<categoryOfPipelinePipe> categoryOfPipelinePipe { get; set; } = new();

        [Category("SubmarinePipelineArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("SubmarinePipelineArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SubmarinePipelineArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("SubmarinePipelineArea")]
        public ObservableCollection<product> product { get; set; } = new();

        [Category("SubmarinePipelineArea")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("SubmarinePipelineArea")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("SubmarinePipelineArea")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("SubmarinePipelineArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SubmarinePipelineArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SubmarinePipelineAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SubmarinePipelineArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SubmarinePipelineArea instance)
        {
            categoryOfPipelinePipe.Clear();
            if (instance.categoryOfPipelinePipe is not null)
                foreach (var e in instance.categoryOfPipelinePipe)
                    categoryOfPipelinePipe.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            product.Clear();
            if (instance.product is not null)
                foreach (var e in instance.product)
                    product.Add(e);
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SubmarinePipelineArea
            {
                categoryOfPipelinePipe = this.categoryOfPipelinePipe.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                product = this.product.ToList(),
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SubmarinePipelineArea Model => new()
        {
            categoryOfPipelinePipe = this.categoryOfPipelinePipe.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            product = this.product.ToList(),
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SubmarinePipelineAreaViewModel() : base()
        {
            categoryOfPipelinePipe.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfPipelinePipe));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            product.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(product));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("OffshoreProductionArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class OffshoreProductionAreaViewModel : ViewModelBase
    {
        private categoryOfOffshoreProductionArea? _categoryOfOffshoreProductionArea = default;
        [Category("OffshoreProductionArea")]
        public categoryOfOffshoreProductionArea? categoryOfOffshoreProductionArea
        {
            get
            {
                return _categoryOfOffshoreProductionArea;
            }

            set
            {
                SetValue(ref _categoryOfOffshoreProductionArea, value);
            }
        }

        private condition? _condition = default;
        [Category("OffshoreProductionArea")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("OffshoreProductionArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("OffshoreProductionArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("OffshoreProductionArea")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("OffshoreProductionArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("OffshoreProductionArea")]
        public ObservableCollection<product> product { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("OffshoreProductionArea")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("OffshoreProductionArea")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("OffshoreProductionArea")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("OffshoreProductionArea")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("OffshoreProductionArea")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        [Category("OffshoreProductionArea")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private visualProminence? _visualProminence = default;
        [Category("OffshoreProductionArea")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private waterLevelEffect? _waterLevelEffect = default;
        [Category("OffshoreProductionArea")]
        public waterLevelEffect? waterLevelEffect
        {
            get
            {
                return _waterLevelEffect;
            }

            set
            {
                SetValue(ref _waterLevelEffect, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("OffshoreProductionArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("OffshoreProductionArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class OffshoreProductionAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(OffshoreProductionArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.OffshoreProductionArea instance)
        {
            categoryOfOffshoreProductionArea = instance.categoryOfOffshoreProductionArea;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            product.Clear();
            if (instance.product is not null)
                foreach (var e in instance.product)
                    product.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            visualProminence = instance.visualProminence;
            waterLevelEffect = instance.waterLevelEffect;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.OffshoreProductionArea
            {
                categoryOfOffshoreProductionArea = this.categoryOfOffshoreProductionArea,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                product = this.product.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                visualProminence = this.visualProminence,
                waterLevelEffect = this.waterLevelEffect,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.OffshoreProductionArea Model => new()
        {
            categoryOfOffshoreProductionArea = this._categoryOfOffshoreProductionArea,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            product = this.product.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            visualProminence = this._visualProminence,
            waterLevelEffect = this._waterLevelEffect,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public OffshoreProductionAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            product.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(product));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("NavigationLine", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class NavigationLineViewModel : ViewModelBase
    {
        private categoryOfNavigationLine _categoryOfNavigationLine;
        [Category("NavigationLine")]
        public categoryOfNavigationLine categoryOfNavigationLine
        {
            get
            {
                return _categoryOfNavigationLine;
            }

            set
            {
                SetValue(ref _categoryOfNavigationLine, value);
            }
        }

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("NavigationLine")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("NavigationLine")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32? _measuredDistance = default;
        [Category("NavigationLine")]
        public Int32? measuredDistance
        {
            get
            {
                return _measuredDistance;
            }

            set
            {
                SetValue(ref _measuredDistance, value);
            }
        }

        private orientationViewModel _orientation;
        [Category("NavigationLine")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public orientationViewModel orientation
        {
            get
            {
                return _orientation;
            }

            set
            {
                SetValue(ref _orientation, value);
            }
        }

        [Category("NavigationLine")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("NavigationLine")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("NavigationLine")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("NavigationLine")]
        public ObservableCollection<information> information { get; set; } = new();

        public class NavigationLineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NavigationLine)];
        }

        public void Load(DomainModel.S101.FeatureTypes.NavigationLine instance)
        {
            categoryOfNavigationLine = instance.categoryOfNavigationLine;
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            measuredDistance = instance.measuredDistance;
            orientation = new();
            if (instance.orientation != null)
            {
                orientation = new();
                orientation.Load(instance.orientation);
            }

            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.NavigationLine
            {
                categoryOfNavigationLine = this.categoryOfNavigationLine,
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                measuredDistance = this.measuredDistance,
                orientation = this.orientation?.Model,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.NavigationLine Model => new()
        {
            categoryOfNavigationLine = this._categoryOfNavigationLine,
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            measuredDistance = this._measuredDistance,
            orientation = this._orientation?.Model,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public NavigationLineViewModel() : base()
        {
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("RecommendedTrack", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RecommendedTrackViewModel : ViewModelBase
    {
        private Boolean _basedOnFixedMarks;
        [Category("RecommendedTrack")]
        public Boolean basedOnFixedMarks
        {
            get
            {
                return _basedOnFixedMarks;
            }

            set
            {
                SetValue(ref _basedOnFixedMarks, value);
            }
        }

        private Decimal? _depthRangeMinimumValue = default;
        [Category("RecommendedTrack")]
        public Decimal? depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        [Category("RecommendedTrack")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("RecommendedTrack")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("RecommendedTrack")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("RecommendedTrack")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        private Decimal _orientationValue;
        [Category("RecommendedTrack")]
        public Decimal orientationValue
        {
            get
            {
                return _orientationValue;
            }

            set
            {
                SetValue(ref _orientationValue, value);
            }
        }

        [Category("RecommendedTrack")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("RecommendedTrack")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        [Category("RecommendedTrack")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("RecommendedTrack")]
        public ObservableCollection<techniqueOfVerticalMeasurement> techniqueOfVerticalMeasurement { get; set; } = new();

        private trafficFlow _trafficFlow;
        [Category("RecommendedTrack")]
        public trafficFlow trafficFlow
        {
            get
            {
                return _trafficFlow;
            }

            set
            {
                SetValue(ref _trafficFlow, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("RecommendedTrack")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("RecommendedTrack")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("RecommendedTrack")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RecommendedTrackRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RecommendedTrack)];
        }

        public void Load(DomainModel.S101.FeatureTypes.RecommendedTrack instance)
        {
            basedOnFixedMarks = instance.basedOnFixedMarks;
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            orientationValue = instance.orientationValue;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            techniqueOfVerticalMeasurement.Clear();
            if (instance.techniqueOfVerticalMeasurement is not null)
                foreach (var e in instance.techniqueOfVerticalMeasurement)
                    techniqueOfVerticalMeasurement.Add(e);
            trafficFlow = instance.trafficFlow;
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }

            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.RecommendedTrack
            {
                basedOnFixedMarks = this.basedOnFixedMarks,
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                maximumPermittedDraught = this.maximumPermittedDraught,
                orientationValue = this.orientationValue,
                periodicDateRange = this.periodicDateRange.ToList(),
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                status = this.status.ToList(),
                techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
                trafficFlow = this.trafficFlow,
                verticalUncertainty = this.verticalUncertainty?.Model,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.RecommendedTrack Model => new()
        {
            basedOnFixedMarks = this._basedOnFixedMarks,
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            maximumPermittedDraught = this._maximumPermittedDraught,
            orientationValue = this._orientationValue,
            periodicDateRange = this.periodicDateRange.ToList(),
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            status = this.status.ToList(),
            techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
            trafficFlow = this._trafficFlow,
            verticalUncertainty = this._verticalUncertainty?.Model,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RecommendedTrackViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            techniqueOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(techniqueOfVerticalMeasurement));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("RangeSystem", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RangeSystemViewModel : ViewModelBase
    {
        [Category("RangeSystem")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("RangeSystem")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("RangeSystem")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("RangeSystem")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("RangeSystem")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("RangeSystem")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RangeSystemRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public void Load(DomainModel.S101.FeatureTypes.RangeSystem instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.RangeSystem
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                maximumPermittedDraught = this.maximumPermittedDraught,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.RangeSystem Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            maximumPermittedDraught = this._maximumPermittedDraught,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RangeSystemViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Fairway", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class FairwayViewModel : ViewModelBase
    {
        private Decimal? _depthRangeMinimumValue = default;
        [Category("Fairway")]
        public Decimal? depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        [Category("Fairway")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Fairway")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Fairway")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("Fairway")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        private Decimal? _orientationValue = default;
        [Category("Fairway")]
        public Decimal? orientationValue
        {
            get
            {
                return _orientationValue;
            }

            set
            {
                SetValue(ref _orientationValue, value);
            }
        }

        [Category("Fairway")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        [Category("Fairway")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("Fairway")]
        public ObservableCollection<status> status { get; set; } = new();

        private trafficFlow? _trafficFlow = default;
        [Category("Fairway")]
        public trafficFlow? trafficFlow
        {
            get
            {
                return _trafficFlow;
            }

            set
            {
                SetValue(ref _trafficFlow, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("Fairway")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        [Category("Fairway")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("Fairway")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Fairway")]
        public ObservableCollection<information> information { get; set; } = new();

        public class FairwayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Fairway instance)
        {
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            orientationValue = instance.orientationValue;
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            trafficFlow = instance.trafficFlow;
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }

            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Fairway
            {
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                maximumPermittedDraught = this.maximumPermittedDraught,
                orientationValue = this.orientationValue,
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                trafficFlow = this.trafficFlow,
                verticalUncertainty = this.verticalUncertainty?.Model,
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Fairway Model => new()
        {
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            maximumPermittedDraught = this._maximumPermittedDraught,
            orientationValue = this._orientationValue,
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            trafficFlow = this._trafficFlow,
            verticalUncertainty = this._verticalUncertainty?.Model,
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public FairwayViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("FairwaySystem", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class FairwaySystemViewModel : ViewModelBase
    {
        [Category("FairwaySystem")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("FairwaySystem")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("FairwaySystem")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("FairwaySystem")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        [Category("FairwaySystem")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("FairwaySystem")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("FairwaySystem")]
        public ObservableCollection<information> information { get; set; } = new();

        public class FairwaySystemRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FairwaySystem)];
        }

        public void Load(DomainModel.S101.FeatureTypes.FairwaySystem instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.FairwaySystem
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                maximumPermittedDraught = this.maximumPermittedDraught,
                periodicDateRange = this.periodicDateRange.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.FairwaySystem Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            maximumPermittedDraught = this._maximumPermittedDraught,
            periodicDateRange = this.periodicDateRange.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public FairwaySystemViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("RecommendedRouteCentreline", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RecommendedRouteCentrelineViewModel : ViewModelBase
    {
        private Boolean _basedOnFixedMarks;
        [Category("RecommendedRouteCentreline")]
        public Boolean basedOnFixedMarks
        {
            get
            {
                return _basedOnFixedMarks;
            }

            set
            {
                SetValue(ref _basedOnFixedMarks, value);
            }
        }

        private Decimal? _depthRangeMinimumValue = default;
        [Category("RecommendedRouteCentreline")]
        public Decimal? depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        [Category("RecommendedRouteCentreline")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("RecommendedRouteCentreline")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("RecommendedRouteCentreline")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _orientationValue = default;
        [Category("RecommendedRouteCentreline")]
        public Decimal? orientationValue
        {
            get
            {
                return _orientationValue;
            }

            set
            {
                SetValue(ref _orientationValue, value);
            }
        }

        [Category("RecommendedRouteCentreline")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("RecommendedRouteCentreline")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        [Category("RecommendedRouteCentreline")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("RecommendedRouteCentreline")]
        public ObservableCollection<techniqueOfVerticalMeasurement> techniqueOfVerticalMeasurement { get; set; } = new();

        private trafficFlow? _trafficFlow = default;
        [Category("RecommendedRouteCentreline")]
        public trafficFlow? trafficFlow
        {
            get
            {
                return _trafficFlow;
            }

            set
            {
                SetValue(ref _trafficFlow, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("RecommendedRouteCentreline")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("RecommendedRouteCentreline")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("RecommendedRouteCentreline")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RecommendedRouteCentrelineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RecommendedRouteCentreline)];
        }

        public void Load(DomainModel.S101.FeatureTypes.RecommendedRouteCentreline instance)
        {
            basedOnFixedMarks = instance.basedOnFixedMarks;
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            orientationValue = instance.orientationValue;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            techniqueOfVerticalMeasurement.Clear();
            if (instance.techniqueOfVerticalMeasurement is not null)
                foreach (var e in instance.techniqueOfVerticalMeasurement)
                    techniqueOfVerticalMeasurement.Add(e);
            trafficFlow = instance.trafficFlow;
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }

            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.RecommendedRouteCentreline
            {
                basedOnFixedMarks = this.basedOnFixedMarks,
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                orientationValue = this.orientationValue,
                periodicDateRange = this.periodicDateRange.ToList(),
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                status = this.status.ToList(),
                techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
                trafficFlow = this.trafficFlow,
                verticalUncertainty = this.verticalUncertainty?.Model,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.RecommendedRouteCentreline Model => new()
        {
            basedOnFixedMarks = this._basedOnFixedMarks,
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            orientationValue = this._orientationValue,
            periodicDateRange = this.periodicDateRange.ToList(),
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            status = this.status.ToList(),
            techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
            trafficFlow = this._trafficFlow,
            verticalUncertainty = this._verticalUncertainty?.Model,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RecommendedRouteCentrelineViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            techniqueOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(techniqueOfVerticalMeasurement));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("TwoWayRoutePart", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class TwoWayRoutePartViewModel : ViewModelBase
    {
        private Boolean? _basedOnFixedMarks = default;
        [Category("TwoWayRoutePart")]
        public Boolean? basedOnFixedMarks
        {
            get
            {
                return _basedOnFixedMarks;
            }

            set
            {
                SetValue(ref _basedOnFixedMarks, value);
            }
        }

        private Decimal? _depthRangeMinimumValue = default;
        [Category("TwoWayRoutePart")]
        public Decimal? depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("TwoWayRoutePart")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("TwoWayRoutePart")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal _orientationValue;
        [Category("TwoWayRoutePart")]
        public Decimal orientationValue
        {
            get
            {
                return _orientationValue;
            }

            set
            {
                SetValue(ref _orientationValue, value);
            }
        }

        [Category("TwoWayRoutePart")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        [Category("TwoWayRoutePart")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("TwoWayRoutePart")]
        public ObservableCollection<techniqueOfVerticalMeasurement> techniqueOfVerticalMeasurement { get; set; } = new();

        private trafficFlow _trafficFlow;
        [Category("TwoWayRoutePart")]
        public trafficFlow trafficFlow
        {
            get
            {
                return _trafficFlow;
            }

            set
            {
                SetValue(ref _trafficFlow, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("TwoWayRoutePart")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("TwoWayRoutePart")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("TwoWayRoutePart")]
        public ObservableCollection<information> information { get; set; } = new();

        public class TwoWayRoutePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TwoWayRoutePart)];
        }

        public void Load(DomainModel.S101.FeatureTypes.TwoWayRoutePart instance)
        {
            basedOnFixedMarks = instance.basedOnFixedMarks;
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            orientationValue = instance.orientationValue;
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            techniqueOfVerticalMeasurement.Clear();
            if (instance.techniqueOfVerticalMeasurement is not null)
                foreach (var e in instance.techniqueOfVerticalMeasurement)
                    techniqueOfVerticalMeasurement.Add(e);
            trafficFlow = instance.trafficFlow;
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }

            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.TwoWayRoutePart
            {
                basedOnFixedMarks = this.basedOnFixedMarks,
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                orientationValue = this.orientationValue,
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                status = this.status.ToList(),
                techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
                trafficFlow = this.trafficFlow,
                verticalUncertainty = this.verticalUncertainty?.Model,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.TwoWayRoutePart Model => new()
        {
            basedOnFixedMarks = this._basedOnFixedMarks,
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            orientationValue = this._orientationValue,
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            status = this.status.ToList(),
            techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
            trafficFlow = this._trafficFlow,
            verticalUncertainty = this._verticalUncertainty?.Model,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public TwoWayRoutePartViewModel() : base()
        {
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            techniqueOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(techniqueOfVerticalMeasurement));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("TwoWayRoute", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class TwoWayRouteViewModel : ViewModelBase
    {
        [Category("TwoWayRoute")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("TwoWayRoute")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("TwoWayRoute")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("TwoWayRoute")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("TwoWayRoute")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("TwoWayRoute")]
        public ObservableCollection<information> information { get; set; } = new();

        public class TwoWayRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TwoWayRoute)];
        }

        public void Load(DomainModel.S101.FeatureTypes.TwoWayRoute instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.TwoWayRoute
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                maximumPermittedDraught = this.maximumPermittedDraught,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.TwoWayRoute Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            maximumPermittedDraught = this._maximumPermittedDraught,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public TwoWayRouteViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("RecommendedTrafficLanePart", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RecommendedTrafficLanePartViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("RecommendedTrafficLanePart")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("RecommendedTrafficLanePart")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal _orientationValue;
        [Category("RecommendedTrafficLanePart")]
        public Decimal orientationValue
        {
            get
            {
                return _orientationValue;
            }

            set
            {
                SetValue(ref _orientationValue, value);
            }
        }

        [Category("RecommendedTrafficLanePart")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("RecommendedTrafficLanePart")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("RecommendedTrafficLanePart")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RecommendedTrafficLanePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RecommendedTrafficLanePart)];
        }

        public void Load(DomainModel.S101.FeatureTypes.RecommendedTrafficLanePart instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            orientationValue = instance.orientationValue;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.RecommendedTrafficLanePart
            {
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                orientationValue = this.orientationValue,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.RecommendedTrafficLanePart Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            orientationValue = this._orientationValue,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RecommendedTrafficLanePartViewModel() : base()
        {
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("DeepWaterRouteCentreline", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DeepWaterRouteCentrelineViewModel : ViewModelBase
    {
        private Boolean _basedOnFixedMarks;
        [Category("DeepWaterRouteCentreline")]
        public Boolean basedOnFixedMarks
        {
            get
            {
                return _basedOnFixedMarks;
            }

            set
            {
                SetValue(ref _basedOnFixedMarks, value);
            }
        }

        private Decimal? _depthRangeMinimumValue = default;
        [Category("DeepWaterRouteCentreline")]
        public Decimal? depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        [Category("DeepWaterRouteCentreline")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("DeepWaterRouteCentreline")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Boolean? _iMOAdopted = default;
        [Category("DeepWaterRouteCentreline")]
        public Boolean? iMOAdopted
        {
            get
            {
                return _iMOAdopted;
            }

            set
            {
                SetValue(ref _iMOAdopted, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("DeepWaterRouteCentreline")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal _orientationValue;
        [Category("DeepWaterRouteCentreline")]
        public Decimal orientationValue
        {
            get
            {
                return _orientationValue;
            }

            set
            {
                SetValue(ref _orientationValue, value);
            }
        }

        [Category("DeepWaterRouteCentreline")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        [Category("DeepWaterRouteCentreline")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("DeepWaterRouteCentreline")]
        public ObservableCollection<techniqueOfVerticalMeasurement> techniqueOfVerticalMeasurement { get; set; } = new();

        private trafficFlow _trafficFlow;
        [Category("DeepWaterRouteCentreline")]
        public trafficFlow trafficFlow
        {
            get
            {
                return _trafficFlow;
            }

            set
            {
                SetValue(ref _trafficFlow, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("DeepWaterRouteCentreline")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("DeepWaterRouteCentreline")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("DeepWaterRouteCentreline")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DeepWaterRouteCentrelineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRouteCentreline)];
        }

        public void Load(DomainModel.S101.FeatureTypes.DeepWaterRouteCentreline instance)
        {
            basedOnFixedMarks = instance.basedOnFixedMarks;
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            iMOAdopted = instance.iMOAdopted;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            orientationValue = instance.orientationValue;
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            techniqueOfVerticalMeasurement.Clear();
            if (instance.techniqueOfVerticalMeasurement is not null)
                foreach (var e in instance.techniqueOfVerticalMeasurement)
                    techniqueOfVerticalMeasurement.Add(e);
            trafficFlow = instance.trafficFlow;
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }

            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.DeepWaterRouteCentreline
            {
                basedOnFixedMarks = this.basedOnFixedMarks,
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                iMOAdopted = this.iMOAdopted,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                orientationValue = this.orientationValue,
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                status = this.status.ToList(),
                techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
                trafficFlow = this.trafficFlow,
                verticalUncertainty = this.verticalUncertainty?.Model,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.DeepWaterRouteCentreline Model => new()
        {
            basedOnFixedMarks = this._basedOnFixedMarks,
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            iMOAdopted = this._iMOAdopted,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            orientationValue = this._orientationValue,
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            status = this.status.ToList(),
            techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
            trafficFlow = this._trafficFlow,
            verticalUncertainty = this._verticalUncertainty?.Model,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public DeepWaterRouteCentrelineViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            techniqueOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(techniqueOfVerticalMeasurement));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("DeepWaterRoutePart", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DeepWaterRoutePartViewModel : ViewModelBase
    {
        private Decimal _depthRangeMinimumValue;
        [Category("DeepWaterRoutePart")]
        public Decimal depthRangeMinimumValue
        {
            get
            {
                return _depthRangeMinimumValue;
            }

            set
            {
                SetValue(ref _depthRangeMinimumValue, value);
            }
        }

        [Category("DeepWaterRoutePart")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("DeepWaterRoutePart")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Boolean? _iMOAdopted = default;
        [Category("DeepWaterRoutePart")]
        public Boolean? iMOAdopted
        {
            get
            {
                return _iMOAdopted;
            }

            set
            {
                SetValue(ref _iMOAdopted, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("DeepWaterRoutePart")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal _orientationValue;
        [Category("DeepWaterRoutePart")]
        public Decimal orientationValue
        {
            get
            {
                return _orientationValue;
            }

            set
            {
                SetValue(ref _orientationValue, value);
            }
        }

        [Category("DeepWaterRoutePart")]
        public ObservableCollection<qualityOfVerticalMeasurement> qualityOfVerticalMeasurement { get; set; } = new();

        [Category("DeepWaterRoutePart")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("DeepWaterRoutePart")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("DeepWaterRoutePart")]
        public ObservableCollection<techniqueOfVerticalMeasurement> techniqueOfVerticalMeasurement { get; set; } = new();

        private trafficFlow _trafficFlow;
        [Category("DeepWaterRoutePart")]
        public trafficFlow trafficFlow
        {
            get
            {
                return _trafficFlow;
            }

            set
            {
                SetValue(ref _trafficFlow, value);
            }
        }

        private verticalUncertaintyViewModel? _verticalUncertainty;
        [Category("DeepWaterRoutePart")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public verticalUncertaintyViewModel? verticalUncertainty
        {
            get
            {
                return _verticalUncertainty;
            }

            set
            {
                SetValue(ref _verticalUncertainty, value);
            }
        }

        [Category("DeepWaterRoutePart")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("DeepWaterRoutePart")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("DeepWaterRoutePart")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DeepWaterRoutePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoutePart)];
        }

        public void Load(DomainModel.S101.FeatureTypes.DeepWaterRoutePart instance)
        {
            depthRangeMinimumValue = instance.depthRangeMinimumValue;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            iMOAdopted = instance.iMOAdopted;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            orientationValue = instance.orientationValue;
            qualityOfVerticalMeasurement.Clear();
            if (instance.qualityOfVerticalMeasurement is not null)
                foreach (var e in instance.qualityOfVerticalMeasurement)
                    qualityOfVerticalMeasurement.Add(e);
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            techniqueOfVerticalMeasurement.Clear();
            if (instance.techniqueOfVerticalMeasurement is not null)
                foreach (var e in instance.techniqueOfVerticalMeasurement)
                    techniqueOfVerticalMeasurement.Add(e);
            trafficFlow = instance.trafficFlow;
            verticalUncertainty = new();
            if (instance.verticalUncertainty != null)
            {
                verticalUncertainty = new();
                verticalUncertainty.Load(instance.verticalUncertainty);
            }

            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.DeepWaterRoutePart
            {
                depthRangeMinimumValue = this.depthRangeMinimumValue,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                iMOAdopted = this.iMOAdopted,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                orientationValue = this.orientationValue,
                qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
                trafficFlow = this.trafficFlow,
                verticalUncertainty = this.verticalUncertainty?.Model,
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.DeepWaterRoutePart Model => new()
        {
            depthRangeMinimumValue = this._depthRangeMinimumValue,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            iMOAdopted = this._iMOAdopted,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            orientationValue = this._orientationValue,
            qualityOfVerticalMeasurement = this.qualityOfVerticalMeasurement.ToList(),
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            techniqueOfVerticalMeasurement = this.techniqueOfVerticalMeasurement.ToList(),
            trafficFlow = this._trafficFlow,
            verticalUncertainty = this._verticalUncertainty?.Model,
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public DeepWaterRoutePartViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            qualityOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(qualityOfVerticalMeasurement));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            techniqueOfVerticalMeasurement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(techniqueOfVerticalMeasurement));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("DeepWaterRoute", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DeepWaterRouteViewModel : ViewModelBase
    {
        [Category("DeepWaterRoute")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("DeepWaterRoute")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Boolean? _iMOAdopted = default;
        [Category("DeepWaterRoute")]
        public Boolean? iMOAdopted
        {
            get
            {
                return _iMOAdopted;
            }

            set
            {
                SetValue(ref _iMOAdopted, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("DeepWaterRoute")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("DeepWaterRoute")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("DeepWaterRoute")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DeepWaterRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute)];
        }

        public void Load(DomainModel.S101.FeatureTypes.DeepWaterRoute instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            iMOAdopted = instance.iMOAdopted;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.DeepWaterRoute
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                iMOAdopted = this.iMOAdopted,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.DeepWaterRoute Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            iMOAdopted = this._iMOAdopted,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public DeepWaterRouteViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("InshoreTrafficZone", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class InshoreTrafficZoneViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("InshoreTrafficZone")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("InshoreTrafficZone")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("InshoreTrafficZone")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("InshoreTrafficZone")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("InshoreTrafficZone")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("InshoreTrafficZone")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("InshoreTrafficZone")]
        public ObservableCollection<information> information { get; set; } = new();

        public class InshoreTrafficZoneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(InshoreTrafficZone)];
        }

        public void Load(DomainModel.S101.FeatureTypes.InshoreTrafficZone instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.InshoreTrafficZone
            {
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.InshoreTrafficZone Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public InshoreTrafficZoneViewModel() : base()
        {
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("PrecautionaryArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class PrecautionaryAreaViewModel : ViewModelBase
    {
        [Category("PrecautionaryArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("PrecautionaryArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Boolean? _iMOAdopted = default;
        [Category("PrecautionaryArea")]
        public Boolean? iMOAdopted
        {
            get
            {
                return _iMOAdopted;
            }

            set
            {
                SetValue(ref _iMOAdopted, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("PrecautionaryArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("PrecautionaryArea")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("PrecautionaryArea")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("PrecautionaryArea")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("PrecautionaryArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("PrecautionaryArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class PrecautionaryAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(PrecautionaryArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.PrecautionaryArea instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            iMOAdopted = instance.iMOAdopted;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.PrecautionaryArea
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                iMOAdopted = this.iMOAdopted,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.PrecautionaryArea Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            iMOAdopted = this._iMOAdopted,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public PrecautionaryAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("TrafficSeparationSchemeLanePart", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class TrafficSeparationSchemeLanePartViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("TrafficSeparationSchemeLanePart")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("TrafficSeparationSchemeLanePart")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _orientationValue = default;
        [Category("TrafficSeparationSchemeLanePart")]
        public Decimal? orientationValue
        {
            get
            {
                return _orientationValue;
            }

            set
            {
                SetValue(ref _orientationValue, value);
            }
        }

        [Category("TrafficSeparationSchemeLanePart")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("TrafficSeparationSchemeLanePart")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("TrafficSeparationSchemeLanePart")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("TrafficSeparationSchemeLanePart")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("TrafficSeparationSchemeLanePart")]
        public ObservableCollection<information> information { get; set; } = new();

        public class TrafficSeparationSchemeLanePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationSchemeLanePart)];
        }

        public void Load(DomainModel.S101.FeatureTypes.TrafficSeparationSchemeLanePart instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            orientationValue = instance.orientationValue;
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.TrafficSeparationSchemeLanePart
            {
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                orientationValue = this.orientationValue,
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.TrafficSeparationSchemeLanePart Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            orientationValue = this._orientationValue,
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public TrafficSeparationSchemeLanePartViewModel() : base()
        {
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SeparationZoneOrLine", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SeparationZoneOrLineViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("SeparationZoneOrLine")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SeparationZoneOrLine")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("SeparationZoneOrLine")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("SeparationZoneOrLine")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SeparationZoneOrLine")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SeparationZoneOrLineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SeparationZoneOrLine)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SeparationZoneOrLine instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SeparationZoneOrLine
            {
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SeparationZoneOrLine Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SeparationZoneOrLineViewModel() : base()
        {
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("TrafficSeparationSchemeBoundary", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class TrafficSeparationSchemeBoundaryViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("TrafficSeparationSchemeBoundary")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("TrafficSeparationSchemeBoundary")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("TrafficSeparationSchemeBoundary")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("TrafficSeparationSchemeBoundary")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("TrafficSeparationSchemeBoundary")]
        public ObservableCollection<information> information { get; set; } = new();

        public class TrafficSeparationSchemeBoundaryRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationSchemeBoundary)];
        }

        public void Load(DomainModel.S101.FeatureTypes.TrafficSeparationSchemeBoundary instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.TrafficSeparationSchemeBoundary
            {
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.TrafficSeparationSchemeBoundary Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public TrafficSeparationSchemeBoundaryViewModel() : base()
        {
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("TrafficSeparationSchemeCrossing", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class TrafficSeparationSchemeCrossingViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("TrafficSeparationSchemeCrossing")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("TrafficSeparationSchemeCrossing")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("TrafficSeparationSchemeCrossing")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("TrafficSeparationSchemeCrossing")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("TrafficSeparationSchemeCrossing")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("TrafficSeparationSchemeCrossing")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("TrafficSeparationSchemeCrossing")]
        public ObservableCollection<information> information { get; set; } = new();

        public class TrafficSeparationSchemeCrossingRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationSchemeCrossing)];
        }

        public void Load(DomainModel.S101.FeatureTypes.TrafficSeparationSchemeCrossing instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.TrafficSeparationSchemeCrossing
            {
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.TrafficSeparationSchemeCrossing Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public TrafficSeparationSchemeCrossingViewModel() : base()
        {
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("TrafficSeparationSchemeRoundabout", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class TrafficSeparationSchemeRoundaboutViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("TrafficSeparationSchemeRoundabout")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("TrafficSeparationSchemeRoundabout")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("TrafficSeparationSchemeRoundabout")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("TrafficSeparationSchemeRoundabout")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("TrafficSeparationSchemeRoundabout")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("TrafficSeparationSchemeRoundabout")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("TrafficSeparationSchemeRoundabout")]
        public ObservableCollection<information> information { get; set; } = new();

        public class TrafficSeparationSchemeRoundaboutRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationSchemeRoundabout)];
        }

        public void Load(DomainModel.S101.FeatureTypes.TrafficSeparationSchemeRoundabout instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.TrafficSeparationSchemeRoundabout
            {
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.TrafficSeparationSchemeRoundabout Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public TrafficSeparationSchemeRoundaboutViewModel() : base()
        {
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("TrafficSeparationScheme", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class TrafficSeparationSchemeViewModel : ViewModelBase
    {
        [Category("TrafficSeparationScheme")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("TrafficSeparationScheme")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Boolean? _iMOAdopted = default;
        [Category("TrafficSeparationScheme")]
        public Boolean? iMOAdopted
        {
            get
            {
                return _iMOAdopted;
            }

            set
            {
                SetValue(ref _iMOAdopted, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("TrafficSeparationScheme")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("TrafficSeparationScheme")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("TrafficSeparationScheme")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("TrafficSeparationScheme")]
        public ObservableCollection<information> information { get; set; } = new();

        public class TrafficSeparationSchemeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public void Load(DomainModel.S101.FeatureTypes.TrafficSeparationScheme instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            iMOAdopted = instance.iMOAdopted;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.TrafficSeparationScheme
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                iMOAdopted = this.iMOAdopted,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                maximumPermittedDraught = this.maximumPermittedDraught,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.TrafficSeparationScheme Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            iMOAdopted = this._iMOAdopted,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            maximumPermittedDraught = this._maximumPermittedDraught,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public TrafficSeparationSchemeViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("ArchipelagicSeaLaneArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class ArchipelagicSeaLaneAreaViewModel : ViewModelBase
    {
        [Category("ArchipelagicSeaLaneArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("ArchipelagicSeaLaneArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("ArchipelagicSeaLaneArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private String _nationality = string.Empty;
        [Category("ArchipelagicSeaLaneArea")]
        public String nationality
        {
            get
            {
                return _nationality;
            }

            set
            {
                SetValue(ref _nationality, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("ArchipelagicSeaLaneArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("ArchipelagicSeaLaneArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class ArchipelagicSeaLaneAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLaneArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.ArchipelagicSeaLaneArea instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            nationality = instance.nationality;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.ArchipelagicSeaLaneArea
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                nationality = this.nationality,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.ArchipelagicSeaLaneArea Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            nationality = this._nationality,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public ArchipelagicSeaLaneAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("ArchipelagicSeaLaneAxis", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class ArchipelagicSeaLaneAxisViewModel : ViewModelBase
    {
        [Category("ArchipelagicSeaLaneAxis")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("ArchipelagicSeaLaneAxis")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("ArchipelagicSeaLaneAxis")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private String _nationality = string.Empty;
        [Category("ArchipelagicSeaLaneAxis")]
        public String nationality
        {
            get
            {
                return _nationality;
            }

            set
            {
                SetValue(ref _nationality, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("ArchipelagicSeaLaneAxis")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("ArchipelagicSeaLaneAxis")]
        public ObservableCollection<information> information { get; set; } = new();

        public class ArchipelagicSeaLaneAxisRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLaneAxis)];
        }

        public void Load(DomainModel.S101.FeatureTypes.ArchipelagicSeaLaneAxis instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            nationality = instance.nationality;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.ArchipelagicSeaLaneAxis
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                nationality = this.nationality,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.ArchipelagicSeaLaneAxis Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            nationality = this._nationality,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public ArchipelagicSeaLaneAxisViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("ArchipelagicSeaLane", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class ArchipelagicSeaLaneViewModel : ViewModelBase
    {
        [Category("ArchipelagicSeaLane")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("ArchipelagicSeaLane")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("ArchipelagicSeaLane")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private String _nationality = string.Empty;
        [Category("ArchipelagicSeaLane")]
        public String nationality
        {
            get
            {
                return _nationality;
            }

            set
            {
                SetValue(ref _nationality, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("ArchipelagicSeaLane")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("ArchipelagicSeaLane")]
        public ObservableCollection<information> information { get; set; } = new();

        public class ArchipelagicSeaLaneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane)];
        }

        public void Load(DomainModel.S101.FeatureTypes.ArchipelagicSeaLane instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            nationality = instance.nationality;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.ArchipelagicSeaLane
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                nationality = this.nationality,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.ArchipelagicSeaLane Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            nationality = this._nationality,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public ArchipelagicSeaLaneViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("RadioCallingInPoint", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RadioCallingInPointViewModel : ViewModelBase
    {
        [Category("RadioCallingInPoint")]
        public ObservableCollection<String> communicationChannel { get; set; } = new();

        [Category("RadioCallingInPoint")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("RadioCallingInPoint")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("RadioCallingInPoint")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("RadioCallingInPoint")]
        public ObservableCollection<Decimal> orientationValue { get; set; } = new();

        [Category("RadioCallingInPoint")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("RadioCallingInPoint")]
        public ObservableCollection<status> status { get; set; } = new();

        private trafficFlow _trafficFlow;
        [Category("RadioCallingInPoint")]
        public trafficFlow trafficFlow
        {
            get
            {
                return _trafficFlow;
            }

            set
            {
                SetValue(ref _trafficFlow, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("RadioCallingInPoint")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("RadioCallingInPoint")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RadioCallingInPointRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RadioCallingInPoint)];
        }

        public void Load(DomainModel.S101.FeatureTypes.RadioCallingInPoint instance)
        {
            communicationChannel.Clear();
            if (instance.communicationChannel is not null)
                foreach (var e in instance.communicationChannel)
                    communicationChannel.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            orientationValue.Clear();
            if (instance.orientationValue is not null)
                foreach (var e in instance.orientationValue)
                    orientationValue.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            trafficFlow = instance.trafficFlow;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.RadioCallingInPoint
            {
                communicationChannel = this.communicationChannel.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                orientationValue = this.orientationValue.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                trafficFlow = this.trafficFlow,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.RadioCallingInPoint Model => new()
        {
            communicationChannel = this.communicationChannel.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            orientationValue = this.orientationValue.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            trafficFlow = this._trafficFlow,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RadioCallingInPointViewModel() : base()
        {
            communicationChannel.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(communicationChannel));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            orientationValue.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(orientationValue));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("FerryRoute", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class FerryRouteViewModel : ViewModelBase
    {
        [Category("FerryRoute")]
        public ObservableCollection<categoryOfFerry> categoryOfFerry { get; set; } = new();

        [Category("FerryRoute")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("FerryRoute")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("FerryRoute")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("FerryRoute")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("FerryRoute")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("FerryRoute")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("FerryRoute")]
        public ObservableCollection<information> information { get; set; } = new();

        public class FerryRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FerryRoute)];
        }

        public void Load(DomainModel.S101.FeatureTypes.FerryRoute instance)
        {
            categoryOfFerry.Clear();
            if (instance.categoryOfFerry is not null)
                foreach (var e in instance.categoryOfFerry)
                    categoryOfFerry.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.FerryRoute
            {
                categoryOfFerry = this.categoryOfFerry.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.FerryRoute Model => new()
        {
            categoryOfFerry = this.categoryOfFerry.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public FerryRouteViewModel() : base()
        {
            categoryOfFerry.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfFerry));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("RadarLine", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RadarLineViewModel : ViewModelBase
    {
        [Category("RadarLine")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("RadarLine")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal _orientationValue;
        [Category("RadarLine")]
        public Decimal orientationValue
        {
            get
            {
                return _orientationValue;
            }

            set
            {
                SetValue(ref _orientationValue, value);
            }
        }

        [Category("RadarLine")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("RadarLine")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("RadarLine")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RadarLineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RadarLine)];
        }

        public void Load(DomainModel.S101.FeatureTypes.RadarLine instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            orientationValue = instance.orientationValue;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.RadarLine
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                orientationValue = this.orientationValue,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.RadarLine Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            orientationValue = this._orientationValue,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RadarLineViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("RadarRange", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RadarRangeViewModel : ViewModelBase
    {
        [Category("RadarRange")]
        public ObservableCollection<String> communicationChannel { get; set; } = new();

        [Category("RadarRange")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("RadarRange")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("RadarRange")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("RadarRange")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("RadarRange")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("RadarRange")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RadarRangeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RadarRange)];
        }

        public void Load(DomainModel.S101.FeatureTypes.RadarRange instance)
        {
            communicationChannel.Clear();
            if (instance.communicationChannel is not null)
                foreach (var e in instance.communicationChannel)
                    communicationChannel.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.RadarRange
            {
                communicationChannel = this.communicationChannel.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.RadarRange Model => new()
        {
            communicationChannel = this.communicationChannel.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RadarRangeViewModel() : base()
        {
            communicationChannel.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(communicationChannel));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("RadarStation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RadarStationViewModel : ViewModelBase
    {
        private String _callSign = string.Empty;
        [Category("RadarStation")]
        public String callSign
        {
            get
            {
                return _callSign;
            }

            set
            {
                SetValue(ref _callSign, value);
            }
        }

        [Category("RadarStation")]
        public ObservableCollection<categoryOfRadarStation> categoryOfRadarStation { get; set; } = new();

        [Category("RadarStation")]
        public ObservableCollection<String> communicationChannel { get; set; } = new();

        [Category("RadarStation")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private Decimal? _height = default;
        [Category("RadarStation")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("RadarStation")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("RadarStation")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("RadarStation")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _valueOfMaximumRange = default;
        [Category("RadarStation")]
        public Decimal? valueOfMaximumRange
        {
            get
            {
                return _valueOfMaximumRange;
            }

            set
            {
                SetValue(ref _valueOfMaximumRange, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("RadarStation")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("RadarStation")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RadarStationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RadarStation)];
        }

        public void Load(DomainModel.S101.FeatureTypes.RadarStation instance)
        {
            callSign = instance.callSign;
            categoryOfRadarStation.Clear();
            if (instance.categoryOfRadarStation is not null)
                foreach (var e in instance.categoryOfRadarStation)
                    categoryOfRadarStation.Add(e);
            communicationChannel.Clear();
            if (instance.communicationChannel is not null)
                foreach (var e in instance.communicationChannel)
                    communicationChannel.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            valueOfMaximumRange = instance.valueOfMaximumRange;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.RadarStation
            {
                callSign = this.callSign,
                categoryOfRadarStation = this.categoryOfRadarStation.ToList(),
                communicationChannel = this.communicationChannel.ToList(),
                featureName = this.featureName.ToList(),
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                valueOfMaximumRange = this.valueOfMaximumRange,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.RadarStation Model => new()
        {
            callSign = this._callSign,
            categoryOfRadarStation = this.categoryOfRadarStation.ToList(),
            communicationChannel = this.communicationChannel.ToList(),
            featureName = this.featureName.ToList(),
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            valueOfMaximumRange = this._valueOfMaximumRange,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RadarStationViewModel() : base()
        {
            categoryOfRadarStation.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfRadarStation));
            };
            communicationChannel.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(communicationChannel));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("AnchorageArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class AnchorageAreaViewModel : ViewModelBase
    {
        [Category("AnchorageArea")]
        public ObservableCollection<categoryOfAnchorage> categoryOfAnchorage { get; set; } = new();

        [Category("AnchorageArea")]
        public ObservableCollection<categoryOfCargo> categoryOfCargo { get; set; } = new();

        [Category("AnchorageArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("AnchorageArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("AnchorageArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("AnchorageArea")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("AnchorageArea")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("AnchorageArea")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("AnchorageArea")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("AnchorageArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("AnchorageArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class AnchorageAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(AnchorageArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.AnchorageArea instance)
        {
            categoryOfAnchorage.Clear();
            if (instance.categoryOfAnchorage is not null)
                foreach (var e in instance.categoryOfAnchorage)
                    categoryOfAnchorage.Add(e);
            categoryOfCargo.Clear();
            if (instance.categoryOfCargo is not null)
                foreach (var e in instance.categoryOfCargo)
                    categoryOfCargo.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.AnchorageArea
            {
                categoryOfAnchorage = this.categoryOfAnchorage.ToList(),
                categoryOfCargo = this.categoryOfCargo.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.AnchorageArea Model => new()
        {
            categoryOfAnchorage = this.categoryOfAnchorage.ToList(),
            categoryOfCargo = this.categoryOfCargo.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public AnchorageAreaViewModel() : base()
        {
            categoryOfAnchorage.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfAnchorage));
            };
            categoryOfCargo.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfCargo));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("MooringArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class MooringAreaViewModel : ViewModelBase
    {
        [Category("MooringArea")]
        public ObservableCollection<categoryOfMooringArea> categoryOfMooringArea { get; set; } = new();

        [Category("MooringArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("MooringArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("MooringArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("MooringArea")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        private Decimal? _maximumPermittedVesselLength = default;
        [Category("MooringArea")]
        public Decimal? maximumPermittedVesselLength
        {
            get
            {
                return _maximumPermittedVesselLength;
            }

            set
            {
                SetValue(ref _maximumPermittedVesselLength, value);
            }
        }

        [Category("MooringArea")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("MooringArea")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("MooringArea")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("MooringArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("MooringArea")]
        public ObservableCollection<information> information { get; set; } = new();

        [Category("MooringArea")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        public class MooringAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(MooringArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.MooringArea instance)
        {
            categoryOfMooringArea.Clear();
            if (instance.categoryOfMooringArea is not null)
                foreach (var e in instance.categoryOfMooringArea)
                    categoryOfMooringArea.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            maximumPermittedVesselLength = instance.maximumPermittedVesselLength;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.MooringArea
            {
                categoryOfMooringArea = this.categoryOfMooringArea.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                maximumPermittedDraught = this.maximumPermittedDraught,
                maximumPermittedVesselLength = this.maximumPermittedVesselLength,
                periodicDateRange = this.periodicDateRange.ToList(),
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.MooringArea Model => new()
        {
            categoryOfMooringArea = this.categoryOfMooringArea.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            maximumPermittedDraught = this._maximumPermittedDraught,
            maximumPermittedVesselLength = this._maximumPermittedVesselLength,
            periodicDateRange = this.periodicDateRange.ToList(),
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
        };

        public MooringAreaViewModel() : base()
        {
            categoryOfMooringArea.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfMooringArea));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
        }
    }

    [CategoryOrder("AnchorBerth", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class AnchorBerthViewModel : ViewModelBase
    {
        [Category("AnchorBerth")]
        public ObservableCollection<categoryOfAnchorage> categoryOfAnchorage { get; set; } = new();

        [Category("AnchorBerth")]
        public ObservableCollection<categoryOfCargo> categoryOfCargo { get; set; } = new();

        [Category("AnchorBerth")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("AnchorBerth")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("AnchorBerth")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("AnchorBerth")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Decimal? _radius = default;
        [Category("AnchorBerth")]
        public Decimal? radius
        {
            get
            {
                return _radius;
            }

            set
            {
                SetValue(ref _radius, value);
            }
        }

        [Category("AnchorBerth")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("AnchorBerth")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("AnchorBerth")]
        public ObservableCollection<information> information { get; set; } = new();

        public class AnchorBerthRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(AnchorBerth)];
        }

        public void Load(DomainModel.S101.FeatureTypes.AnchorBerth instance)
        {
            categoryOfAnchorage.Clear();
            if (instance.categoryOfAnchorage is not null)
                foreach (var e in instance.categoryOfAnchorage)
                    categoryOfAnchorage.Add(e);
            categoryOfCargo.Clear();
            if (instance.categoryOfCargo is not null)
                foreach (var e in instance.categoryOfCargo)
                    categoryOfCargo.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radius = instance.radius;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.AnchorBerth
            {
                categoryOfAnchorage = this.categoryOfAnchorage.ToList(),
                categoryOfCargo = this.categoryOfCargo.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                radius = this.radius,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.AnchorBerth Model => new()
        {
            categoryOfAnchorage = this.categoryOfAnchorage.ToList(),
            categoryOfCargo = this.categoryOfCargo.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            radius = this._radius,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public AnchorBerthViewModel() : base()
        {
            categoryOfAnchorage.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfAnchorage));
            };
            categoryOfCargo.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfCargo));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SeaplaneLandingArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SeaplaneLandingAreaViewModel : ViewModelBase
    {
        [Category("SeaplaneLandingArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SeaplaneLandingArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("SeaplaneLandingArea")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("SeaplaneLandingArea")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("SeaplaneLandingArea")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("SeaplaneLandingArea")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("SeaplaneLandingArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SeaplaneLandingArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SeaplaneLandingAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SeaplaneLandingArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SeaplaneLandingArea instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SeaplaneLandingArea
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SeaplaneLandingArea Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SeaplaneLandingAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("DumpingGround", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DumpingGroundViewModel : ViewModelBase
    {
        [Category("DumpingGround")]
        public ObservableCollection<categoryOfDumpingGround> categoryOfDumpingGround { get; set; } = new();

        private DateOnly? _dateDisused = default;
        [Category("DumpingGround")]
        public DateOnly? dateDisused
        {
            get
            {
                return _dateDisused;
            }

            set
            {
                SetValue(ref _dateDisused, value);
            }
        }

        [Category("DumpingGround")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("DumpingGround")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("DumpingGround")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("DumpingGround")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("DumpingGround")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("DumpingGround")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("DumpingGround")]
        public ObservableCollection<information> information { get; set; } = new();

        public class DumpingGroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DumpingGround)];
        }

        public void Load(DomainModel.S101.FeatureTypes.DumpingGround instance)
        {
            categoryOfDumpingGround.Clear();
            if (instance.categoryOfDumpingGround is not null)
                foreach (var e in instance.categoryOfDumpingGround)
                    categoryOfDumpingGround.Add(e);
            dateDisused = instance.dateDisused;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.DumpingGround
            {
                categoryOfDumpingGround = this.categoryOfDumpingGround.ToList(),
                dateDisused = this.dateDisused,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.DumpingGround Model => new()
        {
            categoryOfDumpingGround = this.categoryOfDumpingGround.ToList(),
            dateDisused = this._dateDisused,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public DumpingGroundViewModel() : base()
        {
            categoryOfDumpingGround.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfDumpingGround));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("MilitaryPracticeArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class MilitaryPracticeAreaViewModel : ViewModelBase
    {
        [Category("MilitaryPracticeArea")]
        public ObservableCollection<categoryOfMilitaryPracticeArea> categoryOfMilitaryPracticeArea { get; set; } = new();

        [Category("MilitaryPracticeArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("MilitaryPracticeArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("MilitaryPracticeArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private String _nationality = string.Empty;
        [Category("MilitaryPracticeArea")]
        public String nationality
        {
            get
            {
                return _nationality;
            }

            set
            {
                SetValue(ref _nationality, value);
            }
        }

        [Category("MilitaryPracticeArea")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("MilitaryPracticeArea")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("MilitaryPracticeArea")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("MilitaryPracticeArea")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("MilitaryPracticeArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("MilitaryPracticeArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class MilitaryPracticeAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(MilitaryPracticeArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.MilitaryPracticeArea instance)
        {
            categoryOfMilitaryPracticeArea.Clear();
            if (instance.categoryOfMilitaryPracticeArea is not null)
                foreach (var e in instance.categoryOfMilitaryPracticeArea)
                    categoryOfMilitaryPracticeArea.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            nationality = instance.nationality;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.MilitaryPracticeArea
            {
                categoryOfMilitaryPracticeArea = this.categoryOfMilitaryPracticeArea.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                nationality = this.nationality,
                periodicDateRange = this.periodicDateRange.ToList(),
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.MilitaryPracticeArea Model => new()
        {
            categoryOfMilitaryPracticeArea = this.categoryOfMilitaryPracticeArea.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            nationality = this._nationality,
            periodicDateRange = this.periodicDateRange.ToList(),
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public MilitaryPracticeAreaViewModel() : base()
        {
            categoryOfMilitaryPracticeArea.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfMilitaryPracticeArea));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("AdministrationArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class AdministrationAreaViewModel : ViewModelBase
    {
        private Boolean? _inDispute = default;
        [Category("AdministrationArea")]
        public Boolean? inDispute
        {
            get
            {
                return _inDispute;
            }

            set
            {
                SetValue(ref _inDispute, value);
            }
        }

        private jurisdiction _jurisdiction;
        [Category("AdministrationArea")]
        public jurisdiction jurisdiction
        {
            get
            {
                return _jurisdiction;
            }

            set
            {
                SetValue(ref _jurisdiction, value);
            }
        }

        [Category("AdministrationArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("AdministrationArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("AdministrationArea")]
        public ObservableCollection<String> nationality { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("AdministrationArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("AdministrationArea")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("AdministrationArea")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class AdministrationAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(AdministrationArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.AdministrationArea instance)
        {
            inDispute = instance.inDispute;
            jurisdiction = instance.jurisdiction;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            nationality.Clear();
            if (instance.nationality is not null)
                foreach (var e in instance.nationality)
                    nationality.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.AdministrationArea
            {
                inDispute = this.inDispute,
                jurisdiction = this.jurisdiction,
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                nationality = this.nationality.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.AdministrationArea Model => new()
        {
            inDispute = this._inDispute,
            jurisdiction = this._jurisdiction,
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            nationality = this.nationality.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public AdministrationAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            nationality.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(nationality));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("CargoTranshipmentArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CargoTranshipmentAreaViewModel : ViewModelBase
    {
        [Category("CargoTranshipmentArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("CargoTranshipmentArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("CargoTranshipmentArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("CargoTranshipmentArea")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("CargoTranshipmentArea")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("CargoTranshipmentArea")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("CargoTranshipmentArea")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("CargoTranshipmentArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("CargoTranshipmentArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class CargoTranshipmentAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CargoTranshipmentArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.CargoTranshipmentArea instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.CargoTranshipmentArea
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.CargoTranshipmentArea Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public CargoTranshipmentAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("CautionArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CautionAreaViewModel : ViewModelBase
    {
        private condition? _condition = default;
        [Category("CautionArea")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("CautionArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("CautionArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("CautionArea")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("CautionArea")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        private status? _status = default;
        [Category("CautionArea")]
        public status? status
        {
            get
            {
                return _status;
            }

            set
            {
                SetValue(ref _status, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("CautionArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("CautionArea")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("CautionArea")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class CautionAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CautionArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.CautionArea instance)
        {
            condition = instance.condition;
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            reportedDate = instance.reportedDate;
            status = instance.status;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.CautionArea
            {
                condition = this.condition,
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                reportedDate = this.reportedDate,
                status = this.status,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.CautionArea Model => new()
        {
            condition = this._condition,
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            reportedDate = this._reportedDate,
            status = this._status,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public CautionAreaViewModel() : base()
        {
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("InformationArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class InformationAreaViewModel : ViewModelBase
    {
        [Category("InformationArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("InformationArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("InformationArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("InformationArea")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private DateOnly? _reportedDate = default;
        [Category("InformationArea")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("InformationArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("InformationArea")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("InformationArea")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class InformationAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(InformationArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.InformationArea instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            reportedDate = instance.reportedDate;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.InformationArea
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                reportedDate = this.reportedDate,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.InformationArea Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            reportedDate = this._reportedDate,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public InformationAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("ContiguousZone", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class ContiguousZoneViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("ContiguousZone")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Boolean? _inDispute = default;
        [Category("ContiguousZone")]
        public Boolean? inDispute
        {
            get
            {
                return _inDispute;
            }

            set
            {
                SetValue(ref _inDispute, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("ContiguousZone")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("ContiguousZone")]
        public ObservableCollection<String> nationality { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("ContiguousZone")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("ContiguousZone")]
        public ObservableCollection<information> information { get; set; } = new();

        public class ContiguousZoneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContiguousZone)];
        }

        public void Load(DomainModel.S101.FeatureTypes.ContiguousZone instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            inDispute = instance.inDispute;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            nationality.Clear();
            if (instance.nationality is not null)
                foreach (var e in instance.nationality)
                    nationality.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.ContiguousZone
            {
                fixedDateRange = this.fixedDateRange?.Model,
                inDispute = this.inDispute,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                nationality = this.nationality.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.ContiguousZone Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            inDispute = this._inDispute,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            nationality = this.nationality.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public ContiguousZoneViewModel() : base()
        {
            nationality.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(nationality));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("ContinentalShelfArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class ContinentalShelfAreaViewModel : ViewModelBase
    {
        [Category("ContinentalShelfArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("ContinentalShelfArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("ContinentalShelfArea")]
        public ObservableCollection<String> nationality { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("ContinentalShelfArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("ContinentalShelfArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class ContinentalShelfAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContinentalShelfArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.ContinentalShelfArea instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            nationality.Clear();
            if (instance.nationality is not null)
                foreach (var e in instance.nationality)
                    nationality.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.ContinentalShelfArea
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                nationality = this.nationality.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.ContinentalShelfArea Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            nationality = this.nationality.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public ContinentalShelfAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            nationality.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(nationality));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("CustomZone", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CustomZoneViewModel : ViewModelBase
    {
        private String _interoperabilityIdentifier = string.Empty;
        [Category("CustomZone")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private String _nationality = string.Empty;
        [Category("CustomZone")]
        public String nationality
        {
            get
            {
                return _nationality;
            }

            set
            {
                SetValue(ref _nationality, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("CustomZone")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("CustomZone")]
        public ObservableCollection<information> information { get; set; } = new();

        public class CustomZoneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CustomZone)];
        }

        public void Load(DomainModel.S101.FeatureTypes.CustomZone instance)
        {
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            nationality = instance.nationality;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.CustomZone
            {
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                nationality = this.nationality,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.CustomZone Model => new()
        {
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            nationality = this._nationality,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public CustomZoneViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("ExclusiveEconomicZone", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class ExclusiveEconomicZoneViewModel : ViewModelBase
    {
        private Boolean? _inDispute = default;
        [Category("ExclusiveEconomicZone")]
        public Boolean? inDispute
        {
            get
            {
                return _inDispute;
            }

            set
            {
                SetValue(ref _inDispute, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("ExclusiveEconomicZone")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("ExclusiveEconomicZone")]
        public ObservableCollection<String> nationality { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("ExclusiveEconomicZone")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("ExclusiveEconomicZone")]
        public ObservableCollection<information> information { get; set; } = new();

        public class ExclusiveEconomicZoneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ExclusiveEconomicZone)];
        }

        public void Load(DomainModel.S101.FeatureTypes.ExclusiveEconomicZone instance)
        {
            inDispute = instance.inDispute;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            nationality.Clear();
            if (instance.nationality is not null)
                foreach (var e in instance.nationality)
                    nationality.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.ExclusiveEconomicZone
            {
                inDispute = this.inDispute,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                nationality = this.nationality.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.ExclusiveEconomicZone Model => new()
        {
            inDispute = this._inDispute,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            nationality = this.nationality.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public ExclusiveEconomicZoneViewModel() : base()
        {
            nationality.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(nationality));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("FisheryZone", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class FisheryZoneViewModel : ViewModelBase
    {
        [Category("FisheryZone")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("FisheryZone")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private String _nationality = string.Empty;
        [Category("FisheryZone")]
        public String nationality
        {
            get
            {
                return _nationality;
            }

            set
            {
                SetValue(ref _nationality, value);
            }
        }

        [Category("FisheryZone")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("FisheryZone")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("FisheryZone")]
        public ObservableCollection<information> information { get; set; } = new();

        public class FisheryZoneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FisheryZone)];
        }

        public void Load(DomainModel.S101.FeatureTypes.FisheryZone instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            nationality = instance.nationality;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.FisheryZone
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                nationality = this.nationality,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.FisheryZone Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            nationality = this._nationality,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public FisheryZoneViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("FishingGround", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class FishingGroundViewModel : ViewModelBase
    {
        [Category("FishingGround")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("FishingGround")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("FishingGround")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("FishingGround")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("FishingGround")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("FishingGround")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("FishingGround")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("FishingGround")]
        public ObservableCollection<information> information { get; set; } = new();

        public class FishingGroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FishingGround)];
        }

        public void Load(DomainModel.S101.FeatureTypes.FishingGround instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.FishingGround
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.FishingGround Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public FishingGroundViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("FreePortArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class FreePortAreaViewModel : ViewModelBase
    {
        [Category("FreePortArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("FreePortArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("FreePortArea")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("FreePortArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("FreePortArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class FreePortAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FreePortArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.FreePortArea instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.FreePortArea
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.FreePortArea Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public FreePortAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("HarbourAreaAdministrative", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class HarbourAreaAdministrativeViewModel : ViewModelBase
    {
        [Category("HarbourAreaAdministrative")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("HarbourAreaAdministrative")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("HarbourAreaAdministrative")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("HarbourAreaAdministrative")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("HarbourAreaAdministrative")]
        public ObservableCollection<information> information { get; set; } = new();

        public class HarbourAreaAdministrativeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(HarbourAreaAdministrative)];
        }

        public void Load(DomainModel.S101.FeatureTypes.HarbourAreaAdministrative instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.HarbourAreaAdministrative
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.HarbourAreaAdministrative Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public HarbourAreaAdministrativeViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LogPond", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LogPondViewModel : ViewModelBase
    {
        [Category("LogPond")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LogPond")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("LogPond")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("LogPond")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("LogPond")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LogPond")]
        public ObservableCollection<information> information { get; set; } = new();

        public class LogPondRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LogPond)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LogPond instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LogPond
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LogPond Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public LogPondViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("OilBarrier", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class OilBarrierViewModel : ViewModelBase
    {
        private categoryOfOilBarrier? _categoryOfOilBarrier = default;
        [Category("OilBarrier")]
        public categoryOfOilBarrier? categoryOfOilBarrier
        {
            get
            {
                return _categoryOfOilBarrier;
            }

            set
            {
                SetValue(ref _categoryOfOilBarrier, value);
            }
        }

        private condition? _condition = default;
        [Category("OilBarrier")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("OilBarrier")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("OilBarrier")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("OilBarrier")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("OilBarrier")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("OilBarrier")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("OilBarrier")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("OilBarrier")]
        public ObservableCollection<information> information { get; set; } = new();

        public class OilBarrierRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(OilBarrier)];
        }

        public void Load(DomainModel.S101.FeatureTypes.OilBarrier instance)
        {
            categoryOfOilBarrier = instance.categoryOfOilBarrier;
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.OilBarrier
            {
                categoryOfOilBarrier = this.categoryOfOilBarrier,
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.OilBarrier Model => new()
        {
            categoryOfOilBarrier = this._categoryOfOilBarrier,
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public OilBarrierViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("StraightTerritorialSeaBaseline", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class StraightTerritorialSeaBaselineViewModel : ViewModelBase
    {
        private String _interoperabilityIdentifier = string.Empty;
        [Category("StraightTerritorialSeaBaseline")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private String _nationality = string.Empty;
        [Category("StraightTerritorialSeaBaseline")]
        public String nationality
        {
            get
            {
                return _nationality;
            }

            set
            {
                SetValue(ref _nationality, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("StraightTerritorialSeaBaseline")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("StraightTerritorialSeaBaseline")]
        public ObservableCollection<information> information { get; set; } = new();

        public class StraightTerritorialSeaBaselineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(StraightTerritorialSeaBaseline)];
        }

        public void Load(DomainModel.S101.FeatureTypes.StraightTerritorialSeaBaseline instance)
        {
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            nationality = instance.nationality;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.StraightTerritorialSeaBaseline
            {
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                nationality = this.nationality,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.StraightTerritorialSeaBaseline Model => new()
        {
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            nationality = this._nationality,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public StraightTerritorialSeaBaselineViewModel() : base()
        {
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("TerritorialSeaArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class TerritorialSeaAreaViewModel : ViewModelBase
    {
        private Boolean? _inDispute = default;
        [Category("TerritorialSeaArea")]
        public Boolean? inDispute
        {
            get
            {
                return _inDispute;
            }

            set
            {
                SetValue(ref _inDispute, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("TerritorialSeaArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("TerritorialSeaArea")]
        public ObservableCollection<String> nationality { get; set; } = new();

        [Category("TerritorialSeaArea")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("TerritorialSeaArea")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("TerritorialSeaArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("TerritorialSeaArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class TerritorialSeaAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TerritorialSeaArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.TerritorialSeaArea instance)
        {
            inDispute = instance.inDispute;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            nationality.Clear();
            if (instance.nationality is not null)
                foreach (var e in instance.nationality)
                    nationality.Add(e);
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.TerritorialSeaArea
            {
                inDispute = this.inDispute,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                nationality = this.nationality.ToList(),
                restriction = this.restriction.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.TerritorialSeaArea Model => new()
        {
            inDispute = this._inDispute,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            nationality = this.nationality.ToList(),
            restriction = this.restriction.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public TerritorialSeaAreaViewModel() : base()
        {
            nationality.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(nationality));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SubmarineTransitLane", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SubmarineTransitLaneViewModel : ViewModelBase
    {
        [Category("SubmarineTransitLane")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SubmarineTransitLane")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private String _nationality = string.Empty;
        [Category("SubmarineTransitLane")]
        public String nationality
        {
            get
            {
                return _nationality;
            }

            set
            {
                SetValue(ref _nationality, value);
            }
        }

        [Category("SubmarineTransitLane")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("SubmarineTransitLane")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("SubmarineTransitLane")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SubmarineTransitLane")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SubmarineTransitLaneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SubmarineTransitLane)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SubmarineTransitLane instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            nationality = instance.nationality;
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SubmarineTransitLane
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                nationality = this.nationality,
                restriction = this.restriction.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SubmarineTransitLane Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            nationality = this._nationality,
            restriction = this.restriction.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SubmarineTransitLaneViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("PilotageDistrict", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class PilotageDistrictViewModel : ViewModelBase
    {
        [Category("PilotageDistrict")]
        public ObservableCollection<String> communicationChannel { get; set; } = new();

        [Category("PilotageDistrict")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("PilotageDistrict")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("PilotageDistrict")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("PilotageDistrict")]
        public ObservableCollection<information> information { get; set; } = new();

        public class PilotageDistrictRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(PilotageDistrict)];
        }

        public void Load(DomainModel.S101.FeatureTypes.PilotageDistrict instance)
        {
            communicationChannel.Clear();
            if (instance.communicationChannel is not null)
                foreach (var e in instance.communicationChannel)
                    communicationChannel.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.PilotageDistrict
            {
                communicationChannel = this.communicationChannel.ToList(),
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.PilotageDistrict Model => new()
        {
            communicationChannel = this.communicationChannel.ToList(),
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public PilotageDistrictViewModel() : base()
        {
            communicationChannel.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(communicationChannel));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("CollisionRegulationsLimit", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CollisionRegulationsLimitViewModel : ViewModelBase
    {
        [Category("CollisionRegulationsLimit")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("CollisionRegulationsLimit")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("CollisionRegulationsLimit")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("CollisionRegulationsLimit")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private String _regulationCitation = string.Empty;
        [Category("CollisionRegulationsLimit")]
        public String regulationCitation
        {
            get
            {
                return _regulationCitation;
            }

            set
            {
                SetValue(ref _regulationCitation, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("CollisionRegulationsLimit")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("CollisionRegulationsLimit")]
        public ObservableCollection<information> information { get; set; } = new();

        public class CollisionRegulationsLimitRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CollisionRegulationsLimit)];
        }

        public void Load(DomainModel.S101.FeatureTypes.CollisionRegulationsLimit instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            regulationCitation = instance.regulationCitation;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.CollisionRegulationsLimit
            {
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                regulationCitation = this.regulationCitation,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.CollisionRegulationsLimit Model => new()
        {
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            regulationCitation = this._regulationCitation,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public CollisionRegulationsLimitViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("MarinePollutionRegulationsArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class MarinePollutionRegulationsAreaViewModel : ViewModelBase
    {
        [Category("MarinePollutionRegulationsArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("MarinePollutionRegulationsArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private String _regulationCitation = string.Empty;
        [Category("MarinePollutionRegulationsArea")]
        public String regulationCitation
        {
            get
            {
                return _regulationCitation;
            }

            set
            {
                SetValue(ref _regulationCitation, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("MarinePollutionRegulationsArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("MarinePollutionRegulationsArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class MarinePollutionRegulationsAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(MarinePollutionRegulationsArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.MarinePollutionRegulationsArea instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            regulationCitation = instance.regulationCitation;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.MarinePollutionRegulationsArea
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                regulationCitation = this.regulationCitation,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.MarinePollutionRegulationsArea Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            regulationCitation = this._regulationCitation,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public MarinePollutionRegulationsAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("RestrictedArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RestrictedAreaViewModel : ViewModelBase
    {
        [Category("RestrictedArea")]
        public ObservableCollection<categoryOfRestrictedArea> categoryOfRestrictedArea { get; set; } = new();

        [Category("RestrictedArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("RestrictedArea")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("RestrictedArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("RestrictedArea")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("RestrictedArea")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("RestrictedArea")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("RestrictedArea")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("RestrictedArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("RestrictedArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RestrictedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RestrictedArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.RestrictedArea instance)
        {
            categoryOfRestrictedArea.Clear();
            if (instance.categoryOfRestrictedArea is not null)
                foreach (var e in instance.categoryOfRestrictedArea)
                    categoryOfRestrictedArea.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.RestrictedArea
            {
                categoryOfRestrictedArea = this.categoryOfRestrictedArea.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.RestrictedArea Model => new()
        {
            categoryOfRestrictedArea = this.categoryOfRestrictedArea.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RestrictedAreaViewModel() : base()
        {
            categoryOfRestrictedArea.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfRestrictedArea));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LightAllAround", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LightAllAroundViewModel : ViewModelBase
    {
        [Category("LightAllAround")]
        public ObservableCollection<categoryOfLight> categoryOfLight { get; set; } = new();

        [Category("LightAllAround")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private exhibitionConditionOfLight? _exhibitionConditionOfLight = default;
        [Category("LightAllAround")]
        public exhibitionConditionOfLight? exhibitionConditionOfLight
        {
            get
            {
                return _exhibitionConditionOfLight;
            }

            set
            {
                SetValue(ref _exhibitionConditionOfLight, value);
            }
        }

        [Category("LightAllAround")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("LightAllAround")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Int32? _flareBearing = default;
        [Category("LightAllAround")]
        public Int32? flareBearing
        {
            get
            {
                return _flareBearing;
            }

            set
            {
                SetValue(ref _flareBearing, value);
            }
        }

        private Decimal? _height = default;
        [Category("LightAllAround")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LightAllAround")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private lightVisibility? _lightVisibility = default;
        [Category("LightAllAround")]
        public lightVisibility? lightVisibility
        {
            get
            {
                return _lightVisibility;
            }

            set
            {
                SetValue(ref _lightVisibility, value);
            }
        }

        private Boolean? _majorLight = default;
        [Category("LightAllAround")]
        public Boolean? majorLight
        {
            get
            {
                return _majorLight;
            }

            set
            {
                SetValue(ref _majorLight, value);
            }
        }

        private marksNavigationalSystemOf? _marksNavigationalSystemOf = default;
        [Category("LightAllAround")]
        public marksNavigationalSystemOf? marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        private multiplicityOfFeaturesViewModel? _multiplicityOfFeatures;
        [Category("LightAllAround")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public multiplicityOfFeaturesViewModel? multiplicityOfFeatures
        {
            get
            {
                return _multiplicityOfFeatures;
            }

            set
            {
                SetValue(ref _multiplicityOfFeatures, value);
            }
        }

        [Category("LightAllAround")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private rhythmOfLightViewModel _rhythmOfLight;
        [Category("LightAllAround")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public rhythmOfLightViewModel rhythmOfLight
        {
            get
            {
                return _rhythmOfLight;
            }

            set
            {
                SetValue(ref _rhythmOfLight, value);
            }
        }

        private signalGeneration? _signalGeneration = default;
        [Category("LightAllAround")]
        public signalGeneration? signalGeneration
        {
            get
            {
                return _signalGeneration;
            }

            set
            {
                SetValue(ref _signalGeneration, value);
            }
        }

        [Category("LightAllAround")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _valueOfNominalRange = default;
        [Category("LightAllAround")]
        public Decimal? valueOfNominalRange
        {
            get
            {
                return _valueOfNominalRange;
            }

            set
            {
                SetValue(ref _valueOfNominalRange, value);
            }
        }

        private verticalDatum? _verticalDatum = default;
        [Category("LightAllAround")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("LightAllAround")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("LightAllAround")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LightAllAround")]
        public ObservableCollection<information> information { get; set; } = new();

        public class LightAllAroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LightAllAround)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LightAllAround instance)
        {
            categoryOfLight.Clear();
            if (instance.categoryOfLight is not null)
                foreach (var e in instance.categoryOfLight)
                    categoryOfLight.Add(e);
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            exhibitionConditionOfLight = instance.exhibitionConditionOfLight;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            flareBearing = instance.flareBearing;
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            lightVisibility = instance.lightVisibility;
            majorLight = instance.majorLight;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            multiplicityOfFeatures = new();
            if (instance.multiplicityOfFeatures != null)
            {
                multiplicityOfFeatures = new();
                multiplicityOfFeatures.Load(instance.multiplicityOfFeatures);
            }

            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            rhythmOfLight = new();
            if (instance.rhythmOfLight != null)
            {
                rhythmOfLight = new();
                rhythmOfLight.Load(instance.rhythmOfLight);
            }

            signalGeneration = instance.signalGeneration;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            valueOfNominalRange = instance.valueOfNominalRange;
            verticalDatum = instance.verticalDatum;
            verticalLength = instance.verticalLength;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LightAllAround
            {
                categoryOfLight = this.categoryOfLight.ToList(),
                colour = this.colour.ToList(),
                exhibitionConditionOfLight = this.exhibitionConditionOfLight,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                flareBearing = this.flareBearing,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                lightVisibility = this.lightVisibility,
                majorLight = this.majorLight,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                multiplicityOfFeatures = this.multiplicityOfFeatures?.Model,
                periodicDateRange = this.periodicDateRange.ToList(),
                rhythmOfLight = this.rhythmOfLight?.Model,
                signalGeneration = this.signalGeneration,
                status = this.status.ToList(),
                valueOfNominalRange = this.valueOfNominalRange,
                verticalDatum = this.verticalDatum,
                verticalLength = this.verticalLength,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LightAllAround Model => new()
        {
            categoryOfLight = this.categoryOfLight.ToList(),
            colour = this.colour.ToList(),
            exhibitionConditionOfLight = this._exhibitionConditionOfLight,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            flareBearing = this._flareBearing,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            lightVisibility = this._lightVisibility,
            majorLight = this._majorLight,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            multiplicityOfFeatures = this._multiplicityOfFeatures?.Model,
            periodicDateRange = this.periodicDateRange.ToList(),
            rhythmOfLight = this._rhythmOfLight?.Model,
            signalGeneration = this._signalGeneration,
            status = this.status.ToList(),
            valueOfNominalRange = this._valueOfNominalRange,
            verticalDatum = this._verticalDatum,
            verticalLength = this._verticalLength,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public LightAllAroundViewModel() : base()
        {
            categoryOfLight.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfLight));
            };
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LightSectored", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LightSectoredViewModel : ViewModelBase
    {
        [Category("LightSectored")]
        public ObservableCollection<categoryOfLight> categoryOfLight { get; set; } = new();

        private exhibitionConditionOfLight? _exhibitionConditionOfLight = default;
        [Category("LightSectored")]
        public exhibitionConditionOfLight? exhibitionConditionOfLight
        {
            get
            {
                return _exhibitionConditionOfLight;
            }

            set
            {
                SetValue(ref _exhibitionConditionOfLight, value);
            }
        }

        [Category("LightSectored")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("LightSectored")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("LightSectored")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LightSectored")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private marksNavigationalSystemOf? _marksNavigationalSystemOf = default;
        [Category("LightSectored")]
        public marksNavigationalSystemOf? marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        private multiplicityOfFeaturesViewModel? _multiplicityOfFeatures;
        [Category("LightSectored")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public multiplicityOfFeaturesViewModel? multiplicityOfFeatures
        {
            get
            {
                return _multiplicityOfFeatures;
            }

            set
            {
                SetValue(ref _multiplicityOfFeatures, value);
            }
        }

        [Category("LightSectored")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("LightSectored")]
        public ObservableCollection<sectorCharacteristics> sectorCharacteristics { get; set; } = new();

        private signalGeneration? _signalGeneration = default;
        [Category("LightSectored")]
        public signalGeneration? signalGeneration
        {
            get
            {
                return _signalGeneration;
            }

            set
            {
                SetValue(ref _signalGeneration, value);
            }
        }

        [Category("LightSectored")]
        public ObservableCollection<status> status { get; set; } = new();

        private verticalDatum? _verticalDatum = default;
        [Category("LightSectored")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("LightSectored")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LightSectored")]
        public ObservableCollection<information> information { get; set; } = new();

        public class LightSectoredRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LightSectored)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LightSectored instance)
        {
            categoryOfLight.Clear();
            if (instance.categoryOfLight is not null)
                foreach (var e in instance.categoryOfLight)
                    categoryOfLight.Add(e);
            exhibitionConditionOfLight = instance.exhibitionConditionOfLight;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            multiplicityOfFeatures = new();
            if (instance.multiplicityOfFeatures != null)
            {
                multiplicityOfFeatures = new();
                multiplicityOfFeatures.Load(instance.multiplicityOfFeatures);
            }

            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            sectorCharacteristics.Clear();
            if (instance.sectorCharacteristics is not null)
                foreach (var e in instance.sectorCharacteristics)
                    sectorCharacteristics.Add(e);
            signalGeneration = instance.signalGeneration;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalDatum = instance.verticalDatum;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LightSectored
            {
                categoryOfLight = this.categoryOfLight.ToList(),
                exhibitionConditionOfLight = this.exhibitionConditionOfLight,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                multiplicityOfFeatures = this.multiplicityOfFeatures?.Model,
                periodicDateRange = this.periodicDateRange.ToList(),
                sectorCharacteristics = this.sectorCharacteristics.ToList(),
                signalGeneration = this.signalGeneration,
                status = this.status.ToList(),
                verticalDatum = this.verticalDatum,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LightSectored Model => new()
        {
            categoryOfLight = this.categoryOfLight.ToList(),
            exhibitionConditionOfLight = this._exhibitionConditionOfLight,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            multiplicityOfFeatures = this._multiplicityOfFeatures?.Model,
            periodicDateRange = this.periodicDateRange.ToList(),
            sectorCharacteristics = this.sectorCharacteristics.ToList(),
            signalGeneration = this._signalGeneration,
            status = this.status.ToList(),
            verticalDatum = this._verticalDatum,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public LightSectoredViewModel() : base()
        {
            categoryOfLight.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfLight));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            sectorCharacteristics.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(sectorCharacteristics));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LightFogDetector", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LightFogDetectorViewModel : ViewModelBase
    {
        [Category("LightFogDetector")]
        public ObservableCollection<colour> colour { get; set; } = new();

        [Category("LightFogDetector")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("LightFogDetector")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Int32? _flareBearing = default;
        [Category("LightFogDetector")]
        public Int32? flareBearing
        {
            get
            {
                return _flareBearing;
            }

            set
            {
                SetValue(ref _flareBearing, value);
            }
        }

        private Decimal? _height = default;
        [Category("LightFogDetector")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LightFogDetector")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("LightFogDetector")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private rhythmOfLightViewModel? _rhythmOfLight;
        [Category("LightFogDetector")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public rhythmOfLightViewModel? rhythmOfLight
        {
            get
            {
                return _rhythmOfLight;
            }

            set
            {
                SetValue(ref _rhythmOfLight, value);
            }
        }

        private signalGeneration? _signalGeneration = default;
        [Category("LightFogDetector")]
        public signalGeneration? signalGeneration
        {
            get
            {
                return _signalGeneration;
            }

            set
            {
                SetValue(ref _signalGeneration, value);
            }
        }

        [Category("LightFogDetector")]
        public ObservableCollection<status> status { get; set; } = new();

        private verticalDatum? _verticalDatum = default;
        [Category("LightFogDetector")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("LightFogDetector")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("LightFogDetector")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LightFogDetector")]
        public ObservableCollection<information> information { get; set; } = new();

        public class LightFogDetectorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LightFogDetector)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LightFogDetector instance)
        {
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            flareBearing = instance.flareBearing;
            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            rhythmOfLight = new();
            if (instance.rhythmOfLight != null)
            {
                rhythmOfLight = new();
                rhythmOfLight.Load(instance.rhythmOfLight);
            }

            signalGeneration = instance.signalGeneration;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalDatum = instance.verticalDatum;
            verticalLength = instance.verticalLength;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LightFogDetector
            {
                colour = this.colour.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                flareBearing = this.flareBearing,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                rhythmOfLight = this.rhythmOfLight?.Model,
                signalGeneration = this.signalGeneration,
                status = this.status.ToList(),
                verticalDatum = this.verticalDatum,
                verticalLength = this.verticalLength,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LightFogDetector Model => new()
        {
            colour = this.colour.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            flareBearing = this._flareBearing,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            rhythmOfLight = this._rhythmOfLight?.Model,
            signalGeneration = this._signalGeneration,
            status = this.status.ToList(),
            verticalDatum = this._verticalDatum,
            verticalLength = this._verticalLength,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public LightFogDetectorViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LightAirObstruction", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LightAirObstructionViewModel : ViewModelBase
    {
        [Category("LightAirObstruction")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private exhibitionConditionOfLight? _exhibitionConditionOfLight = default;
        [Category("LightAirObstruction")]
        public exhibitionConditionOfLight? exhibitionConditionOfLight
        {
            get
            {
                return _exhibitionConditionOfLight;
            }

            set
            {
                SetValue(ref _exhibitionConditionOfLight, value);
            }
        }

        [Category("LightAirObstruction")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("LightAirObstruction")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Int32? _flareBearing = default;
        [Category("LightAirObstruction")]
        public Int32? flareBearing
        {
            get
            {
                return _flareBearing;
            }

            set
            {
                SetValue(ref _flareBearing, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LightAirObstruction")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _height = default;
        [Category("LightAirObstruction")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        [Category("LightAirObstruction")]
        public ObservableCollection<lightVisibility> lightVisibility { get; set; } = new();

        private multiplicityOfFeaturesViewModel? _multiplicityOfFeatures;
        [Category("LightAirObstruction")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public multiplicityOfFeaturesViewModel? multiplicityOfFeatures
        {
            get
            {
                return _multiplicityOfFeatures;
            }

            set
            {
                SetValue(ref _multiplicityOfFeatures, value);
            }
        }

        [Category("LightAirObstruction")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private rhythmOfLightViewModel? _rhythmOfLight;
        [Category("LightAirObstruction")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public rhythmOfLightViewModel? rhythmOfLight
        {
            get
            {
                return _rhythmOfLight;
            }

            set
            {
                SetValue(ref _rhythmOfLight, value);
            }
        }

        [Category("LightAirObstruction")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _valueOfNominalRange = default;
        [Category("LightAirObstruction")]
        public Decimal? valueOfNominalRange
        {
            get
            {
                return _valueOfNominalRange;
            }

            set
            {
                SetValue(ref _valueOfNominalRange, value);
            }
        }

        private verticalDatum? _verticalDatum = default;
        [Category("LightAirObstruction")]
        public verticalDatum? verticalDatum
        {
            get
            {
                return _verticalDatum;
            }

            set
            {
                SetValue(ref _verticalDatum, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("LightAirObstruction")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LightAirObstruction")]
        public ObservableCollection<information> information { get; set; } = new();

        public class LightAirObstructionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LightAirObstruction)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LightAirObstruction instance)
        {
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            exhibitionConditionOfLight = instance.exhibitionConditionOfLight;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            flareBearing = instance.flareBearing;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            height = instance.height;
            lightVisibility.Clear();
            if (instance.lightVisibility is not null)
                foreach (var e in instance.lightVisibility)
                    lightVisibility.Add(e);
            multiplicityOfFeatures = new();
            if (instance.multiplicityOfFeatures != null)
            {
                multiplicityOfFeatures = new();
                multiplicityOfFeatures.Load(instance.multiplicityOfFeatures);
            }

            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            rhythmOfLight = new();
            if (instance.rhythmOfLight != null)
            {
                rhythmOfLight = new();
                rhythmOfLight.Load(instance.rhythmOfLight);
            }

            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            valueOfNominalRange = instance.valueOfNominalRange;
            verticalDatum = instance.verticalDatum;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LightAirObstruction
            {
                colour = this.colour.ToList(),
                exhibitionConditionOfLight = this.exhibitionConditionOfLight,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                flareBearing = this.flareBearing,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                height = this.height,
                lightVisibility = this.lightVisibility.ToList(),
                multiplicityOfFeatures = this.multiplicityOfFeatures?.Model,
                periodicDateRange = this.periodicDateRange.ToList(),
                rhythmOfLight = this.rhythmOfLight?.Model,
                status = this.status.ToList(),
                valueOfNominalRange = this.valueOfNominalRange,
                verticalDatum = this.verticalDatum,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LightAirObstruction Model => new()
        {
            colour = this.colour.ToList(),
            exhibitionConditionOfLight = this._exhibitionConditionOfLight,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            flareBearing = this._flareBearing,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            height = this._height,
            lightVisibility = this.lightVisibility.ToList(),
            multiplicityOfFeatures = this._multiplicityOfFeatures?.Model,
            periodicDateRange = this.periodicDateRange.ToList(),
            rhythmOfLight = this._rhythmOfLight?.Model,
            status = this.status.ToList(),
            valueOfNominalRange = this._valueOfNominalRange,
            verticalDatum = this._verticalDatum,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public LightAirObstructionViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            lightVisibility.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(lightVisibility));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LateralBuoy", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LateralBuoyViewModel : ViewModelBase
    {
        private buoyShape _buoyShape;
        [Category("LateralBuoy")]
        public buoyShape buoyShape
        {
            get
            {
                return _buoyShape;
            }

            set
            {
                SetValue(ref _buoyShape, value);
            }
        }

        private categoryOfLateralMark _categoryOfLateralMark;
        [Category("LateralBuoy")]
        public categoryOfLateralMark categoryOfLateralMark
        {
            get
            {
                return _categoryOfLateralMark;
            }

            set
            {
                SetValue(ref _categoryOfLateralMark, value);
            }
        }

        [Category("LateralBuoy")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("LateralBuoy")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        [Category("LateralBuoy")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("LateralBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LateralBuoy")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private marksNavigationalSystemOf? _marksNavigationalSystemOf = default;
        [Category("LateralBuoy")]
        public marksNavigationalSystemOf? marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        [Category("LateralBuoy")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("LateralBuoy")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("LateralBuoy")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        [Category("LateralBuoy")]
        public ObservableCollection<status> status { get; set; } = new();

        private topmarkViewModel? _topmark;
        [Category("LateralBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public topmarkViewModel? topmark
        {
            get
            {
                return _topmark;
            }

            set
            {
                SetValue(ref _topmark, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("LateralBuoy")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("LateralBuoy")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LateralBuoy")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("LateralBuoy")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class LateralBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LateralBuoy)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LateralBuoy instance)
        {
            buoyShape = instance.buoyShape;
            categoryOfLateralMark = instance.categoryOfLateralMark;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            topmark = new();
            if (instance.topmark != null)
            {
                topmark = new();
                topmark.Load(instance.topmark);
            }

            verticalLength = instance.verticalLength;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LateralBuoy
            {
                buoyShape = this.buoyShape,
                categoryOfLateralMark = this.categoryOfLateralMark,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                status = this.status.ToList(),
                topmark = this.topmark?.Model,
                verticalLength = this.verticalLength,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LateralBuoy Model => new()
        {
            buoyShape = this._buoyShape,
            categoryOfLateralMark = this._categoryOfLateralMark,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            status = this.status.ToList(),
            topmark = this._topmark?.Model,
            verticalLength = this._verticalLength,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public LateralBuoyViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("CardinalBuoy", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CardinalBuoyViewModel : ViewModelBase
    {
        private buoyShape _buoyShape;
        [Category("CardinalBuoy")]
        public buoyShape buoyShape
        {
            get
            {
                return _buoyShape;
            }

            set
            {
                SetValue(ref _buoyShape, value);
            }
        }

        private categoryOfCardinalMark _categoryOfCardinalMark;
        [Category("CardinalBuoy")]
        public categoryOfCardinalMark categoryOfCardinalMark
        {
            get
            {
                return _categoryOfCardinalMark;
            }

            set
            {
                SetValue(ref _categoryOfCardinalMark, value);
            }
        }

        [Category("CardinalBuoy")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("CardinalBuoy")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        [Category("CardinalBuoy")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("CardinalBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("CardinalBuoy")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private marksNavigationalSystemOf? _marksNavigationalSystemOf = default;
        [Category("CardinalBuoy")]
        public marksNavigationalSystemOf? marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        [Category("CardinalBuoy")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("CardinalBuoy")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("CardinalBuoy")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        [Category("CardinalBuoy")]
        public ObservableCollection<status> status { get; set; } = new();

        private topmarkViewModel? _topmark;
        [Category("CardinalBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public topmarkViewModel? topmark
        {
            get
            {
                return _topmark;
            }

            set
            {
                SetValue(ref _topmark, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("CardinalBuoy")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("CardinalBuoy")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("CardinalBuoy")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("CardinalBuoy")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class CardinalBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CardinalBuoy)];
        }

        public void Load(DomainModel.S101.FeatureTypes.CardinalBuoy instance)
        {
            buoyShape = instance.buoyShape;
            categoryOfCardinalMark = instance.categoryOfCardinalMark;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            topmark = new();
            if (instance.topmark != null)
            {
                topmark = new();
                topmark.Load(instance.topmark);
            }

            verticalLength = instance.verticalLength;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.CardinalBuoy
            {
                buoyShape = this.buoyShape,
                categoryOfCardinalMark = this.categoryOfCardinalMark,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                status = this.status.ToList(),
                topmark = this.topmark?.Model,
                verticalLength = this.verticalLength,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.CardinalBuoy Model => new()
        {
            buoyShape = this._buoyShape,
            categoryOfCardinalMark = this._categoryOfCardinalMark,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            status = this.status.ToList(),
            topmark = this._topmark?.Model,
            verticalLength = this._verticalLength,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public CardinalBuoyViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("IsolatedDangerBuoy", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class IsolatedDangerBuoyViewModel : ViewModelBase
    {
        private buoyShape _buoyShape;
        [Category("IsolatedDangerBuoy")]
        public buoyShape buoyShape
        {
            get
            {
                return _buoyShape;
            }

            set
            {
                SetValue(ref _buoyShape, value);
            }
        }

        [Category("IsolatedDangerBuoy")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("IsolatedDangerBuoy")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        [Category("IsolatedDangerBuoy")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("IsolatedDangerBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("IsolatedDangerBuoy")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private marksNavigationalSystemOf? _marksNavigationalSystemOf = default;
        [Category("IsolatedDangerBuoy")]
        public marksNavigationalSystemOf? marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        [Category("IsolatedDangerBuoy")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("IsolatedDangerBuoy")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("IsolatedDangerBuoy")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        [Category("IsolatedDangerBuoy")]
        public ObservableCollection<status> status { get; set; } = new();

        private topmarkViewModel? _topmark;
        [Category("IsolatedDangerBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public topmarkViewModel? topmark
        {
            get
            {
                return _topmark;
            }

            set
            {
                SetValue(ref _topmark, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("IsolatedDangerBuoy")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("IsolatedDangerBuoy")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("IsolatedDangerBuoy")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("IsolatedDangerBuoy")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class IsolatedDangerBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(IsolatedDangerBuoy)];
        }

        public void Load(DomainModel.S101.FeatureTypes.IsolatedDangerBuoy instance)
        {
            buoyShape = instance.buoyShape;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            topmark = new();
            if (instance.topmark != null)
            {
                topmark = new();
                topmark.Load(instance.topmark);
            }

            verticalLength = instance.verticalLength;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.IsolatedDangerBuoy
            {
                buoyShape = this.buoyShape,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                status = this.status.ToList(),
                topmark = this.topmark?.Model,
                verticalLength = this.verticalLength,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.IsolatedDangerBuoy Model => new()
        {
            buoyShape = this._buoyShape,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            status = this.status.ToList(),
            topmark = this._topmark?.Model,
            verticalLength = this._verticalLength,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public IsolatedDangerBuoyViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SafeWaterBuoy", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SafeWaterBuoyViewModel : ViewModelBase
    {
        private buoyShape _buoyShape;
        [Category("SafeWaterBuoy")]
        public buoyShape buoyShape
        {
            get
            {
                return _buoyShape;
            }

            set
            {
                SetValue(ref _buoyShape, value);
            }
        }

        [Category("SafeWaterBuoy")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("SafeWaterBuoy")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        [Category("SafeWaterBuoy")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("SafeWaterBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SafeWaterBuoy")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private marksNavigationalSystemOf? _marksNavigationalSystemOf = default;
        [Category("SafeWaterBuoy")]
        public marksNavigationalSystemOf? marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        [Category("SafeWaterBuoy")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("SafeWaterBuoy")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("SafeWaterBuoy")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        [Category("SafeWaterBuoy")]
        public ObservableCollection<status> status { get; set; } = new();

        private topmarkViewModel? _topmark;
        [Category("SafeWaterBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public topmarkViewModel? topmark
        {
            get
            {
                return _topmark;
            }

            set
            {
                SetValue(ref _topmark, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("SafeWaterBuoy")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("SafeWaterBuoy")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SafeWaterBuoy")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("SafeWaterBuoy")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class SafeWaterBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SafeWaterBuoy)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SafeWaterBuoy instance)
        {
            buoyShape = instance.buoyShape;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            topmark = new();
            if (instance.topmark != null)
            {
                topmark = new();
                topmark.Load(instance.topmark);
            }

            verticalLength = instance.verticalLength;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SafeWaterBuoy
            {
                buoyShape = this.buoyShape,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                status = this.status.ToList(),
                topmark = this.topmark?.Model,
                verticalLength = this.verticalLength,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SafeWaterBuoy Model => new()
        {
            buoyShape = this._buoyShape,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            status = this.status.ToList(),
            topmark = this._topmark?.Model,
            verticalLength = this._verticalLength,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public SafeWaterBuoyViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SpecialPurposeGeneralBuoy", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SpecialPurposeGeneralBuoyViewModel : ViewModelBase
    {
        private buoyShape _buoyShape;
        [Category("SpecialPurposeGeneralBuoy")]
        public buoyShape buoyShape
        {
            get
            {
                return _buoyShape;
            }

            set
            {
                SetValue(ref _buoyShape, value);
            }
        }

        [Category("SpecialPurposeGeneralBuoy")]
        public ObservableCollection<categoryOfSpecialPurposeMark> categoryOfSpecialPurposeMark { get; set; } = new();

        [Category("SpecialPurposeGeneralBuoy")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("SpecialPurposeGeneralBuoy")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        [Category("SpecialPurposeGeneralBuoy")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("SpecialPurposeGeneralBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SpecialPurposeGeneralBuoy")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private marksNavigationalSystemOf? _marksNavigationalSystemOf = default;
        [Category("SpecialPurposeGeneralBuoy")]
        public marksNavigationalSystemOf? marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        [Category("SpecialPurposeGeneralBuoy")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("SpecialPurposeGeneralBuoy")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("SpecialPurposeGeneralBuoy")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        [Category("SpecialPurposeGeneralBuoy")]
        public ObservableCollection<status> status { get; set; } = new();

        private topmarkViewModel? _topmark;
        [Category("SpecialPurposeGeneralBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public topmarkViewModel? topmark
        {
            get
            {
                return _topmark;
            }

            set
            {
                SetValue(ref _topmark, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("SpecialPurposeGeneralBuoy")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("SpecialPurposeGeneralBuoy")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SpecialPurposeGeneralBuoy")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("SpecialPurposeGeneralBuoy")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class SpecialPurposeGeneralBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SpecialPurposeGeneralBuoy)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SpecialPurposeGeneralBuoy instance)
        {
            buoyShape = instance.buoyShape;
            categoryOfSpecialPurposeMark.Clear();
            if (instance.categoryOfSpecialPurposeMark is not null)
                foreach (var e in instance.categoryOfSpecialPurposeMark)
                    categoryOfSpecialPurposeMark.Add(e);
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            topmark = new();
            if (instance.topmark != null)
            {
                topmark = new();
                topmark.Load(instance.topmark);
            }

            verticalLength = instance.verticalLength;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SpecialPurposeGeneralBuoy
            {
                buoyShape = this.buoyShape,
                categoryOfSpecialPurposeMark = this.categoryOfSpecialPurposeMark.ToList(),
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                status = this.status.ToList(),
                topmark = this.topmark?.Model,
                verticalLength = this.verticalLength,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SpecialPurposeGeneralBuoy Model => new()
        {
            buoyShape = this._buoyShape,
            categoryOfSpecialPurposeMark = this.categoryOfSpecialPurposeMark.ToList(),
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            status = this.status.ToList(),
            topmark = this._topmark?.Model,
            verticalLength = this._verticalLength,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public SpecialPurposeGeneralBuoyViewModel() : base()
        {
            categoryOfSpecialPurposeMark.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfSpecialPurposeMark));
            };
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("EmergencyWreckMarkingBuoy", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class EmergencyWreckMarkingBuoyViewModel : ViewModelBase
    {
        private buoyShape _buoyShape;
        [Category("EmergencyWreckMarkingBuoy")]
        public buoyShape buoyShape
        {
            get
            {
                return _buoyShape;
            }

            set
            {
                SetValue(ref _buoyShape, value);
            }
        }

        [Category("EmergencyWreckMarkingBuoy")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("EmergencyWreckMarkingBuoy")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        [Category("EmergencyWreckMarkingBuoy")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("EmergencyWreckMarkingBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("EmergencyWreckMarkingBuoy")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private marksNavigationalSystemOf? _marksNavigationalSystemOf = default;
        [Category("EmergencyWreckMarkingBuoy")]
        public marksNavigationalSystemOf? marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        [Category("EmergencyWreckMarkingBuoy")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("EmergencyWreckMarkingBuoy")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private topmarkViewModel? _topmark;
        [Category("EmergencyWreckMarkingBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public topmarkViewModel? topmark
        {
            get
            {
                return _topmark;
            }

            set
            {
                SetValue(ref _topmark, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("EmergencyWreckMarkingBuoy")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("EmergencyWreckMarkingBuoy")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("EmergencyWreckMarkingBuoy")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("EmergencyWreckMarkingBuoy")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class EmergencyWreckMarkingBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(EmergencyWreckMarkingBuoy)];
        }

        public void Load(DomainModel.S101.FeatureTypes.EmergencyWreckMarkingBuoy instance)
        {
            buoyShape = instance.buoyShape;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            radarConspicuous = instance.radarConspicuous;
            topmark = new();
            if (instance.topmark != null)
            {
                topmark = new();
                topmark.Load(instance.topmark);
            }

            verticalLength = instance.verticalLength;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.EmergencyWreckMarkingBuoy
            {
                buoyShape = this.buoyShape,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                radarConspicuous = this.radarConspicuous,
                topmark = this.topmark?.Model,
                verticalLength = this.verticalLength,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.EmergencyWreckMarkingBuoy Model => new()
        {
            buoyShape = this._buoyShape,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            radarConspicuous = this._radarConspicuous,
            topmark = this._topmark?.Model,
            verticalLength = this._verticalLength,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public EmergencyWreckMarkingBuoyViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("InstallationBuoy", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class InstallationBuoyViewModel : ViewModelBase
    {
        private buoyShape _buoyShape;
        [Category("InstallationBuoy")]
        public buoyShape buoyShape
        {
            get
            {
                return _buoyShape;
            }

            set
            {
                SetValue(ref _buoyShape, value);
            }
        }

        private categoryOfInstallationBuoy? _categoryOfInstallationBuoy = default;
        [Category("InstallationBuoy")]
        public categoryOfInstallationBuoy? categoryOfInstallationBuoy
        {
            get
            {
                return _categoryOfInstallationBuoy;
            }

            set
            {
                SetValue(ref _categoryOfInstallationBuoy, value);
            }
        }

        [Category("InstallationBuoy")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("InstallationBuoy")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        [Category("InstallationBuoy")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("InstallationBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("InstallationBuoy")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("InstallationBuoy")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("InstallationBuoy")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("InstallationBuoy")]
        public ObservableCollection<product> product { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("InstallationBuoy")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        [Category("InstallationBuoy")]
        public ObservableCollection<status> status { get; set; } = new();

        private visualProminence? _visualProminence = default;
        [Category("InstallationBuoy")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("InstallationBuoy")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("InstallationBuoy")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("InstallationBuoy")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class InstallationBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(InstallationBuoy)];
        }

        public void Load(DomainModel.S101.FeatureTypes.InstallationBuoy instance)
        {
            buoyShape = instance.buoyShape;
            categoryOfInstallationBuoy = instance.categoryOfInstallationBuoy;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            product.Clear();
            if (instance.product is not null)
                foreach (var e in instance.product)
                    product.Add(e);
            radarConspicuous = instance.radarConspicuous;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.InstallationBuoy
            {
                buoyShape = this.buoyShape,
                categoryOfInstallationBuoy = this.categoryOfInstallationBuoy,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                product = this.product.ToList(),
                radarConspicuous = this.radarConspicuous,
                status = this.status.ToList(),
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.InstallationBuoy Model => new()
        {
            buoyShape = this._buoyShape,
            categoryOfInstallationBuoy = this._categoryOfInstallationBuoy,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            product = this.product.ToList(),
            radarConspicuous = this._radarConspicuous,
            status = this.status.ToList(),
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public InstallationBuoyViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            product.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(product));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("MooringBuoy", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class MooringBuoyViewModel : ViewModelBase
    {
        private buoyShape _buoyShape;
        [Category("MooringBuoy")]
        public buoyShape buoyShape
        {
            get
            {
                return _buoyShape;
            }

            set
            {
                SetValue(ref _buoyShape, value);
            }
        }

        [Category("MooringBuoy")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("MooringBuoy")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        [Category("MooringBuoy")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("MooringBuoy")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("MooringBuoy")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _maximumPermittedDraught = default;
        [Category("MooringBuoy")]
        public Decimal? maximumPermittedDraught
        {
            get
            {
                return _maximumPermittedDraught;
            }

            set
            {
                SetValue(ref _maximumPermittedDraught, value);
            }
        }

        private Decimal? _maximumPermittedVesselLength = default;
        [Category("MooringBuoy")]
        public Decimal? maximumPermittedVesselLength
        {
            get
            {
                return _maximumPermittedVesselLength;
            }

            set
            {
                SetValue(ref _maximumPermittedVesselLength, value);
            }
        }

        [Category("MooringBuoy")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("MooringBuoy")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("MooringBuoy")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("MooringBuoy")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private Boolean? _visitorsMooring = default;
        [Category("MooringBuoy")]
        public Boolean? visitorsMooring
        {
            get
            {
                return _visitorsMooring;
            }

            set
            {
                SetValue(ref _visitorsMooring, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("MooringBuoy")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("MooringBuoy")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("MooringBuoy")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class MooringBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(MooringBuoy)];
        }

        public void Load(DomainModel.S101.FeatureTypes.MooringBuoy instance)
        {
            buoyShape = instance.buoyShape;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            maximumPermittedDraught = instance.maximumPermittedDraught;
            maximumPermittedVesselLength = instance.maximumPermittedVesselLength;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visitorsMooring = instance.visitorsMooring;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.MooringBuoy
            {
                buoyShape = this.buoyShape,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                maximumPermittedDraught = this.maximumPermittedDraught,
                maximumPermittedVesselLength = this.maximumPermittedVesselLength,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visitorsMooring = this.visitorsMooring,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.MooringBuoy Model => new()
        {
            buoyShape = this._buoyShape,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            maximumPermittedDraught = this._maximumPermittedDraught,
            maximumPermittedVesselLength = this._maximumPermittedVesselLength,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visitorsMooring = this._visitorsMooring,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public MooringBuoyViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LateralBeacon", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LateralBeaconViewModel : ViewModelBase
    {
        private beaconShape _beaconShape;
        [Category("LateralBeacon")]
        public beaconShape beaconShape
        {
            get
            {
                return _beaconShape;
            }

            set
            {
                SetValue(ref _beaconShape, value);
            }
        }

        private categoryOfLateralMark _categoryOfLateralMark;
        [Category("LateralBeacon")]
        public categoryOfLateralMark categoryOfLateralMark
        {
            get
            {
                return _categoryOfLateralMark;
            }

            set
            {
                SetValue(ref _categoryOfLateralMark, value);
            }
        }

        [Category("LateralBeacon")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("LateralBeacon")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("LateralBeacon")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("LateralBeacon")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("LateralBeacon")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("LateralBeacon")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LateralBeacon")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Decimal? _height = default;
        [Category("LateralBeacon")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private marksNavigationalSystemOf? _marksNavigationalSystemOf = default;
        [Category("LateralBeacon")]
        public marksNavigationalSystemOf? marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        [Category("LateralBeacon")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("LateralBeacon")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("LateralBeacon")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("LateralBeacon")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("LateralBeacon")]
        public ObservableCollection<status> status { get; set; } = new();

        private topmarkViewModel? _topmark;
        [Category("LateralBeacon")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public topmarkViewModel? topmark
        {
            get
            {
                return _topmark;
            }

            set
            {
                SetValue(ref _topmark, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("LateralBeacon")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("LateralBeacon")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("LateralBeacon")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LateralBeacon")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("LateralBeacon")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class LateralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LateralBeacon)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LateralBeacon instance)
        {
            beaconShape = instance.beaconShape;
            categoryOfLateralMark = instance.categoryOfLateralMark;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            height = instance.height;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            topmark = new();
            if (instance.topmark != null)
            {
                topmark = new();
                topmark.Load(instance.topmark);
            }

            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LateralBeacon
            {
                beaconShape = this.beaconShape,
                categoryOfLateralMark = this.categoryOfLateralMark,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                height = this.height,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                topmark = this.topmark?.Model,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LateralBeacon Model => new()
        {
            beaconShape = this._beaconShape,
            categoryOfLateralMark = this._categoryOfLateralMark,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            height = this._height,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            topmark = this._topmark?.Model,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public LateralBeaconViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("CardinalBeacon", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CardinalBeaconViewModel : ViewModelBase
    {
        private beaconShape _beaconShape;
        [Category("CardinalBeacon")]
        public beaconShape beaconShape
        {
            get
            {
                return _beaconShape;
            }

            set
            {
                SetValue(ref _beaconShape, value);
            }
        }

        private categoryOfCardinalMark _categoryOfCardinalMark;
        [Category("CardinalBeacon")]
        public categoryOfCardinalMark categoryOfCardinalMark
        {
            get
            {
                return _categoryOfCardinalMark;
            }

            set
            {
                SetValue(ref _categoryOfCardinalMark, value);
            }
        }

        [Category("CardinalBeacon")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("CardinalBeacon")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("CardinalBeacon")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("CardinalBeacon")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("CardinalBeacon")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("CardinalBeacon")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("CardinalBeacon")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("CardinalBeacon")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private marksNavigationalSystemOf? _marksNavigationalSystemOf = default;
        [Category("CardinalBeacon")]
        public marksNavigationalSystemOf? marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        [Category("CardinalBeacon")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("CardinalBeacon")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("CardinalBeacon")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("CardinalBeacon")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("CardinalBeacon")]
        public ObservableCollection<status> status { get; set; } = new();

        private topmarkViewModel? _topmark;
        [Category("CardinalBeacon")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public topmarkViewModel? topmark
        {
            get
            {
                return _topmark;
            }

            set
            {
                SetValue(ref _topmark, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("CardinalBeacon")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("CardinalBeacon")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("CardinalBeacon")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("CardinalBeacon")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("CardinalBeacon")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class CardinalBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CardinalBeacon)];
        }

        public void Load(DomainModel.S101.FeatureTypes.CardinalBeacon instance)
        {
            beaconShape = instance.beaconShape;
            categoryOfCardinalMark = instance.categoryOfCardinalMark;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            topmark = new();
            if (instance.topmark != null)
            {
                topmark = new();
                topmark.Load(instance.topmark);
            }

            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.CardinalBeacon
            {
                beaconShape = this.beaconShape,
                categoryOfCardinalMark = this.categoryOfCardinalMark,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                topmark = this.topmark?.Model,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.CardinalBeacon Model => new()
        {
            beaconShape = this._beaconShape,
            categoryOfCardinalMark = this._categoryOfCardinalMark,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            topmark = this._topmark?.Model,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public CardinalBeaconViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("IsolatedDangerBeacon", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class IsolatedDangerBeaconViewModel : ViewModelBase
    {
        private beaconShape _beaconShape;
        [Category("IsolatedDangerBeacon")]
        public beaconShape beaconShape
        {
            get
            {
                return _beaconShape;
            }

            set
            {
                SetValue(ref _beaconShape, value);
            }
        }

        [Category("IsolatedDangerBeacon")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("IsolatedDangerBeacon")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("IsolatedDangerBeacon")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("IsolatedDangerBeacon")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("IsolatedDangerBeacon")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("IsolatedDangerBeacon")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("IsolatedDangerBeacon")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("IsolatedDangerBeacon")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private marksNavigationalSystemOf? _marksNavigationalSystemOf = default;
        [Category("IsolatedDangerBeacon")]
        public marksNavigationalSystemOf? marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        [Category("IsolatedDangerBeacon")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("IsolatedDangerBeacon")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("IsolatedDangerBeacon")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("IsolatedDangerBeacon")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("IsolatedDangerBeacon")]
        public ObservableCollection<status> status { get; set; } = new();

        private topmarkViewModel? _topmark;
        [Category("IsolatedDangerBeacon")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public topmarkViewModel? topmark
        {
            get
            {
                return _topmark;
            }

            set
            {
                SetValue(ref _topmark, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("IsolatedDangerBeacon")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("IsolatedDangerBeacon")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("IsolatedDangerBeacon")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("IsolatedDangerBeacon")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("IsolatedDangerBeacon")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class IsolatedDangerBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(IsolatedDangerBeacon)];
        }

        public void Load(DomainModel.S101.FeatureTypes.IsolatedDangerBeacon instance)
        {
            beaconShape = instance.beaconShape;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            topmark = new();
            if (instance.topmark != null)
            {
                topmark = new();
                topmark.Load(instance.topmark);
            }

            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.IsolatedDangerBeacon
            {
                beaconShape = this.beaconShape,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                topmark = this.topmark?.Model,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.IsolatedDangerBeacon Model => new()
        {
            beaconShape = this._beaconShape,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            topmark = this._topmark?.Model,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public IsolatedDangerBeaconViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SafeWaterBeacon", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SafeWaterBeaconViewModel : ViewModelBase
    {
        private beaconShape _beaconShape;
        [Category("SafeWaterBeacon")]
        public beaconShape beaconShape
        {
            get
            {
                return _beaconShape;
            }

            set
            {
                SetValue(ref _beaconShape, value);
            }
        }

        [Category("SafeWaterBeacon")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("SafeWaterBeacon")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("SafeWaterBeacon")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("SafeWaterBeacon")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("SafeWaterBeacon")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("SafeWaterBeacon")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("SafeWaterBeacon")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SafeWaterBeacon")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private marksNavigationalSystemOf? _marksNavigationalSystemOf = default;
        [Category("SafeWaterBeacon")]
        public marksNavigationalSystemOf? marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        [Category("SafeWaterBeacon")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("SafeWaterBeacon")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("SafeWaterBeacon")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("SafeWaterBeacon")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("SafeWaterBeacon")]
        public ObservableCollection<status> status { get; set; } = new();

        private topmarkViewModel? _topmark;
        [Category("SafeWaterBeacon")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public topmarkViewModel? topmark
        {
            get
            {
                return _topmark;
            }

            set
            {
                SetValue(ref _topmark, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("SafeWaterBeacon")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("SafeWaterBeacon")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("SafeWaterBeacon")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SafeWaterBeacon")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("SafeWaterBeacon")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class SafeWaterBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SafeWaterBeacon)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SafeWaterBeacon instance)
        {
            beaconShape = instance.beaconShape;
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            topmark = new();
            if (instance.topmark != null)
            {
                topmark = new();
                topmark.Load(instance.topmark);
            }

            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SafeWaterBeacon
            {
                beaconShape = this.beaconShape,
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                topmark = this.topmark?.Model,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SafeWaterBeacon Model => new()
        {
            beaconShape = this._beaconShape,
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            topmark = this._topmark?.Model,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public SafeWaterBeaconViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SpecialPurposeGeneralBeacon", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SpecialPurposeGeneralBeaconViewModel : ViewModelBase
    {
        private beaconShape _beaconShape;
        [Category("SpecialPurposeGeneralBeacon")]
        public beaconShape beaconShape
        {
            get
            {
                return _beaconShape;
            }

            set
            {
                SetValue(ref _beaconShape, value);
            }
        }

        [Category("SpecialPurposeGeneralBeacon")]
        public ObservableCollection<categoryOfSpecialPurposeMark> categoryOfSpecialPurposeMark { get; set; } = new();

        [Category("SpecialPurposeGeneralBeacon")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("SpecialPurposeGeneralBeacon")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private condition? _condition = default;
        [Category("SpecialPurposeGeneralBeacon")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("SpecialPurposeGeneralBeacon")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("SpecialPurposeGeneralBeacon")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("SpecialPurposeGeneralBeacon")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("SpecialPurposeGeneralBeacon")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SpecialPurposeGeneralBeacon")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private marksNavigationalSystemOf? _marksNavigationalSystemOf = default;
        [Category("SpecialPurposeGeneralBeacon")]
        public marksNavigationalSystemOf? marksNavigationalSystemOf
        {
            get
            {
                return _marksNavigationalSystemOf;
            }

            set
            {
                SetValue(ref _marksNavigationalSystemOf, value);
            }
        }

        [Category("SpecialPurposeGeneralBeacon")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("SpecialPurposeGeneralBeacon")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("SpecialPurposeGeneralBeacon")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("SpecialPurposeGeneralBeacon")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("SpecialPurposeGeneralBeacon")]
        public ObservableCollection<status> status { get; set; } = new();

        private topmarkViewModel? _topmark;
        [Category("SpecialPurposeGeneralBeacon")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public topmarkViewModel? topmark
        {
            get
            {
                return _topmark;
            }

            set
            {
                SetValue(ref _topmark, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("SpecialPurposeGeneralBeacon")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("SpecialPurposeGeneralBeacon")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("SpecialPurposeGeneralBeacon")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SpecialPurposeGeneralBeacon")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("SpecialPurposeGeneralBeacon")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class SpecialPurposeGeneralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SpecialPurposeGeneralBeacon)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SpecialPurposeGeneralBeacon instance)
        {
            beaconShape = instance.beaconShape;
            categoryOfSpecialPurposeMark.Clear();
            if (instance.categoryOfSpecialPurposeMark is not null)
                foreach (var e in instance.categoryOfSpecialPurposeMark)
                    categoryOfSpecialPurposeMark.Add(e);
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            condition = instance.condition;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            marksNavigationalSystemOf = instance.marksNavigationalSystemOf;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            reportedDate = instance.reportedDate;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            topmark = new();
            if (instance.topmark != null)
            {
                topmark = new();
                topmark.Load(instance.topmark);
            }

            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SpecialPurposeGeneralBeacon
            {
                beaconShape = this.beaconShape,
                categoryOfSpecialPurposeMark = this.categoryOfSpecialPurposeMark.ToList(),
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                condition = this.condition,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                marksNavigationalSystemOf = this.marksNavigationalSystemOf,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                reportedDate = this.reportedDate,
                status = this.status.ToList(),
                topmark = this.topmark?.Model,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SpecialPurposeGeneralBeacon Model => new()
        {
            beaconShape = this._beaconShape,
            categoryOfSpecialPurposeMark = this.categoryOfSpecialPurposeMark.ToList(),
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            condition = this._condition,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            marksNavigationalSystemOf = this._marksNavigationalSystemOf,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            reportedDate = this._reportedDate,
            status = this.status.ToList(),
            topmark = this._topmark?.Model,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public SpecialPurposeGeneralBeaconViewModel() : base()
        {
            categoryOfSpecialPurposeMark.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfSpecialPurposeMark));
            };
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Daymark", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class DaymarkViewModel : ViewModelBase
    {
        [Category("Daymark")]
        public ObservableCollection<categoryOfSpecialPurposeMark> categoryOfSpecialPurposeMark { get; set; } = new();

        [Category("Daymark")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("Daymark")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private Decimal? _elevation = default;
        [Category("Daymark")]
        public Decimal? elevation
        {
            get
            {
                return _elevation;
            }

            set
            {
                SetValue(ref _elevation, value);
            }
        }

        [Category("Daymark")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Daymark")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("Daymark")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Daymark")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Daymark")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("Daymark")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("Daymark")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        [Category("Daymark")]
        public ObservableCollection<status> status { get; set; } = new();

        private topmarkDaymarkShape _topmarkDaymarkShape;
        [Category("Daymark")]
        public topmarkDaymarkShape topmarkDaymarkShape
        {
            get
            {
                return _topmarkDaymarkShape;
            }

            set
            {
                SetValue(ref _topmarkDaymarkShape, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("Daymark")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        [Category("Daymark")]
        public ObservableCollection<shapeInformation> shapeInformation { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("Daymark")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Daymark")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("Daymark")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class DaymarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Daymark instance)
        {
            categoryOfSpecialPurposeMark.Clear();
            if (instance.categoryOfSpecialPurposeMark is not null)
                foreach (var e in instance.categoryOfSpecialPurposeMark)
                    categoryOfSpecialPurposeMark.Add(e);
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            elevation = instance.elevation;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            topmarkDaymarkShape = instance.topmarkDaymarkShape;
            verticalLength = instance.verticalLength;
            shapeInformation.Clear();
            if (instance.shapeInformation is not null)
                foreach (var e in instance.shapeInformation)
                    shapeInformation.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Daymark
            {
                categoryOfSpecialPurposeMark = this.categoryOfSpecialPurposeMark.ToList(),
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                elevation = this.elevation,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                status = this.status.ToList(),
                topmarkDaymarkShape = this.topmarkDaymarkShape,
                verticalLength = this.verticalLength,
                shapeInformation = this.shapeInformation.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Daymark Model => new()
        {
            categoryOfSpecialPurposeMark = this.categoryOfSpecialPurposeMark.ToList(),
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            elevation = this._elevation,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            status = this.status.ToList(),
            topmarkDaymarkShape = this._topmarkDaymarkShape,
            verticalLength = this._verticalLength,
            shapeInformation = this.shapeInformation.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public DaymarkViewModel() : base()
        {
            categoryOfSpecialPurposeMark.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfSpecialPurposeMark));
            };
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            shapeInformation.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(shapeInformation));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LightFloat", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LightFloatViewModel : ViewModelBase
    {
        [Category("LightFloat")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("LightFloat")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        [Category("LightFloat")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("LightFloat")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _horizontalLength = default;
        [Category("LightFloat")]
        public Decimal? horizontalLength
        {
            get
            {
                return _horizontalLength;
            }

            set
            {
                SetValue(ref _horizontalLength, value);
            }
        }

        private Decimal? _horizontalWidth = default;
        [Category("LightFloat")]
        public Decimal? horizontalWidth
        {
            get
            {
                return _horizontalWidth;
            }

            set
            {
                SetValue(ref _horizontalWidth, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LightFloat")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("LightFloat")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("LightFloat")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("LightFloat")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        [Category("LightFloat")]
        public ObservableCollection<status> status { get; set; } = new();

        private topmarkViewModel? _topmark;
        [Category("LightFloat")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public topmarkViewModel? topmark
        {
            get
            {
                return _topmark;
            }

            set
            {
                SetValue(ref _topmark, value);
            }
        }

        private Decimal? _verticalLength = default;
        [Category("LightFloat")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("LightFloat")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("LightFloat")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LightFloat")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("LightFloat")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class LightFloatRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LightFloat)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LightFloat instance)
        {
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            horizontalLength = instance.horizontalLength;
            horizontalWidth = instance.horizontalWidth;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            topmark = new();
            if (instance.topmark != null)
            {
                topmark = new();
                topmark.Load(instance.topmark);
            }

            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LightFloat
            {
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                horizontalLength = this.horizontalLength,
                horizontalWidth = this.horizontalWidth,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                status = this.status.ToList(),
                topmark = this.topmark?.Model,
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LightFloat Model => new()
        {
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            horizontalLength = this._horizontalLength,
            horizontalWidth = this._horizontalWidth,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            status = this.status.ToList(),
            topmark = this._topmark?.Model,
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public LightFloatViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("LightVessel", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class LightVesselViewModel : ViewModelBase
    {
        [Category("LightVessel")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("LightVessel")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        [Category("LightVessel")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("LightVessel")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _horizontalLength = default;
        [Category("LightVessel")]
        public Decimal? horizontalLength
        {
            get
            {
                return _horizontalLength;
            }

            set
            {
                SetValue(ref _horizontalLength, value);
            }
        }

        private Decimal? _horizontalWidth = default;
        [Category("LightVessel")]
        public Decimal? horizontalWidth
        {
            get
            {
                return _horizontalWidth;
            }

            set
            {
                SetValue(ref _horizontalWidth, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("LightVessel")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("LightVessel")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("LightVessel")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Boolean? _radarConspicuous = default;
        [Category("LightVessel")]
        public Boolean? radarConspicuous
        {
            get
            {
                return _radarConspicuous;
            }

            set
            {
                SetValue(ref _radarConspicuous, value);
            }
        }

        [Category("LightVessel")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _verticalLength = default;
        [Category("LightVessel")]
        public Decimal? verticalLength
        {
            get
            {
                return _verticalLength;
            }

            set
            {
                SetValue(ref _verticalLength, value);
            }
        }

        private visualProminence? _visualProminence = default;
        [Category("LightVessel")]
        public visualProminence? visualProminence
        {
            get
            {
                return _visualProminence;
            }

            set
            {
                SetValue(ref _visualProminence, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("LightVessel")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("LightVessel")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("LightVessel")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class LightVesselRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LightVessel)];
        }

        public void Load(DomainModel.S101.FeatureTypes.LightVessel instance)
        {
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            horizontalLength = instance.horizontalLength;
            horizontalWidth = instance.horizontalWidth;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarConspicuous = instance.radarConspicuous;
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            verticalLength = instance.verticalLength;
            visualProminence = instance.visualProminence;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.LightVessel
            {
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                horizontalLength = this.horizontalLength,
                horizontalWidth = this.horizontalWidth,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                radarConspicuous = this.radarConspicuous,
                status = this.status.ToList(),
                verticalLength = this.verticalLength,
                visualProminence = this.visualProminence,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.LightVessel Model => new()
        {
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            horizontalLength = this._horizontalLength,
            horizontalWidth = this._horizontalWidth,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            radarConspicuous = this._radarConspicuous,
            status = this.status.ToList(),
            verticalLength = this._verticalLength,
            visualProminence = this._visualProminence,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public LightVesselViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("Retroreflector", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RetroreflectorViewModel : ViewModelBase
    {
        [Category("Retroreflector")]
        public ObservableCollection<colour> colour { get; set; } = new();

        private colourPattern? _colourPattern = default;
        [Category("Retroreflector")]
        public colourPattern? colourPattern
        {
            get
            {
                return _colourPattern;
            }

            set
            {
                SetValue(ref _colourPattern, value);
            }
        }

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("Retroreflector")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("Retroreflector")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("Retroreflector")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("Retroreflector")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("Retroreflector")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("Retroreflector")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("Retroreflector")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RetroreflectorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Retroreflector)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Retroreflector instance)
        {
            colour.Clear();
            if (instance.colour is not null)
                foreach (var e in instance.colour)
                    colour.Add(e);
            colourPattern = instance.colourPattern;
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Retroreflector
            {
                colour = this.colour.ToList(),
                colourPattern = this.colourPattern,
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Retroreflector Model => new()
        {
            colour = this.colour.ToList(),
            colourPattern = this._colourPattern,
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RetroreflectorViewModel() : base()
        {
            colour.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(colour));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("RadarReflector", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RadarReflectorViewModel : ViewModelBase
    {
        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("RadarReflector")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private Decimal? _height = default;
        [Category("RadarReflector")]
        public Decimal? height
        {
            get
            {
                return _height;
            }

            set
            {
                SetValue(ref _height, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("RadarReflector")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("RadarReflector")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("RadarReflector")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("RadarReflector")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("RadarReflector")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RadarReflectorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RadarReflector)];
        }

        public void Load(DomainModel.S101.FeatureTypes.RadarReflector instance)
        {
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            height = instance.height;
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.RadarReflector
            {
                fixedDateRange = this.fixedDateRange?.Model,
                height = this.height,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.RadarReflector Model => new()
        {
            fixedDateRange = this._fixedDateRange?.Model,
            height = this._height,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RadarReflectorViewModel() : base()
        {
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("FogSignal", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class FogSignalViewModel : ViewModelBase
    {
        private categoryOfFogSignal _categoryOfFogSignal;
        [Category("FogSignal")]
        public categoryOfFogSignal categoryOfFogSignal
        {
            get
            {
                return _categoryOfFogSignal;
            }

            set
            {
                SetValue(ref _categoryOfFogSignal, value);
            }
        }

        [Category("FogSignal")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("FogSignal")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("FogSignal")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("FogSignal")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private Int32? _signalFrequency = default;
        [Category("FogSignal")]
        public Int32? signalFrequency
        {
            get
            {
                return _signalFrequency;
            }

            set
            {
                SetValue(ref _signalFrequency, value);
            }
        }

        private signalGeneration? _signalGeneration = default;
        [Category("FogSignal")]
        public signalGeneration? signalGeneration
        {
            get
            {
                return _signalGeneration;
            }

            set
            {
                SetValue(ref _signalGeneration, value);
            }
        }

        private String _signalGroup = string.Empty;
        [Category("FogSignal")]
        public String signalGroup
        {
            get
            {
                return _signalGroup;
            }

            set
            {
                SetValue(ref _signalGroup, value);
            }
        }

        private Decimal? _signalPeriod = default;
        [Category("FogSignal")]
        public Decimal? signalPeriod
        {
            get
            {
                return _signalPeriod;
            }

            set
            {
                SetValue(ref _signalPeriod, value);
            }
        }

        [Category("FogSignal")]
        public ObservableCollection<signalSequence> signalSequence { get; set; } = new();

        [Category("FogSignal")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _valueOfMaximumRange = default;
        [Category("FogSignal")]
        public Decimal? valueOfMaximumRange
        {
            get
            {
                return _valueOfMaximumRange;
            }

            set
            {
                SetValue(ref _valueOfMaximumRange, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("FogSignal")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("FogSignal")]
        public ObservableCollection<information> information { get; set; } = new();

        public class FogSignalRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FogSignal)];
        }

        public void Load(DomainModel.S101.FeatureTypes.FogSignal instance)
        {
            categoryOfFogSignal = instance.categoryOfFogSignal;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            signalFrequency = instance.signalFrequency;
            signalGeneration = instance.signalGeneration;
            signalGroup = instance.signalGroup;
            signalPeriod = instance.signalPeriod;
            signalSequence.Clear();
            if (instance.signalSequence is not null)
                foreach (var e in instance.signalSequence)
                    signalSequence.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            valueOfMaximumRange = instance.valueOfMaximumRange;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.FogSignal
            {
                categoryOfFogSignal = this.categoryOfFogSignal,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                signalFrequency = this.signalFrequency,
                signalGeneration = this.signalGeneration,
                signalGroup = this.signalGroup,
                signalPeriod = this.signalPeriod,
                signalSequence = this.signalSequence.ToList(),
                status = this.status.ToList(),
                valueOfMaximumRange = this.valueOfMaximumRange,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.FogSignal Model => new()
        {
            categoryOfFogSignal = this._categoryOfFogSignal,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            signalFrequency = this._signalFrequency,
            signalGeneration = this._signalGeneration,
            signalGroup = this._signalGroup,
            signalPeriod = this._signalPeriod,
            signalSequence = this.signalSequence.ToList(),
            status = this.status.ToList(),
            valueOfMaximumRange = this._valueOfMaximumRange,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public FogSignalViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            signalSequence.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(signalSequence));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("PhysicalAISAidToNavigation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class PhysicalAISAidToNavigationViewModel : ViewModelBase
    {
        private Decimal? _estimatedRangeOfTransmission = default;
        [Category("PhysicalAISAidToNavigation")]
        public Decimal? estimatedRangeOfTransmission
        {
            get
            {
                return _estimatedRangeOfTransmission;
            }

            set
            {
                SetValue(ref _estimatedRangeOfTransmission, value);
            }
        }

        [Category("PhysicalAISAidToNavigation")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("PhysicalAISAidToNavigation")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("PhysicalAISAidToNavigation")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private String _mMSICode = string.Empty;
        [Category("PhysicalAISAidToNavigation")]
        public String mMSICode
        {
            get
            {
                return _mMSICode;
            }

            set
            {
                SetValue(ref _mMSICode, value);
            }
        }

        [Category("PhysicalAISAidToNavigation")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private status? _status = default;
        [Category("PhysicalAISAidToNavigation")]
        public status? status
        {
            get
            {
                return _status;
            }

            set
            {
                SetValue(ref _status, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("PhysicalAISAidToNavigation")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("PhysicalAISAidToNavigation")]
        public ObservableCollection<information> information { get; set; } = new();

        public class PhysicalAISAidToNavigationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(PhysicalAISAidToNavigation)];
        }

        public void Load(DomainModel.S101.FeatureTypes.PhysicalAISAidToNavigation instance)
        {
            estimatedRangeOfTransmission = instance.estimatedRangeOfTransmission;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            mMSICode = instance.mMSICode;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status = instance.status;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.PhysicalAISAidToNavigation
            {
                estimatedRangeOfTransmission = this.estimatedRangeOfTransmission,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                mMSICode = this.mMSICode,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.PhysicalAISAidToNavigation Model => new()
        {
            estimatedRangeOfTransmission = this._estimatedRangeOfTransmission,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            mMSICode = this._mMSICode,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this._status,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public PhysicalAISAidToNavigationViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("VirtualAISAidToNavigation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class VirtualAISAidToNavigationViewModel : ViewModelBase
    {
        private Decimal? _estimatedRangeOfTransmission = default;
        [Category("VirtualAISAidToNavigation")]
        public Decimal? estimatedRangeOfTransmission
        {
            get
            {
                return _estimatedRangeOfTransmission;
            }

            set
            {
                SetValue(ref _estimatedRangeOfTransmission, value);
            }
        }

        [Category("VirtualAISAidToNavigation")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("VirtualAISAidToNavigation")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("VirtualAISAidToNavigation")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private String _mMSICode = string.Empty;
        [Category("VirtualAISAidToNavigation")]
        public String mMSICode
        {
            get
            {
                return _mMSICode;
            }

            set
            {
                SetValue(ref _mMSICode, value);
            }
        }

        [Category("VirtualAISAidToNavigation")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private status? _status = default;
        [Category("VirtualAISAidToNavigation")]
        public status? status
        {
            get
            {
                return _status;
            }

            set
            {
                SetValue(ref _status, value);
            }
        }

        private virtualAISAidToNavigationType _virtualAISAidToNavigationType;
        [Category("VirtualAISAidToNavigation")]
        public virtualAISAidToNavigationType virtualAISAidToNavigationType
        {
            get
            {
                return _virtualAISAidToNavigationType;
            }

            set
            {
                SetValue(ref _virtualAISAidToNavigationType, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("VirtualAISAidToNavigation")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("VirtualAISAidToNavigation")]
        public ObservableCollection<information> information { get; set; } = new();

        public class VirtualAISAidToNavigationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(VirtualAISAidToNavigation)];
        }

        public void Load(DomainModel.S101.FeatureTypes.VirtualAISAidToNavigation instance)
        {
            estimatedRangeOfTransmission = instance.estimatedRangeOfTransmission;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            mMSICode = instance.mMSICode;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status = instance.status;
            virtualAISAidToNavigationType = instance.virtualAISAidToNavigationType;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.VirtualAISAidToNavigation
            {
                estimatedRangeOfTransmission = this.estimatedRangeOfTransmission,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                mMSICode = this.mMSICode,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status,
                virtualAISAidToNavigationType = this.virtualAISAidToNavigationType,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.VirtualAISAidToNavigation Model => new()
        {
            estimatedRangeOfTransmission = this._estimatedRangeOfTransmission,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            mMSICode = this._mMSICode,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this._status,
            virtualAISAidToNavigationType = this._virtualAISAidToNavigationType,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public VirtualAISAidToNavigationViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("RadioStation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RadioStationViewModel : ViewModelBase
    {
        private String _callSign = string.Empty;
        [Category("RadioStation")]
        public String callSign
        {
            get
            {
                return _callSign;
            }

            set
            {
                SetValue(ref _callSign, value);
            }
        }

        [Category("RadioStation")]
        public ObservableCollection<categoryOfRadioStation> categoryOfRadioStation { get; set; } = new();

        [Category("RadioStation")]
        public ObservableCollection<String> communicationChannel { get; set; } = new();

        private Decimal? _estimatedRangeOfTransmission = default;
        [Category("RadioStation")]
        public Decimal? estimatedRangeOfTransmission
        {
            get
            {
                return _estimatedRangeOfTransmission;
            }

            set
            {
                SetValue(ref _estimatedRangeOfTransmission, value);
            }
        }

        [Category("RadioStation")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("RadioStation")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private frequencyPairViewModel? _frequencyPair;
        [Category("RadioStation")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public frequencyPairViewModel? frequencyPair
        {
            get
            {
                return _frequencyPair;
            }

            set
            {
                SetValue(ref _frequencyPair, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("RadioStation")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("RadioStation")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("RadioStation")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("RadioStation")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("RadioStation")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RadioStationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RadioStation)];
        }

        public void Load(DomainModel.S101.FeatureTypes.RadioStation instance)
        {
            callSign = instance.callSign;
            categoryOfRadioStation.Clear();
            if (instance.categoryOfRadioStation is not null)
                foreach (var e in instance.categoryOfRadioStation)
                    categoryOfRadioStation.Add(e);
            communicationChannel.Clear();
            if (instance.communicationChannel is not null)
                foreach (var e in instance.communicationChannel)
                    communicationChannel.Add(e);
            estimatedRangeOfTransmission = instance.estimatedRangeOfTransmission;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            frequencyPair = new();
            if (instance.frequencyPair != null)
            {
                frequencyPair = new();
                frequencyPair.Load(instance.frequencyPair);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.RadioStation
            {
                callSign = this.callSign,
                categoryOfRadioStation = this.categoryOfRadioStation.ToList(),
                communicationChannel = this.communicationChannel.ToList(),
                estimatedRangeOfTransmission = this.estimatedRangeOfTransmission,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                frequencyPair = this.frequencyPair?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.RadioStation Model => new()
        {
            callSign = this._callSign,
            categoryOfRadioStation = this.categoryOfRadioStation.ToList(),
            communicationChannel = this.communicationChannel.ToList(),
            estimatedRangeOfTransmission = this._estimatedRangeOfTransmission,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            frequencyPair = this._frequencyPair?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RadioStationViewModel() : base()
        {
            categoryOfRadioStation.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfRadioStation));
            };
            communicationChannel.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(communicationChannel));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("RadarTransponderBeacon", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RadarTransponderBeaconViewModel : ViewModelBase
    {
        private categoryOfRadarTransponderBeacon _categoryOfRadarTransponderBeacon;
        [Category("RadarTransponderBeacon")]
        public categoryOfRadarTransponderBeacon categoryOfRadarTransponderBeacon
        {
            get
            {
                return _categoryOfRadarTransponderBeacon;
            }

            set
            {
                SetValue(ref _categoryOfRadarTransponderBeacon, value);
            }
        }

        [Category("RadarTransponderBeacon")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("RadarTransponderBeacon")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("RadarTransponderBeacon")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("RadarTransponderBeacon")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("RadarTransponderBeacon")]
        public ObservableCollection<radarWaveLength> radarWaveLength { get; set; } = new();

        private sectorLimitViewModel? _sectorLimit;
        [Category("RadarTransponderBeacon")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public sectorLimitViewModel? sectorLimit
        {
            get
            {
                return _sectorLimit;
            }

            set
            {
                SetValue(ref _sectorLimit, value);
            }
        }

        private String _signalGroup = string.Empty;
        [Category("RadarTransponderBeacon")]
        public String signalGroup
        {
            get
            {
                return _signalGroup;
            }

            set
            {
                SetValue(ref _signalGroup, value);
            }
        }

        [Category("RadarTransponderBeacon")]
        public ObservableCollection<signalSequence> signalSequence { get; set; } = new();

        [Category("RadarTransponderBeacon")]
        public ObservableCollection<status> status { get; set; } = new();

        private Decimal? _valueOfMaximumRange = default;
        [Category("RadarTransponderBeacon")]
        public Decimal? valueOfMaximumRange
        {
            get
            {
                return _valueOfMaximumRange;
            }

            set
            {
                SetValue(ref _valueOfMaximumRange, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("RadarTransponderBeacon")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("RadarTransponderBeacon")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RadarTransponderBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RadarTransponderBeacon)];
        }

        public void Load(DomainModel.S101.FeatureTypes.RadarTransponderBeacon instance)
        {
            categoryOfRadarTransponderBeacon = instance.categoryOfRadarTransponderBeacon;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            radarWaveLength.Clear();
            if (instance.radarWaveLength is not null)
                foreach (var e in instance.radarWaveLength)
                    radarWaveLength.Add(e);
            sectorLimit = new();
            if (instance.sectorLimit != null)
            {
                sectorLimit = new();
                sectorLimit.Load(instance.sectorLimit);
            }

            signalGroup = instance.signalGroup;
            signalSequence.Clear();
            if (instance.signalSequence is not null)
                foreach (var e in instance.signalSequence)
                    signalSequence.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            valueOfMaximumRange = instance.valueOfMaximumRange;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.RadarTransponderBeacon
            {
                categoryOfRadarTransponderBeacon = this.categoryOfRadarTransponderBeacon,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                radarWaveLength = this.radarWaveLength.ToList(),
                sectorLimit = this.sectorLimit?.Model,
                signalGroup = this.signalGroup,
                signalSequence = this.signalSequence.ToList(),
                status = this.status.ToList(),
                valueOfMaximumRange = this.valueOfMaximumRange,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.RadarTransponderBeacon Model => new()
        {
            categoryOfRadarTransponderBeacon = this._categoryOfRadarTransponderBeacon,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            radarWaveLength = this.radarWaveLength.ToList(),
            sectorLimit = this._sectorLimit?.Model,
            signalGroup = this._signalGroup,
            signalSequence = this.signalSequence.ToList(),
            status = this.status.ToList(),
            valueOfMaximumRange = this._valueOfMaximumRange,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RadarTransponderBeaconViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            radarWaveLength.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(radarWaveLength));
            };
            signalSequence.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(signalSequence));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("PilotBoardingPlace", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class PilotBoardingPlaceViewModel : ViewModelBase
    {
        private categoryOfPilotBoardingPlace? _categoryOfPilotBoardingPlace = default;
        [Category("PilotBoardingPlace")]
        public categoryOfPilotBoardingPlace? categoryOfPilotBoardingPlace
        {
            get
            {
                return _categoryOfPilotBoardingPlace;
            }

            set
            {
                SetValue(ref _categoryOfPilotBoardingPlace, value);
            }
        }

        private categoryOfPreference? _categoryOfPreference = default;
        [Category("PilotBoardingPlace")]
        public categoryOfPreference? categoryOfPreference
        {
            get
            {
                return _categoryOfPreference;
            }

            set
            {
                SetValue(ref _categoryOfPreference, value);
            }
        }

        [Category("PilotBoardingPlace")]
        public ObservableCollection<String> communicationChannel { get; set; } = new();

        [Category("PilotBoardingPlace")]
        public ObservableCollection<String> destination { get; set; } = new();

        [Category("PilotBoardingPlace")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("PilotBoardingPlace")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("PilotBoardingPlace")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("PilotBoardingPlace")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("PilotBoardingPlace")]
        public ObservableCollection<pilotMovement> pilotMovement { get; set; } = new();

        [Category("PilotBoardingPlace")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("PilotBoardingPlace")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("PilotBoardingPlace")]
        public ObservableCollection<information> information { get; set; } = new();

        public class PilotBoardingPlaceRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(PilotBoardingPlace)];
        }

        public void Load(DomainModel.S101.FeatureTypes.PilotBoardingPlace instance)
        {
            categoryOfPilotBoardingPlace = instance.categoryOfPilotBoardingPlace;
            categoryOfPreference = instance.categoryOfPreference;
            communicationChannel.Clear();
            if (instance.communicationChannel is not null)
                foreach (var e in instance.communicationChannel)
                    communicationChannel.Add(e);
            destination.Clear();
            if (instance.destination is not null)
                foreach (var e in instance.destination)
                    destination.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            pilotMovement.Clear();
            if (instance.pilotMovement is not null)
                foreach (var e in instance.pilotMovement)
                    pilotMovement.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.PilotBoardingPlace
            {
                categoryOfPilotBoardingPlace = this.categoryOfPilotBoardingPlace,
                categoryOfPreference = this.categoryOfPreference,
                communicationChannel = this.communicationChannel.ToList(),
                destination = this.destination.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                pilotMovement = this.pilotMovement.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.PilotBoardingPlace Model => new()
        {
            categoryOfPilotBoardingPlace = this._categoryOfPilotBoardingPlace,
            categoryOfPreference = this._categoryOfPreference,
            communicationChannel = this.communicationChannel.ToList(),
            destination = this.destination.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            pilotMovement = this.pilotMovement.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public PilotBoardingPlaceViewModel() : base()
        {
            communicationChannel.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(communicationChannel));
            };
            destination.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(destination));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            pilotMovement.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(pilotMovement));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("VesselTrafficServiceArea", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class VesselTrafficServiceAreaViewModel : ViewModelBase
    {
        [Category("VesselTrafficServiceArea")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("VesselTrafficServiceArea")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Int32? _scaleMinimum = default;
        [Category("VesselTrafficServiceArea")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("VesselTrafficServiceArea")]
        public ObservableCollection<information> information { get; set; } = new();

        public class VesselTrafficServiceAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(VesselTrafficServiceArea)];
        }

        public void Load(DomainModel.S101.FeatureTypes.VesselTrafficServiceArea instance)
        {
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.VesselTrafficServiceArea
            {
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.VesselTrafficServiceArea Model => new()
        {
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public VesselTrafficServiceAreaViewModel() : base()
        {
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("CoastGuardStation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class CoastGuardStationViewModel : ViewModelBase
    {
        [Category("CoastGuardStation")]
        public ObservableCollection<String> communicationChannel { get; set; } = new();

        [Category("CoastGuardStation")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("CoastGuardStation")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("CoastGuardStation")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        private Boolean? _isMRCC = default;
        [Category("CoastGuardStation")]
        public Boolean? isMRCC
        {
            get
            {
                return _isMRCC;
            }

            set
            {
                SetValue(ref _isMRCC, value);
            }
        }

        [Category("CoastGuardStation")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("CoastGuardStation")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("CoastGuardStation")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("CoastGuardStation")]
        public ObservableCollection<information> information { get; set; } = new();

        public class CoastGuardStationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CoastGuardStation)];
        }

        public void Load(DomainModel.S101.FeatureTypes.CoastGuardStation instance)
        {
            communicationChannel.Clear();
            if (instance.communicationChannel is not null)
                foreach (var e in instance.communicationChannel)
                    communicationChannel.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            isMRCC = instance.isMRCC;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.CoastGuardStation
            {
                communicationChannel = this.communicationChannel.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                isMRCC = this.isMRCC,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.CoastGuardStation Model => new()
        {
            communicationChannel = this.communicationChannel.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            isMRCC = this._isMRCC,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public CoastGuardStationViewModel() : base()
        {
            communicationChannel.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(communicationChannel));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SignalStationWarning", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SignalStationWarningViewModel : ViewModelBase
    {
        [Category("SignalStationWarning")]
        public ObservableCollection<categoryOfSignalStationWarning> categoryOfSignalStationWarning { get; set; } = new();

        [Category("SignalStationWarning")]
        public ObservableCollection<String> communicationChannel { get; set; } = new();

        [Category("SignalStationWarning")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("SignalStationWarning")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SignalStationWarning")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("SignalStationWarning")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("SignalStationWarning")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("SignalStationWarning")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SignalStationWarning")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SignalStationWarningRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SignalStationWarning)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SignalStationWarning instance)
        {
            categoryOfSignalStationWarning.Clear();
            if (instance.categoryOfSignalStationWarning is not null)
                foreach (var e in instance.categoryOfSignalStationWarning)
                    categoryOfSignalStationWarning.Add(e);
            communicationChannel.Clear();
            if (instance.communicationChannel is not null)
                foreach (var e in instance.communicationChannel)
                    communicationChannel.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SignalStationWarning
            {
                categoryOfSignalStationWarning = this.categoryOfSignalStationWarning.ToList(),
                communicationChannel = this.communicationChannel.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SignalStationWarning Model => new()
        {
            categoryOfSignalStationWarning = this.categoryOfSignalStationWarning.ToList(),
            communicationChannel = this.communicationChannel.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SignalStationWarningViewModel() : base()
        {
            categoryOfSignalStationWarning.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfSignalStationWarning));
            };
            communicationChannel.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(communicationChannel));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SignalStationTraffic", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SignalStationTrafficViewModel : ViewModelBase
    {
        [Category("SignalStationTraffic")]
        public ObservableCollection<categoryOfSignalStationTraffic> categoryOfSignalStationTraffic { get; set; } = new();

        [Category("SignalStationTraffic")]
        public ObservableCollection<String> communicationChannel { get; set; } = new();

        [Category("SignalStationTraffic")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("SignalStationTraffic")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SignalStationTraffic")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("SignalStationTraffic")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("SignalStationTraffic")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("SignalStationTraffic")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SignalStationTraffic")]
        public ObservableCollection<information> information { get; set; } = new();

        public class SignalStationTrafficRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SignalStationTraffic)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SignalStationTraffic instance)
        {
            categoryOfSignalStationTraffic.Clear();
            if (instance.categoryOfSignalStationTraffic is not null)
                foreach (var e in instance.categoryOfSignalStationTraffic)
                    categoryOfSignalStationTraffic.Add(e);
            communicationChannel.Clear();
            if (instance.communicationChannel is not null)
                foreach (var e in instance.communicationChannel)
                    communicationChannel.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SignalStationTraffic
            {
                categoryOfSignalStationTraffic = this.categoryOfSignalStationTraffic.ToList(),
                communicationChannel = this.communicationChannel.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SignalStationTraffic Model => new()
        {
            categoryOfSignalStationTraffic = this.categoryOfSignalStationTraffic.ToList(),
            communicationChannel = this.communicationChannel.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public SignalStationTrafficViewModel() : base()
        {
            categoryOfSignalStationTraffic.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfSignalStationTraffic));
            };
            communicationChannel.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(communicationChannel));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("RescueStation", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class RescueStationViewModel : ViewModelBase
    {
        [Category("RescueStation")]
        public ObservableCollection<categoryOfRescueStation> categoryOfRescueStation { get; set; } = new();

        [Category("RescueStation")]
        public ObservableCollection<String> communicationChannel { get; set; } = new();

        [Category("RescueStation")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("RescueStation")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("RescueStation")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("RescueStation")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("RescueStation")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("RescueStation")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("RescueStation")]
        public ObservableCollection<information> information { get; set; } = new();

        public class RescueStationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RescueStation)];
        }

        public void Load(DomainModel.S101.FeatureTypes.RescueStation instance)
        {
            categoryOfRescueStation.Clear();
            if (instance.categoryOfRescueStation is not null)
                foreach (var e in instance.categoryOfRescueStation)
                    categoryOfRescueStation.Add(e);
            communicationChannel.Clear();
            if (instance.communicationChannel is not null)
                foreach (var e in instance.communicationChannel)
                    communicationChannel.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.RescueStation
            {
                categoryOfRescueStation = this.categoryOfRescueStation.ToList(),
                communicationChannel = this.communicationChannel.ToList(),
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.RescueStation Model => new()
        {
            categoryOfRescueStation = this.categoryOfRescueStation.ToList(),
            communicationChannel = this.communicationChannel.ToList(),
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
        };

        public RescueStationViewModel() : base()
        {
            categoryOfRescueStation.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfRescueStation));
            };
            communicationChannel.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(communicationChannel));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("HarbourFacility", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class HarbourFacilityViewModel : ViewModelBase
    {
        [Category("HarbourFacility")]
        public ObservableCollection<categoryOfHarbourFacility> categoryOfHarbourFacility { get; set; } = new();

        [Category("HarbourFacility")]
        public ObservableCollection<String> communicationChannel { get; set; } = new();

        private condition? _condition = default;
        [Category("HarbourFacility")]
        public condition? condition
        {
            get
            {
                return _condition;
            }

            set
            {
                SetValue(ref _condition, value);
            }
        }

        [Category("HarbourFacility")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private fixedDateRangeViewModel? _fixedDateRange;
        [Category("HarbourFacility")]
        [Xceed.Wpf.Toolkit.PropertyGrid.Attributes.ExpandableObject]
        public fixedDateRangeViewModel? fixedDateRange
        {
            get
            {
                return _fixedDateRange;
            }

            set
            {
                SetValue(ref _fixedDateRange, value);
            }
        }

        private String _interoperabilityIdentifier = string.Empty;
        [Category("HarbourFacility")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("HarbourFacility")]
        public ObservableCollection<natureOfConstruction> natureOfConstruction { get; set; } = new();

        [Category("HarbourFacility")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        private product? _product = default;
        [Category("HarbourFacility")]
        public product? product
        {
            get
            {
                return _product;
            }

            set
            {
                SetValue(ref _product, value);
            }
        }

        private DateOnly? _reportedDate = default;
        [Category("HarbourFacility")]
        public DateOnly? reportedDate
        {
            get
            {
                return _reportedDate;
            }

            set
            {
                SetValue(ref _reportedDate, value);
            }
        }

        [Category("HarbourFacility")]
        public ObservableCollection<restriction> restriction { get; set; } = new();

        [Category("HarbourFacility")]
        public ObservableCollection<status> status { get; set; } = new();

        [Category("HarbourFacility")]
        public ObservableCollection<vesselSpeedLimit> vesselSpeedLimit { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("HarbourFacility")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("HarbourFacility")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("HarbourFacility")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class HarbourFacilityRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(HarbourFacility)];
        }

        public void Load(DomainModel.S101.FeatureTypes.HarbourFacility instance)
        {
            categoryOfHarbourFacility.Clear();
            if (instance.categoryOfHarbourFacility is not null)
                foreach (var e in instance.categoryOfHarbourFacility)
                    categoryOfHarbourFacility.Add(e);
            communicationChannel.Clear();
            if (instance.communicationChannel is not null)
                foreach (var e in instance.communicationChannel)
                    communicationChannel.Add(e);
            condition = instance.condition;
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            fixedDateRange = new();
            if (instance.fixedDateRange != null)
            {
                fixedDateRange = new();
                fixedDateRange.Load(instance.fixedDateRange);
            }

            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            natureOfConstruction.Clear();
            if (instance.natureOfConstruction is not null)
                foreach (var e in instance.natureOfConstruction)
                    natureOfConstruction.Add(e);
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            product = instance.product;
            reportedDate = instance.reportedDate;
            restriction.Clear();
            if (instance.restriction is not null)
                foreach (var e in instance.restriction)
                    restriction.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            vesselSpeedLimit.Clear();
            if (instance.vesselSpeedLimit is not null)
                foreach (var e in instance.vesselSpeedLimit)
                    vesselSpeedLimit.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.HarbourFacility
            {
                categoryOfHarbourFacility = this.categoryOfHarbourFacility.ToList(),
                communicationChannel = this.communicationChannel.ToList(),
                condition = this.condition,
                featureName = this.featureName.ToList(),
                fixedDateRange = this.fixedDateRange?.Model,
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                natureOfConstruction = this.natureOfConstruction.ToList(),
                periodicDateRange = this.periodicDateRange.ToList(),
                product = this.product,
                reportedDate = this.reportedDate,
                restriction = this.restriction.ToList(),
                status = this.status.ToList(),
                vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.HarbourFacility Model => new()
        {
            categoryOfHarbourFacility = this.categoryOfHarbourFacility.ToList(),
            communicationChannel = this.communicationChannel.ToList(),
            condition = this._condition,
            featureName = this.featureName.ToList(),
            fixedDateRange = this._fixedDateRange?.Model,
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            natureOfConstruction = this.natureOfConstruction.ToList(),
            periodicDateRange = this.periodicDateRange.ToList(),
            product = this._product,
            reportedDate = this._reportedDate,
            restriction = this.restriction.ToList(),
            status = this.status.ToList(),
            vesselSpeedLimit = this.vesselSpeedLimit.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public HarbourFacilityViewModel() : base()
        {
            categoryOfHarbourFacility.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfHarbourFacility));
            };
            communicationChannel.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(communicationChannel));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            natureOfConstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(natureOfConstruction));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            restriction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(restriction));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            vesselSpeedLimit.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(vesselSpeedLimit));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("SmallCraftFacility", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class SmallCraftFacilityViewModel : ViewModelBase
    {
        [Category("SmallCraftFacility")]
        public ObservableCollection<categoryOfSmallCraftFacility> categoryOfSmallCraftFacility { get; set; } = new();

        [Category("SmallCraftFacility")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        private String _interoperabilityIdentifier = string.Empty;
        [Category("SmallCraftFacility")]
        public String interoperabilityIdentifier
        {
            get
            {
                return _interoperabilityIdentifier;
            }

            set
            {
                SetValue(ref _interoperabilityIdentifier, value);
            }
        }

        [Category("SmallCraftFacility")]
        public ObservableCollection<periodicDateRange> periodicDateRange { get; set; } = new();

        [Category("SmallCraftFacility")]
        public ObservableCollection<status> status { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("SmallCraftFacility")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        [Category("SmallCraftFacility")]
        public ObservableCollection<information> information { get; set; } = new();

        private String _pictorialRepresentation = string.Empty;
        [Category("SmallCraftFacility")]
        public String pictorialRepresentation
        {
            get
            {
                return _pictorialRepresentation;
            }

            set
            {
                SetValue(ref _pictorialRepresentation, value);
            }
        }

        public class SmallCraftFacilityRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SmallCraftFacility)];
        }

        public void Load(DomainModel.S101.FeatureTypes.SmallCraftFacility instance)
        {
            categoryOfSmallCraftFacility.Clear();
            if (instance.categoryOfSmallCraftFacility is not null)
                foreach (var e in instance.categoryOfSmallCraftFacility)
                    categoryOfSmallCraftFacility.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
            interoperabilityIdentifier = instance.interoperabilityIdentifier;
            periodicDateRange.Clear();
            if (instance.periodicDateRange is not null)
                foreach (var e in instance.periodicDateRange)
                    periodicDateRange.Add(e);
            status.Clear();
            if (instance.status is not null)
                foreach (var e in instance.status)
                    status.Add(e);
            scaleMinimum = instance.scaleMinimum;
            information.Clear();
            if (instance.information is not null)
                foreach (var e in instance.information)
                    information.Add(e);
            pictorialRepresentation = instance.pictorialRepresentation;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.SmallCraftFacility
            {
                categoryOfSmallCraftFacility = this.categoryOfSmallCraftFacility.ToList(),
                featureName = this.featureName.ToList(),
                interoperabilityIdentifier = this.interoperabilityIdentifier,
                periodicDateRange = this.periodicDateRange.ToList(),
                status = this.status.ToList(),
                scaleMinimum = this.scaleMinimum,
                information = this.information.ToList(),
                pictorialRepresentation = this.pictorialRepresentation,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.SmallCraftFacility Model => new()
        {
            categoryOfSmallCraftFacility = this.categoryOfSmallCraftFacility.ToList(),
            featureName = this.featureName.ToList(),
            interoperabilityIdentifier = this._interoperabilityIdentifier,
            periodicDateRange = this.periodicDateRange.ToList(),
            status = this.status.ToList(),
            scaleMinimum = this._scaleMinimum,
            information = this.information.ToList(),
            pictorialRepresentation = this._pictorialRepresentation,
        };

        public SmallCraftFacilityViewModel() : base()
        {
            categoryOfSmallCraftFacility.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(categoryOfSmallCraftFacility));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
            periodicDateRange.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(periodicDateRange));
            };
            status.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(status));
            };
            information.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(information));
            };
        }
    }

    [CategoryOrder("TextPlacement", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class TextPlacementViewModel : ViewModelBase
    {
        private Int32 _textOffsetBearing;
        [Category("TextPlacement")]
        public Int32 textOffsetBearing
        {
            get
            {
                return _textOffsetBearing;
            }

            set
            {
                SetValue(ref _textOffsetBearing, value);
            }
        }

        private Int32 _textOffsetDistance;
        [Category("TextPlacement")]
        public Int32 textOffsetDistance
        {
            get
            {
                return _textOffsetDistance;
            }

            set
            {
                SetValue(ref _textOffsetDistance, value);
            }
        }

        private Boolean? _textRotation = default;
        [Category("TextPlacement")]
        public Boolean? textRotation
        {
            get
            {
                return _textRotation;
            }

            set
            {
                SetValue(ref _textRotation, value);
            }
        }

        [Category("TextPlacement")]
        public ObservableCollection<textType> textType { get; set; } = new();

        private Int32? _scaleMinimum = default;
        [Category("TextPlacement")]
        public Int32? scaleMinimum
        {
            get
            {
                return _scaleMinimum;
            }

            set
            {
                SetValue(ref _scaleMinimum, value);
            }
        }

        public class TextPlacementRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public void Load(DomainModel.S101.FeatureTypes.TextPlacement instance)
        {
            textOffsetBearing = instance.textOffsetBearing;
            textOffsetDistance = instance.textOffsetDistance;
            textRotation = instance.textRotation;
            textType.Clear();
            if (instance.textType is not null)
                foreach (var e in instance.textType)
                    textType.Add(e);
            scaleMinimum = instance.scaleMinimum;
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.TextPlacement
            {
                textOffsetBearing = this.textOffsetBearing,
                textOffsetDistance = this.textOffsetDistance,
                textRotation = this.textRotation,
                textType = this.textType.ToList(),
                scaleMinimum = this.scaleMinimum,
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.TextPlacement Model => new()
        {
            textOffsetBearing = this._textOffsetBearing,
            textOffsetDistance = this._textOffsetDistance,
            textRotation = this._textRotation,
            textType = this.textType.ToList(),
            scaleMinimum = this._scaleMinimum,
        };

        public TextPlacementViewModel() : base()
        {
            textType.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(textType));
            };
        }
    }

    [CategoryOrder("Chart1Feature", 0)]
    [CategoryOrder("InformationBindings", 100)]
    [CategoryOrder("FeatureBindings", 200)]
    public partial class Chart1FeatureViewModel : ViewModelBase
    {
        [Category("Chart1Feature")]
        public ObservableCollection<String> drawingInstruction { get; set; } = new();

        [Category("Chart1Feature")]
        public ObservableCollection<featureName> featureName { get; set; } = new();

        public class Chart1FeatureRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Chart1Feature)];
        }

        public void Load(DomainModel.S101.FeatureTypes.Chart1Feature instance)
        {
            drawingInstruction.Clear();
            if (instance.drawingInstruction is not null)
                foreach (var e in instance.drawingInstruction)
                    drawingInstruction.Add(e);
            featureName.Clear();
            if (instance.featureName is not null)
                foreach (var e in instance.featureName)
                    featureName.Add(e);
        }

        public override string Serialize()
        {
            var instance = new DomainModel.S101.FeatureTypes.Chart1Feature
            {
                drawingInstruction = this.drawingInstruction.ToList(),
                featureName = this.featureName.ToList(),
            };
            return System.Text.Json.JsonSerializer.Serialize(instance);
        }

        [Browsable(false)]
        public DomainModel.S101.FeatureTypes.Chart1Feature Model => new()
        {
            drawingInstruction = this.drawingInstruction.ToList(),
            featureName = this.featureName.ToList(),
        };

        public Chart1FeatureViewModel() : base()
        {
            drawingInstruction.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(drawingInstruction));
            };
            featureName.CollectionChanged += (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) =>
            {
                OnPropertyChanged(nameof(featureName));
            };
        }
    }

    public class AidsToNavigationAssociationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "AidsToNavigationAssociation";
        public override string[] Roles => ["theCollection", "theComponent"];

        private FeatureBindingViewModel? _theCollection;
        [ExpandableObject]
        public FeatureBindingViewModel? theCollection
        {
            get
            {
                return _theCollection;
            }

            set
            {
                this.SetValue(ref _theCollection, value);
            }
        }

        private FeatureBindingViewModel? _theComponent;
        [ExpandableObject]
        public FeatureBindingViewModel? theComponent
        {
            get
            {
                return _theComponent;
            }

            set
            {
                this.SetValue(ref _theComponent, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCollection = null;
                if (value is not null)
                {
                    theCollection = value?.role switch
                    {
                        "theComponent" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theComponent = null;
                if (value is not null)
                {
                    theComponent = value?.role switch
                    {
                        "theCollection" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => AidsToNavigationAssociationViewModel._associationConnectorFeatures;

        public class theCollectionBridgeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionBuildingRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionCardinalBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionCardinalBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionConveyorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionCraneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionDaymarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionDolphinRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionEmergencyWreckMarkingBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionFishingFacilityRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionFloatingDockRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionFortifiedStructureRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionHulkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionIsolatedDangerBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionIsolatedDangerBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionLandmarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionLateralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionLateralBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionLightFloatRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionLightVesselRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionMooringBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionOffshorePlatformRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionPileRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionPipelineOverheadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionPontoonRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionPylonBridgeSupportRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionSafeWaterBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionSafeWaterBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionShorelineConstructionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionSiloTankRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionSpanFixedRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionSpanOpeningRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionSpecialPurposeGeneralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionSpecialPurposeGeneralBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionStructureOverNavigableWaterRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theCollectionWindTurbineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute), typeof(FairwaySystem), typeof(TrafficSeparationScheme), typeof(TwoWayRoute)];
        }

        public class theComponentArchipelagicSeaLaneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Daymark), typeof(EmergencyWreckMarkingBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(Pile), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy)];
        }

        public class theComponentDeepWaterRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Daymark), typeof(EmergencyWreckMarkingBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(Pile), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(Building), typeof(Crane), typeof(Dolphin), typeof(FishingFacility), typeof(FortifiedStructure), typeof(Landmark), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(SiloTank), typeof(WindTurbine)];
        }

        public class theComponentFairwaySystemRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Daymark), typeof(EmergencyWreckMarkingBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(Pile), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(Building), typeof(Crane), typeof(Dolphin), typeof(FishingFacility), typeof(FortifiedStructure), typeof(Landmark), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(SiloTank), typeof(WindTurbine), typeof(Bridge), typeof(Conveyor), typeof(FloatingDock), typeof(Hulk), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(ShorelineConstruction), typeof(SpanFixed), typeof(SpanOpening), typeof(StructureOverNavigableWater)];
        }

        public class theComponentTrafficSeparationSchemeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Daymark), typeof(EmergencyWreckMarkingBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(Pile), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(Building), typeof(Crane), typeof(Dolphin), typeof(FishingFacility), typeof(FortifiedStructure), typeof(Landmark), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(SiloTank), typeof(WindTurbine), typeof(Bridge), typeof(Conveyor), typeof(FloatingDock), typeof(Hulk), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(ShorelineConstruction), typeof(SpanFixed), typeof(SpanOpening), typeof(StructureOverNavigableWater)];
        }

        public class theComponentTwoWayRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Daymark), typeof(EmergencyWreckMarkingBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(Pile), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(Building), typeof(Crane), typeof(Dolphin), typeof(FishingFacility), typeof(FortifiedStructure), typeof(Landmark), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(SiloTank), typeof(WindTurbine), typeof(Bridge), typeof(Conveyor), typeof(FloatingDock), typeof(Hulk), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(ShorelineConstruction), typeof(SpanFixed), typeof(SpanOpening), typeof(StructureOverNavigableWater)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(AidsToNavigationAssociationViewModel)]();
    }

    public class ASLAggregationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "ASLAggregation";
        public override string[] Roles => ["theCollection", "theComponent"];

        private FeatureBindingViewModel? _theCollection;
        [ExpandableObject]
        public FeatureBindingViewModel? theCollection
        {
            get
            {
                return _theCollection;
            }

            set
            {
                this.SetValue(ref _theCollection, value);
            }
        }

        private FeatureBindingViewModel? _theComponent;
        [ExpandableObject]
        public FeatureBindingViewModel? theComponent
        {
            get
            {
                return _theComponent;
            }

            set
            {
                this.SetValue(ref _theComponent, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCollection = null;
                if (value is not null)
                {
                    theCollection = value?.role switch
                    {
                        "theComponent" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theComponent = null;
                if (value is not null)
                {
                    theComponent = value?.role switch
                    {
                        "theCollection" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => ASLAggregationViewModel._associationConnectorFeatures;

        public class theCollectionArchipelagicSeaLaneAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane)];
        }

        public class theCollectionArchipelagicSeaLaneAxisRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane)];
        }

        public class theComponentArchipelagicSeaLaneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLaneArea), typeof(ArchipelagicSeaLaneAxis)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(ASLAggregationViewModel)]();
    }

    public class BridgeAggregationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "BridgeAggregation";
        public override string[] Roles => ["theCollection", "theComponent"];

        private FeatureBindingViewModel? _theCollection;
        [ExpandableObject]
        public FeatureBindingViewModel? theCollection
        {
            get
            {
                return _theCollection;
            }

            set
            {
                this.SetValue(ref _theCollection, value);
            }
        }

        private FeatureBindingViewModel? _theComponent;
        [ExpandableObject]
        public FeatureBindingViewModel? theComponent
        {
            get
            {
                return _theComponent;
            }

            set
            {
                this.SetValue(ref _theComponent, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCollection = null;
                if (value is not null)
                {
                    theCollection = value?.role switch
                    {
                        "theComponent" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theComponent = null;
                if (value is not null)
                {
                    theComponent = value?.role switch
                    {
                        "theCollection" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => BridgeAggregationViewModel._associationConnectorFeatures;

        public class theCollectionPontoonRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge)];
        }

        public class theCollectionPylonBridgeSupportRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge)];
        }

        public class theCollectionSpanFixedRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge)];
        }

        public class theCollectionSpanOpeningRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge)];
        }

        public class theComponentBridgeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SpanFixed), typeof(SpanOpening), typeof(Pontoon), typeof(PylonBridgeSupport)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(BridgeAggregationViewModel)]();
    }

    public class CautionAreaAssociationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "CautionAreaAssociation";
        public override string[] Roles => ["theCollection", "theComponent"];

        private FeatureBindingViewModel? _theCollection;
        [ExpandableObject]
        public FeatureBindingViewModel? theCollection
        {
            get
            {
                return _theCollection;
            }

            set
            {
                this.SetValue(ref _theCollection, value);
            }
        }

        private FeatureBindingViewModel? _theComponent;
        [ExpandableObject]
        public FeatureBindingViewModel? theComponent
        {
            get
            {
                return _theComponent;
            }

            set
            {
                this.SetValue(ref _theComponent, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCollection = null;
                if (value is not null)
                {
                    theCollection = value?.role switch
                    {
                        "theComponent" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theComponent = null;
                if (value is not null)
                {
                    theComponent = value?.role switch
                    {
                        "theCollection" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => CautionAreaAssociationViewModel._associationConnectorFeatures;

        public class theCollectionArchipelagicSeaLaneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CautionArea)];
        }

        public class theCollectionTrafficSeparationSchemeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CautionArea)];
        }

        public class theComponentCautionAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ArchipelagicSeaLane), typeof(TrafficSeparationScheme)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(CautionAreaAssociationViewModel)]();
    }

    public class DeepWaterRouteAggregationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "DeepWaterRouteAggregation";
        public override string[] Roles => ["theCollection", "theComponent"];

        private FeatureBindingViewModel? _theCollection;
        [ExpandableObject]
        public FeatureBindingViewModel? theCollection
        {
            get
            {
                return _theCollection;
            }

            set
            {
                this.SetValue(ref _theCollection, value);
            }
        }

        private FeatureBindingViewModel? _theComponent;
        [ExpandableObject]
        public FeatureBindingViewModel? theComponent
        {
            get
            {
                return _theComponent;
            }

            set
            {
                this.SetValue(ref _theComponent, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCollection = null;
                if (value is not null)
                {
                    theCollection = value?.role switch
                    {
                        "theComponent" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theComponent = null;
                if (value is not null)
                {
                    theComponent = value?.role switch
                    {
                        "theCollection" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => DeepWaterRouteAggregationViewModel._associationConnectorFeatures;

        public class theCollectionDeepWaterRouteCentrelineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute)];
        }

        public class theCollectionDeepWaterRoutePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute)];
        }

        public class theComponentDeepWaterRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRouteCentreline), typeof(DeepWaterRoutePart)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(DeepWaterRouteAggregationViewModel)]();
    }

    public class FairwayAggregationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "FairwayAggregation";
        public override string[] Roles => ["theCollection", "theComponent"];

        private FeatureBindingViewModel? _theCollection;
        [ExpandableObject]
        public FeatureBindingViewModel? theCollection
        {
            get
            {
                return _theCollection;
            }

            set
            {
                this.SetValue(ref _theCollection, value);
            }
        }

        private FeatureBindingViewModel? _theComponent;
        [ExpandableObject]
        public FeatureBindingViewModel? theComponent
        {
            get
            {
                return _theComponent;
            }

            set
            {
                this.SetValue(ref _theComponent, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCollection = null;
                if (value is not null)
                {
                    theCollection = value?.role switch
                    {
                        "theComponent" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theComponent = null;
                if (value is not null)
                {
                    theComponent = value?.role switch
                    {
                        "theCollection" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => FairwayAggregationViewModel._associationConnectorFeatures;

        public class theCollectionFairwayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FairwaySystem)];
        }

        public class theComponentFairwaySystemRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(FairwayAggregationViewModel)]();
    }

    public class FairwayAuxiliaryViewModel : FeatureAssociationViewModel
    {
        public override string Code => "FairwayAuxiliary";
        public override string[] Roles => ["thePrimaryFeature", "theAuxiliaryFeature"];

        private FeatureBindingViewModel? _thePrimaryFeature;
        [ExpandableObject]
        public FeatureBindingViewModel? thePrimaryFeature
        {
            get
            {
                return _thePrimaryFeature;
            }

            set
            {
                this.SetValue(ref _thePrimaryFeature, value);
            }
        }

        private FeatureBindingViewModel? _theAuxiliaryFeature;
        [ExpandableObject]
        public FeatureBindingViewModel? theAuxiliaryFeature
        {
            get
            {
                return _theAuxiliaryFeature;
            }

            set
            {
                this.SetValue(ref _theAuxiliaryFeature, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                thePrimaryFeature = null;
                if (value is not null)
                {
                    thePrimaryFeature = value?.role switch
                    {
                        "theAuxiliaryFeature" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theAuxiliaryFeature = null;
                if (value is not null)
                {
                    theAuxiliaryFeature = value?.role switch
                    {
                        "thePrimaryFeature" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => FairwayAuxiliaryViewModel._associationConnectorFeatures;

        public class theAuxiliaryFeatureFairwayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(CautionArea), typeof(Daymark), typeof(DredgedArea), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(Landmark), typeof(Pile), typeof(RangeSystem), typeof(RecommendedRouteCentreline), typeof(RecommendedTrack), typeof(RestrictedArea), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(SweptArea)];
        }

        public class thePrimaryFeatureCardinalBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureCardinalBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureCautionAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureDaymarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureDredgedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureIsolatedDangerBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureIsolatedDangerBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureLandmarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureLateralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureLateralBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureLightFloatRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureLightVesselRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeaturePileRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureRangeSystemRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureRecommendedRouteCentrelineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureRecommendedTrackRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureRestrictedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureSafeWaterBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureSafeWaterBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureSpecialPurposeGeneralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureSpecialPurposeGeneralBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public class thePrimaryFeatureSweptAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Fairway)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(FairwayAuxiliaryViewModel)]();
    }

    public class IslandAggregationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "IslandAggregation";
        public override string[] Roles => ["theCollection", "theComponent"];

        private FeatureBindingViewModel? _theCollection;
        [ExpandableObject]
        public FeatureBindingViewModel? theCollection
        {
            get
            {
                return _theCollection;
            }

            set
            {
                this.SetValue(ref _theCollection, value);
            }
        }

        private FeatureBindingViewModel? _theComponent;
        [ExpandableObject]
        public FeatureBindingViewModel? theComponent
        {
            get
            {
                return _theComponent;
            }

            set
            {
                this.SetValue(ref _theComponent, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCollection = null;
                if (value is not null)
                {
                    theCollection = value?.role switch
                    {
                        "theComponent" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theComponent = null;
                if (value is not null)
                {
                    theComponent = value?.role switch
                    {
                        "theCollection" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => IslandAggregationViewModel._associationConnectorFeatures;

        public class theCollectionIslandGroupRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(IslandGroup)];
        }

        public class theCollectionLandAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(IslandGroup)];
        }

        public class theComponentIslandGroupRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(LandArea), typeof(IslandGroup)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(IslandAggregationViewModel)]();
    }

    public class MooringTrotAggregationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "MooringTrotAggregation";
        public override string[] Roles => ["theCollection", "theComponent"];

        private FeatureBindingViewModel? _theCollection;
        [ExpandableObject]
        public FeatureBindingViewModel? theCollection
        {
            get
            {
                return _theCollection;
            }

            set
            {
                this.SetValue(ref _theCollection, value);
            }
        }

        private FeatureBindingViewModel? _theComponent;
        [ExpandableObject]
        public FeatureBindingViewModel? theComponent
        {
            get
            {
                return _theComponent;
            }

            set
            {
                this.SetValue(ref _theComponent, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCollection = null;
                if (value is not null)
                {
                    theCollection = value?.role switch
                    {
                        "theComponent" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theComponent = null;
                if (value is not null)
                {
                    theComponent = value?.role switch
                    {
                        "theCollection" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => MooringTrotAggregationViewModel._associationConnectorFeatures;

        public class theCollectionBerthRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(MooringTrot)];
        }

        public class theCollectionCableSubmarineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(MooringTrot)];
        }

        public class theCollectionMooringBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(MooringTrot)];
        }

        public class theCollectionObstructionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(MooringTrot)];
        }

        public class theComponentMooringTrotRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Berth), typeof(CableSubmarine), typeof(MooringBuoy), typeof(Obstruction)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(MooringTrotAggregationViewModel)]();
    }

    public class PilotageDistrictAssociationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "PilotageDistrictAssociation";
        public override string[] Roles => ["theCollection", "theComponent"];

        private FeatureBindingViewModel? _theCollection;
        [ExpandableObject]
        public FeatureBindingViewModel? theCollection
        {
            get
            {
                return _theCollection;
            }

            set
            {
                this.SetValue(ref _theCollection, value);
            }
        }

        private FeatureBindingViewModel? _theComponent;
        [ExpandableObject]
        public FeatureBindingViewModel? theComponent
        {
            get
            {
                return _theComponent;
            }

            set
            {
                this.SetValue(ref _theComponent, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCollection = null;
                if (value is not null)
                {
                    theCollection = value?.role switch
                    {
                        "theComponent" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theComponent = null;
                if (value is not null)
                {
                    theComponent = value?.role switch
                    {
                        "theCollection" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => PilotageDistrictAssociationViewModel._associationConnectorFeatures;

        public class theCollectionPilotBoardingPlaceRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(PilotageDistrict)];
        }

        public class theComponentPilotageDistrictRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(PilotBoardingPlace)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(PilotageDistrictAssociationViewModel)]();
    }

    public class RangeSystemAggregationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "RangeSystemAggregation";
        public override string[] Roles => ["theCollection", "theComponent"];

        private FeatureBindingViewModel? _theCollection;
        [ExpandableObject]
        public FeatureBindingViewModel? theCollection
        {
            get
            {
                return _theCollection;
            }

            set
            {
                this.SetValue(ref _theCollection, value);
            }
        }

        private FeatureBindingViewModel? _theComponent;
        [ExpandableObject]
        public FeatureBindingViewModel? theComponent
        {
            get
            {
                return _theComponent;
            }

            set
            {
                this.SetValue(ref _theComponent, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCollection = null;
                if (value is not null)
                {
                    theCollection = value?.role switch
                    {
                        "theComponent" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theComponent = null;
                if (value is not null)
                {
                    theComponent = value?.role switch
                    {
                        "theCollection" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => RangeSystemAggregationViewModel._associationConnectorFeatures;

        public class theCollectionBuildingRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionCardinalBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionDaymarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionDolphinRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionFortifiedStructureRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionIsolatedDangerBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionLandmarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionLateralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionLightAllAroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionLightSectoredRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionNavigationLineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionPileRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionRadarTransponderBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionRangeSystemRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionRecommendedRouteCentrelineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionRecommendedTrackRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionSafeWaterBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionSiloTankRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theCollectionSpecialPurposeGeneralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RangeSystem)];
        }

        public class theComponentRangeSystemRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CardinalBeacon), typeof(Building), typeof(Daymark), typeof(Dolphin), typeof(FortifiedStructure), typeof(IsolatedDangerBeacon), typeof(Landmark), typeof(LateralBeacon), typeof(LightAllAround), typeof(LightSectored), typeof(NavigationLine), typeof(Pile), typeof(RadarTransponderBeacon), typeof(RangeSystem), typeof(RecommendedRouteCentreline), typeof(RecommendedTrack), typeof(SafeWaterBeacon), typeof(SiloTank), typeof(SpecialPurposeGeneralBeacon)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(RangeSystemAggregationViewModel)]();
    }

    public class RoofedStructureAggregationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "RoofedStructureAggregation";
        public override string[] Roles => ["theRoofedStructure", "theSupport"];

        private FeatureBindingViewModel? _theRoofedStructure;
        [ExpandableObject]
        public FeatureBindingViewModel? theRoofedStructure
        {
            get
            {
                return _theRoofedStructure;
            }

            set
            {
                this.SetValue(ref _theRoofedStructure, value);
            }
        }

        private FeatureBindingViewModel? _theSupport;
        [ExpandableObject]
        public FeatureBindingViewModel? theSupport
        {
            get
            {
                return _theSupport;
            }

            set
            {
                this.SetValue(ref _theSupport, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theRoofedStructure = null;
                if (value is not null)
                {
                    theRoofedStructure = value?.role switch
                    {
                        "theSupport" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theSupport = null;
                if (value is not null)
                {
                    theSupport = value?.role switch
                    {
                        "theRoofedStructure" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => RoofedStructureAggregationViewModel._associationConnectorFeatures;

        public class theRoofedStructurePylonBridgeSupportRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(StructureOverNavigableWater)];
        }

        public class theSupportStructureOverNavigableWaterRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(PylonBridgeSupport)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(RoofedStructureAggregationViewModel)]();
    }

    public class StructureEquipmentViewModel : FeatureAssociationViewModel
    {
        public override string Code => "StructureEquipment";
        public override string[] Roles => ["theStructure", "theEquipment"];

        private FeatureBindingViewModel? _theStructure;
        [ExpandableObject]
        public FeatureBindingViewModel? theStructure
        {
            get
            {
                return _theStructure;
            }

            set
            {
                this.SetValue(ref _theStructure, value);
            }
        }

        private FeatureBindingViewModel? _theEquipment;
        [ExpandableObject]
        public FeatureBindingViewModel? theEquipment
        {
            get
            {
                return _theEquipment;
            }

            set
            {
                this.SetValue(ref _theEquipment, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theStructure = null;
                if (value is not null)
                {
                    theStructure = value?.role switch
                    {
                        "theEquipment" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theEquipment = null;
                if (value is not null)
                {
                    theEquipment = value?.role switch
                    {
                        "theStructure" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => StructureEquipmentViewModel._associationConnectorFeatures;

        public class theEquipmentBridgeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)];
        }

        public class theEquipmentBuildingRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(Helipad), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)];
        }

        public class theEquipmentCableOverheadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(RadarReflector)];
        }

        public class theEquipmentCardinalBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)];
        }

        public class theEquipmentCardinalBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)];
        }

        public class theEquipmentConveyorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)];
        }

        public class theEquipmentCraneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)];
        }

        public class theEquipmentDaymarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(LightSectored), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)];
        }

        public class theEquipmentDolphinRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard)];
        }

        public class theEquipmentEmergencyWreckMarkingBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)];
        }

        public class theEquipmentFishingFacilityRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)];
        }

        public class theEquipmentFloatingDockRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)];
        }

        public class theEquipmentFortifiedStructureRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard)];
        }

        public class theEquipmentHulkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(Bollard)];
        }

        public class theEquipmentInstallationBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)];
        }

        public class theEquipmentIsolatedDangerBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)];
        }

        public class theEquipmentIsolatedDangerBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)];
        }

        public class theEquipmentLandmarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(Helipad), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard), typeof(LightAirObstruction)];
        }

        public class theEquipmentLateralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)];
        }

        public class theEquipmentLateralBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)];
        }

        public class theEquipmentLightAllAroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FogSignal), typeof(LightAirObstruction), typeof(LightAllAround), typeof(LightFogDetector), typeof(LightSectored), typeof(RadarTransponderBeacon), typeof(Retroreflector)];
        }

        public class theEquipmentLightFloatRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)];
        }

        public class theEquipmentLightSectoredRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(FogSignal), typeof(LightAirObstruction), typeof(LightAllAround), typeof(LightFogDetector), typeof(LightSectored), typeof(RadarTransponderBeacon), typeof(Retroreflector)];
        }

        public class theEquipmentLightVesselRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)];
        }

        public class theEquipmentMooringBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)];
        }

        public class theEquipmentOffshorePlatformRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(Helipad), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard), typeof(LightAirObstruction)];
        }

        public class theEquipmentPileRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard)];
        }

        public class theEquipmentPipelineOverheadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(RadarReflector)];
        }

        public class theEquipmentPontoonRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)];
        }

        public class theEquipmentPylonBridgeSupportRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard), typeof(LightAirObstruction)];
        }

        public class theEquipmentSafeWaterBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)];
        }

        public class theEquipmentSafeWaterBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)];
        }

        public class theEquipmentShorelineConstructionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(Bollard)];
        }

        public class theEquipmentSiloTankRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)];
        }

        public class theEquipmentSpanFixedRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)];
        }

        public class theEquipmentSpanOpeningRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)];
        }

        public class theEquipmentSpecialPurposeGeneralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)];
        }

        public class theEquipmentSpecialPurposeGeneralBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning)];
        }

        public class theEquipmentStructureOverNavigableWaterRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)];
        }

        public class theEquipmentWindTurbineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored), typeof(LightAirObstruction)];
        }

        public class theEquipmentWreckRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Daymark), typeof(DistanceMark), typeof(FogSignal), typeof(LightAllAround), typeof(LightFogDetector), typeof(PhysicalAISAidToNavigation), typeof(RadarTransponderBeacon), typeof(Retroreflector), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(LightSectored)];
        }

        public class theStructureBollardRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Dolphin), typeof(FortifiedStructure), typeof(Hulk), typeof(Landmark), typeof(OffshorePlatform), typeof(Pile), typeof(PylonBridgeSupport), typeof(ShorelineConstruction)];
        }

        public class theStructureDaymarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck)];
        }

        public class theStructureDistanceMarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(Daymark)];
        }

        public class theStructureFogSignalRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(LightAllAround), typeof(LightSectored), typeof(Daymark)];
        }

        public class theStructureHelipadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Building), typeof(Landmark), typeof(OffshorePlatform)];
        }

        public class theStructureLightAirObstructionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge), typeof(Building), typeof(Crane), typeof(Conveyor), typeof(Landmark), typeof(OffshorePlatform), typeof(PylonBridgeSupport), typeof(SpanFixed), typeof(SpanOpening), typeof(WindTurbine), typeof(LightAllAround), typeof(LightSectored)];
        }

        public class theStructureLightAllAroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(LightAllAround), typeof(LightSectored), typeof(Daymark)];
        }

        public class theStructureLightFogDetectorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(LightAllAround), typeof(LightSectored), typeof(Daymark)];
        }

        public class theStructureLightSectoredRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(Conveyor), typeof(Dolphin), typeof(FishingFacility), typeof(FortifiedStructure), typeof(IsolatedDangerBeacon), typeof(Landmark), typeof(LateralBeacon), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(LightAllAround), typeof(LightSectored), typeof(Daymark)];
        }

        public class theStructurePhysicalAISAidToNavigationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(Daymark)];
        }

        public class theStructureRadarReflectorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(CableOverhead), typeof(PipelineOverhead)];
        }

        public class theStructureRadarTransponderBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(LightAllAround), typeof(LightSectored), typeof(Daymark)];
        }

        public class theStructureRetroreflectorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(LightAllAround), typeof(LightSectored), typeof(Daymark)];
        }

        public class theStructureSignalStationTrafficRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(Daymark)];
        }

        public class theStructureSignalStationWarningRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(Bridge), typeof(Building), typeof(Crane), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(Conveyor), typeof(Dolphin), typeof(EmergencyWreckMarkingBuoy), typeof(FishingFacility), typeof(FloatingDock), typeof(FortifiedStructure), typeof(Hulk), typeof(InstallationBuoy), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightFloat), typeof(LightVessel), typeof(MooringBuoy), typeof(OffshorePlatform), typeof(Pile), typeof(PipelineOverhead), typeof(Pontoon), typeof(PylonBridgeSupport), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(ShorelineConstruction), typeof(SiloTank), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(StructureOverNavigableWater), typeof(WindTurbine), typeof(Wreck), typeof(Daymark)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(StructureEquipmentViewModel)]();
    }

    public class TextAssociationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "TextAssociation";
        public override string[] Roles => ["theCartographicText", "thePositionProvider"];

        private FeatureBindingViewModel? _theCartographicText;
        [ExpandableObject]
        public FeatureBindingViewModel? theCartographicText
        {
            get
            {
                return _theCartographicText;
            }

            set
            {
                this.SetValue(ref _theCartographicText, value);
            }
        }

        private FeatureBindingViewModel? _thePositionProvider;
        [ExpandableObject]
        public FeatureBindingViewModel? thePositionProvider
        {
            get
            {
                return _thePositionProvider;
            }

            set
            {
                this.SetValue(ref _thePositionProvider, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCartographicText = null;
                if (value is not null)
                {
                    theCartographicText = value?.role switch
                    {
                        "thePositionProvider" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                thePositionProvider = null;
                if (value is not null)
                {
                    thePositionProvider = value?.role switch
                    {
                        "theCartographicText" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => TextAssociationViewModel._associationConnectorFeatures;

        public class theCartographicTextAdministrationAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextAirportAirfieldRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextAnchorageAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextAnchorBerthRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextArchipelagicSeaLaneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextArchipelagicSeaLaneAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextArchipelagicSeaLaneAxisRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextBerthRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextBollardRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextBridgeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextBuildingRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextBuiltUpAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCableAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCableOverheadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCableSubmarineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCanalRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCardinalBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCardinalBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCargoTranshipmentAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCausewayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextChart1FeatureRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCheckpointRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCoastGuardStationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCoastlineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCollisionRegulationsLimitRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextContinentalShelfAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextConveyorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCraneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextCurrentNonGravitationalRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextDamRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextDaymarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextDeepWaterRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextDeepWaterRouteCentrelineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextDeepWaterRoutePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextDistanceMarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextDockAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextDolphinRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextDredgedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextDryDockRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextDumpingGroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextDykeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextEmergencyWreckMarkingBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextFairwayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextFairwaySystemRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextFenceWallRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextFerryRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextFisheryZoneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextFishingFacilityRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextFishingGroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextFloatingDockRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextFogSignalRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextFortifiedStructureRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextFoulGroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextFreePortAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextGateRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextGridironRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextHarbourAreaAdministrativeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextHarbourFacilityRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextHelipadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextHulkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextIceAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextInformationAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextInstallationBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextIslandGroupRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextIsolatedDangerBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextIsolatedDangerBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLakeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLandAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLandElevationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLandmarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLandRegionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLateralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLateralBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLightAirObstructionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLightAllAroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLightFloatRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLightFogDetectorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLightSectoredRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLightVesselRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLocalMagneticAnomalyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLockBasinRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextLogPondRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextMarineFarmCultureRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextMarinePollutionRegulationsAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextMilitaryPracticeAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextMooringAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextMooringBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextMooringTrotRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextObstructionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextOffshorePlatformRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextOffshoreProductionAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextOilBarrierRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextPhysicalAISAidToNavigationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextPileRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextPilotageDistrictRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextPilotBoardingPlaceRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextPipelineOverheadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextPipelineSubmarineOnLandRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextPontoonRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextPrecautionaryAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextProductionStorageAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextPylonBridgeSupportRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRadarLineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRadarRangeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRadarStationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRadarTransponderBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRadioCallingInPointRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRadioStationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRailwayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRangeSystemRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRapidsRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRecommendedRouteCentrelineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRecommendedTrackRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRescueStationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRestrictedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRiverRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRoadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextRunwayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSafeWaterBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSafeWaterBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSeaAreaNamedWaterAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSeabedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSeagrassRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSeaplaneLandingAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextShorelineConstructionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSignalStationTrafficRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSignalStationWarningRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSiloTankRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSlopeToplineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSlopingGroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSmallCraftFacilityRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSoundingRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSpanFixedRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSpanOpeningRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSpecialPurposeGeneralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSpecialPurposeGeneralBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSpringRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextStructureOverNavigableWaterRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSubmarinePipelineAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSubmarineTransitLaneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextSweptAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextTidalStreamFloodEbbRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextTidalStreamPanelDataRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextTidewayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextTrafficSeparationSchemeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextTunnelRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextTwoWayRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextUnderwaterAwashRockRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextVegetationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextVesselTrafficServiceAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextVirtualAISAidToNavigationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextWaterfallRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextWaterTurbulenceRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextWeedKelpRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextWindTurbineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class theCartographicTextWreckRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TextPlacement)];
        }

        public class thePositionProviderTextPlacementRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(AdministrationArea), typeof(AirportAirfield), typeof(AnchorBerth), typeof(AnchorageArea), typeof(ArchipelagicSeaLane), typeof(ArchipelagicSeaLaneArea), typeof(ArchipelagicSeaLaneAxis), typeof(Berth), typeof(Bollard), typeof(Bridge), typeof(Building), typeof(BuiltUpArea), typeof(CableArea), typeof(CableOverhead), typeof(CableSubmarine), typeof(Canal), typeof(CardinalBuoy), typeof(CardinalBeacon), typeof(CargoTranshipmentArea), typeof(Causeway), typeof(Chart1Feature), typeof(Checkpoint), typeof(CoastGuardStation), typeof(Coastline), typeof(CollisionRegulationsLimit), typeof(ContinentalShelfArea), typeof(Conveyor), typeof(Crane), typeof(CurrentNonGravitational), typeof(Dam), typeof(Daymark), typeof(DeepWaterRoute), typeof(DeepWaterRouteCentreline), typeof(DeepWaterRoutePart), typeof(DistanceMark), typeof(DockArea), typeof(Dolphin), typeof(DredgedArea), typeof(DryDock), typeof(DumpingGround), typeof(Dyke), typeof(EmergencyWreckMarkingBuoy), typeof(Fairway), typeof(FairwaySystem), typeof(FenceWall), typeof(FerryRoute), typeof(FisheryZone), typeof(FishingFacility), typeof(FishingGround), typeof(FloatingDock), typeof(FogSignal), typeof(FortifiedStructure), typeof(FoulGround), typeof(FreePortArea), typeof(Gate), typeof(Gridiron), typeof(HarbourAreaAdministrative), typeof(HarbourFacility), typeof(Helipad), typeof(Hulk), typeof(IceArea), typeof(InformationArea), typeof(InstallationBuoy), typeof(IslandGroup), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Lake), typeof(LandArea), typeof(LandElevation), typeof(LandRegion), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightAirObstruction), typeof(LightAllAround), typeof(LightFloat), typeof(LightFogDetector), typeof(LightSectored), typeof(LightVessel), typeof(LocalMagneticAnomaly), typeof(LockBasin), typeof(LogPond), typeof(MarineFarmCulture), typeof(MarinePollutionRegulationsArea), typeof(MilitaryPracticeArea), typeof(MooringArea), typeof(MooringBuoy), typeof(MooringTrot), typeof(Obstruction), typeof(OffshorePlatform), typeof(OffshoreProductionArea), typeof(OilBarrier), typeof(PhysicalAISAidToNavigation), typeof(Pile), typeof(PilotBoardingPlace), typeof(PilotageDistrict), typeof(PipelineOverhead), typeof(PipelineSubmarineOnLand), typeof(Pontoon), typeof(PrecautionaryArea), typeof(ProductionStorageArea), typeof(PylonBridgeSupport), typeof(RadarLine), typeof(RadarRange), typeof(RadarStation), typeof(RadarTransponderBeacon), typeof(RadioCallingInPoint), typeof(RadioStation), typeof(Railway), typeof(RangeSystem), typeof(Rapids), typeof(RecommendedRouteCentreline), typeof(RecommendedTrack), typeof(RescueStation), typeof(RestrictedArea), typeof(River), typeof(Road), typeof(Runway), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(SeaAreaNamedWaterArea), typeof(SeabedArea), typeof(Seagrass), typeof(SeaplaneLandingArea), typeof(ShorelineConstruction), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(SiloTank), typeof(SlopeTopline), typeof(SlopingGround), typeof(SmallCraftFacility), typeof(Sounding), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(Spring), typeof(StructureOverNavigableWater), typeof(SubmarinePipelineArea), typeof(SubmarineTransitLane), typeof(SweptArea), typeof(TidalStreamFloodEbb), typeof(TidalStreamPanelData), typeof(Tideway), typeof(TrafficSeparationScheme), typeof(Tunnel), typeof(TwoWayRoute), typeof(UnderwaterAwashRock), typeof(Vegetation), typeof(VesselTrafficServiceArea), typeof(VirtualAISAidToNavigation), typeof(WaterTurbulence), typeof(Waterfall), typeof(WeedKelp), typeof(WindTurbine), typeof(Wreck)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(TextAssociationViewModel)]();
    }

    public class TrafficSeparationSchemeAggregationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "TrafficSeparationSchemeAggregation";
        public override string[] Roles => ["theCollection", "theComponent"];

        private FeatureBindingViewModel? _theCollection;
        [ExpandableObject]
        public FeatureBindingViewModel? theCollection
        {
            get
            {
                return _theCollection;
            }

            set
            {
                this.SetValue(ref _theCollection, value);
            }
        }

        private FeatureBindingViewModel? _theComponent;
        [ExpandableObject]
        public FeatureBindingViewModel? theComponent
        {
            get
            {
                return _theComponent;
            }

            set
            {
                this.SetValue(ref _theComponent, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCollection = null;
                if (value is not null)
                {
                    theCollection = value?.role switch
                    {
                        "theComponent" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theComponent = null;
                if (value is not null)
                {
                    theComponent = value?.role switch
                    {
                        "theCollection" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => TrafficSeparationSchemeAggregationViewModel._associationConnectorFeatures;

        public class theCollectionDeepWaterRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theCollectionDeepWaterRouteCentrelineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theCollectionDeepWaterRoutePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theCollectionInshoreTrafficZoneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theCollectionPrecautionaryAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theCollectionRestrictedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theCollectionSeparationZoneOrLineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theCollectionTrafficSeparationSchemeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theCollectionTrafficSeparationSchemeBoundaryRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theCollectionTrafficSeparationSchemeCrossingRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theCollectionTrafficSeparationSchemeLanePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theCollectionTrafficSeparationSchemeRoundaboutRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theCollectionTwoWayRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theCollectionTwoWayRoutePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TrafficSeparationScheme)];
        }

        public class theComponentTrafficSeparationSchemeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(DeepWaterRoute), typeof(DeepWaterRouteCentreline), typeof(DeepWaterRoutePart), typeof(InshoreTrafficZone), typeof(PrecautionaryArea), typeof(RestrictedArea), typeof(SeparationZoneOrLine), typeof(TrafficSeparationScheme), typeof(TrafficSeparationSchemeBoundary), typeof(TrafficSeparationSchemeCrossing), typeof(TrafficSeparationSchemeLanePart), typeof(TrafficSeparationSchemeRoundabout), typeof(TwoWayRoute), typeof(TwoWayRoutePart)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(TrafficSeparationSchemeAggregationViewModel)]();
    }

    public class TwoWayRouteAggregationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "TwoWayRouteAggregation";
        public override string[] Roles => ["theCollection", "theComponent"];

        private FeatureBindingViewModel? _theCollection;
        [ExpandableObject]
        public FeatureBindingViewModel? theCollection
        {
            get
            {
                return _theCollection;
            }

            set
            {
                this.SetValue(ref _theCollection, value);
            }
        }

        private FeatureBindingViewModel? _theComponent;
        [ExpandableObject]
        public FeatureBindingViewModel? theComponent
        {
            get
            {
                return _theComponent;
            }

            set
            {
                this.SetValue(ref _theComponent, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCollection = null;
                if (value is not null)
                {
                    theCollection = value?.role switch
                    {
                        "theComponent" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theComponent = null;
                if (value is not null)
                {
                    theComponent = value?.role switch
                    {
                        "theCollection" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => TwoWayRouteAggregationViewModel._associationConnectorFeatures;

        public class theCollectionTwoWayRoutePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TwoWayRoute)];
        }

        public class theComponentTwoWayRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(TwoWayRoutePart)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(TwoWayRouteAggregationViewModel)]();
    }

    public class UpdateAggregationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "UpdateAggregation";
        public override string[] Roles => ["theCollection", "theComponent"];

        private FeatureBindingViewModel? _theCollection;
        [ExpandableObject]
        public FeatureBindingViewModel? theCollection
        {
            get
            {
                return _theCollection;
            }

            set
            {
                this.SetValue(ref _theCollection, value);
            }
        }

        private FeatureBindingViewModel? _theComponent;
        [ExpandableObject]
        public FeatureBindingViewModel? theComponent
        {
            get
            {
                return _theComponent;
            }

            set
            {
                this.SetValue(ref _theComponent, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theCollection = null;
                if (value is not null)
                {
                    theCollection = value?.role switch
                    {
                        "theComponent" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theComponent = null;
                if (value is not null)
                {
                    theComponent = value?.role switch
                    {
                        "theCollection" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => UpdateAggregationViewModel._associationConnectorFeatures;

        public class theCollectionUpdateInformationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theComponentUpdateInformationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(UpdateAggregationViewModel)]();
    }

    public class UpdatedInformationViewModel : FeatureAssociationViewModel
    {
        public override string Code => "UpdatedInformation";
        public override string[] Roles => ["theUpdate", "theUpdatedObject"];

        private FeatureBindingViewModel? _theUpdate;
        [ExpandableObject]
        public FeatureBindingViewModel? theUpdate
        {
            get
            {
                return _theUpdate;
            }

            set
            {
                this.SetValue(ref _theUpdate, value);
            }
        }

        private FeatureBindingViewModel? _theUpdatedObject;
        [ExpandableObject]
        public FeatureBindingViewModel? theUpdatedObject
        {
            get
            {
                return _theUpdatedObject;
            }

            set
            {
                this.SetValue(ref _theUpdatedObject, value);
            }
        }

        public override FeatureAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theUpdate = null;
                if (value is not null)
                {
                    theUpdate = value?.role switch
                    {
                        "theUpdatedObject" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }

                theUpdatedObject = null;
                if (value is not null)
                {
                    theUpdatedObject = value?.role switch
                    {
                        "theUpdate" => value.CreateForeignFeatureBinding(),
                        _ => value.CreateLocalFeatureBinding(),
                    };
                }
            }
        }

        public override FeatureAssociationConnector[] associationConnectorFeatures => UpdatedInformationViewModel._associationConnectorFeatures;

        public class theUpdateAdministrationAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateAirportAirfieldRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateAnchorageAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateAnchorBerthRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateArchipelagicSeaLaneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateArchipelagicSeaLaneAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateArchipelagicSeaLaneAxisRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateBerthRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateBollardRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateBridgeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateBuildingRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateBuiltUpAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCableAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCableOverheadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCableSubmarineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCanalRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCardinalBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCardinalBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCargoTranshipmentAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCausewayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCautionAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCheckpointRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCoastGuardStationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCoastlineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCollisionRegulationsLimitRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateContiguousZoneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateContinentalShelfAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateConveyorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCraneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCurrentNonGravitationalRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateCustomZoneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDamRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDaymarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDeepWaterRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDeepWaterRouteCentrelineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDeepWaterRoutePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDepthAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDepthContourRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDepthNoBottomFoundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDiscolouredWaterRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDistanceMarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDockAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDolphinRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDredgedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDryDockRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDumpingGroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateDykeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateEmergencyWreckMarkingBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateExclusiveEconomicZoneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateFairwayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateFairwaySystemRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateFenceWallRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateFerryRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateFisheryZoneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateFishingFacilityRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateFishingGroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateFloatingDockRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateFogSignalRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateFortifiedStructureRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateFoulGroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateFreePortAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateGateRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateGridironRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateHarbourAreaAdministrativeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateHarbourFacilityRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateHelipadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateHulkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateIceAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateInformationAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateInshoreTrafficZoneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateInstallationBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateIslandGroupRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateIsolatedDangerBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateIsolatedDangerBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLakeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLandAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLandElevationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLandmarkRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLandRegionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLateralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLateralBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLightAirObstructionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLightAllAroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLightFloatRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLightFogDetectorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLightSectoredRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLightVesselRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLocalDirectionOfBuoyageRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLocalMagneticAnomalyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLockBasinRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateLogPondRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateMagneticVariationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateMarineFarmCultureRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateMarinePollutionRegulationsAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateMilitaryPracticeAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateMooringAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateMooringBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateMooringTrotRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateNavigationalSystemOfMarksRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateNavigationLineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateObstructionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateOffshorePlatformRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateOffshoreProductionAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateOilBarrierRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdatePhysicalAISAidToNavigationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdatePileRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdatePilotageDistrictRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdatePilotBoardingPlaceRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdatePipelineOverheadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdatePipelineSubmarineOnLandRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdatePontoonRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdatePrecautionaryAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateProductionStorageAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdatePylonBridgeSupportRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateQualityOfBathymetricDataRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateQualityOfNonBathymetricDataRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateQualityOfSurveyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRadarLineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRadarRangeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRadarReflectorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRadarStationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRadarTransponderBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRadioCallingInPointRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRadioStationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRailwayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRangeSystemRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRapidsRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRecommendedRouteCentrelineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRecommendedTrackRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRecommendedTrafficLanePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRescueStationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRestrictedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRetroreflectorRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRiverRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRoadRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateRunwayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSafeWaterBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSafeWaterBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSandwaveRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSeaAreaNamedWaterAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSeabedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSeagrassRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSeaplaneLandingAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSeparationZoneOrLineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateShorelineConstructionRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSignalStationTrafficRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSignalStationWarningRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSiloTankRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSlopeToplineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSlopingGroundRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSmallCraftFacilityRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSoundingRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSoundingDatumRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSpanFixedRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSpanOpeningRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSpecialPurposeGeneralBeaconRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSpecialPurposeGeneralBuoyRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSpringRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateStraightTerritorialSeaBaselineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateStructureOverNavigableWaterRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSubmarinePipelineAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSubmarineTransitLaneRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateSweptAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateTerritorialSeaAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateTidalStreamFloodEbbRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateTidalStreamPanelDataRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateTidewayRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateTrafficSeparationSchemeRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateTrafficSeparationSchemeBoundaryRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateTrafficSeparationSchemeCrossingRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateTrafficSeparationSchemeLanePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateTrafficSeparationSchemeRoundaboutRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateTunnelRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateTwoWayRouteRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateTwoWayRoutePartRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateUnderwaterAwashRockRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateUnsurveyedAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateUpdateInformationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateVegetationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateVerticalDatumOfDataRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateVesselTrafficServiceAreaRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateVirtualAISAidToNavigationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateWaterfallRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateWaterTurbulenceRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateWeedKelpRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateWindTurbineRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdateWreckRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(UpdateInformation)];
        }

        public class theUpdatedObjectUpdateInformationRefIdViewModel : FeatureRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(AdministrationArea), typeof(AirportAirfield), typeof(AnchorBerth), typeof(AnchorageArea), typeof(ArchipelagicSeaLane), typeof(ArchipelagicSeaLaneArea), typeof(ArchipelagicSeaLaneAxis), typeof(Berth), typeof(Bollard), typeof(Bridge), typeof(Building), typeof(BuiltUpArea), typeof(CableArea), typeof(CableOverhead), typeof(CableSubmarine), typeof(Canal), typeof(CardinalBeacon), typeof(CardinalBuoy), typeof(CargoTranshipmentArea), typeof(Causeway), typeof(CautionArea), typeof(Checkpoint), typeof(CoastGuardStation), typeof(Coastline), typeof(CollisionRegulationsLimit), typeof(ContiguousZone), typeof(ContinentalShelfArea), typeof(Conveyor), typeof(Crane), typeof(CurrentNonGravitational), typeof(CustomZone), typeof(Dam), typeof(Daymark), typeof(DeepWaterRoute), typeof(DeepWaterRouteCentreline), typeof(DeepWaterRoutePart), typeof(DepthArea), typeof(DepthContour), typeof(DepthNoBottomFound), typeof(DiscolouredWater), typeof(DistanceMark), typeof(DockArea), typeof(Dolphin), typeof(DredgedArea), typeof(DryDock), typeof(DumpingGround), typeof(Dyke), typeof(EmergencyWreckMarkingBuoy), typeof(ExclusiveEconomicZone), typeof(Fairway), typeof(FairwaySystem), typeof(FenceWall), typeof(FerryRoute), typeof(FisheryZone), typeof(FishingFacility), typeof(FishingGround), typeof(FloatingDock), typeof(FogSignal), typeof(FortifiedStructure), typeof(FoulGround), typeof(FreePortArea), typeof(Gate), typeof(Gridiron), typeof(HarbourAreaAdministrative), typeof(HarbourFacility), typeof(Helipad), typeof(Hulk), typeof(IceArea), typeof(InformationArea), typeof(InshoreTrafficZone), typeof(InstallationBuoy), typeof(IslandGroup), typeof(IsolatedDangerBeacon), typeof(IsolatedDangerBuoy), typeof(Lake), typeof(LandArea), typeof(LandElevation), typeof(LandRegion), typeof(Landmark), typeof(LateralBeacon), typeof(LateralBuoy), typeof(LightAirObstruction), typeof(LightAllAround), typeof(LightFloat), typeof(LightFogDetector), typeof(LightSectored), typeof(LightVessel), typeof(LocalDirectionOfBuoyage), typeof(LocalMagneticAnomaly), typeof(LockBasin), typeof(LogPond), typeof(MagneticVariation), typeof(MarineFarmCulture), typeof(MarinePollutionRegulationsArea), typeof(MilitaryPracticeArea), typeof(MooringArea), typeof(MooringBuoy), typeof(MooringTrot), typeof(NavigationLine), typeof(NavigationalSystemOfMarks), typeof(Obstruction), typeof(OffshorePlatform), typeof(OffshoreProductionArea), typeof(OilBarrier), typeof(PhysicalAISAidToNavigation), typeof(Pile), typeof(PilotBoardingPlace), typeof(PilotageDistrict), typeof(PipelineOverhead), typeof(PipelineSubmarineOnLand), typeof(Pontoon), typeof(PrecautionaryArea), typeof(ProductionStorageArea), typeof(PylonBridgeSupport), typeof(QualityOfBathymetricData), typeof(QualityOfNonBathymetricData), typeof(QualityOfSurvey), typeof(RadarLine), typeof(RadarRange), typeof(RadarReflector), typeof(RadarStation), typeof(RadarTransponderBeacon), typeof(RadioCallingInPoint), typeof(RadioStation), typeof(Railway), typeof(RangeSystem), typeof(Rapids), typeof(RecommendedRouteCentreline), typeof(RecommendedTrack), typeof(RecommendedTrafficLanePart), typeof(RescueStation), typeof(RestrictedArea), typeof(Retroreflector), typeof(River), typeof(Road), typeof(Runway), typeof(SafeWaterBeacon), typeof(SafeWaterBuoy), typeof(Sandwave), typeof(SeaAreaNamedWaterArea), typeof(SeabedArea), typeof(Seagrass), typeof(SeaplaneLandingArea), typeof(SeparationZoneOrLine), typeof(ShorelineConstruction), typeof(SignalStationTraffic), typeof(SignalStationWarning), typeof(SiloTank), typeof(SmallCraftFacility), typeof(SlopeTopline), typeof(SlopingGround), typeof(Sounding), typeof(SoundingDatum), typeof(SpanFixed), typeof(SpanOpening), typeof(SpecialPurposeGeneralBeacon), typeof(SpecialPurposeGeneralBuoy), typeof(Spring), typeof(StraightTerritorialSeaBaseline), typeof(StructureOverNavigableWater), typeof(SubmarinePipelineArea), typeof(SubmarineTransitLane), typeof(SweptArea), typeof(TerritorialSeaArea), typeof(TidalStreamPanelData), typeof(TidalStreamFloodEbb), typeof(Tideway), typeof(TrafficSeparationScheme), typeof(TrafficSeparationSchemeBoundary), typeof(TrafficSeparationSchemeCrossing), typeof(TrafficSeparationSchemeLanePart), typeof(TrafficSeparationSchemeRoundabout), typeof(Tunnel), typeof(TwoWayRoute), typeof(TwoWayRoutePart), typeof(UnderwaterAwashRock), typeof(UnsurveyedArea), typeof(UpdateInformation), typeof(Vegetation), typeof(VerticalDatumOfData), typeof(VesselTrafficServiceArea), typeof(VirtualAISAidToNavigation), typeof(WaterTurbulence), typeof(Waterfall), typeof(WeedKelp), typeof(WindTurbine), typeof(Wreck)];
        }

        public static FeatureAssociationConnector[] _associationConnectorFeatures => Handles.AssociationConnectorFeatures[typeof(UpdatedInformationViewModel)]();
    }

    public class AdditionalInformationViewModel : InformationAssociationViewModel
    {
        public override string Code => "AdditionalInformation";
        public override string[] Roles => ["theInformation"];

        private InformationBindingViewModel? _theInformation;
        [ExpandableObject]
        public InformationBindingViewModel? theInformation
        {
            get
            {
                return _theInformation;
            }

            set
            {
                this.SetValue(ref _theInformation, value);
            }
        }

        public override InformationAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theInformation = null;
                if (value is not null)
                {
                    theInformation = value.CreateLocalInformationBinding();
                }
            }
        }

        public override InformationAssociationConnector[] associationConnectorInformations => AdditionalInformationViewModel._associationConnectorInformations;

        public class theInformationAdministrationAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationAirportAirfieldRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationAnchorageAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationAnchorBerthRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationArchipelagicSeaLaneRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationArchipelagicSeaLaneAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationArchipelagicSeaLaneAxisRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationBerthRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationBollardRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationBridgeRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationBuildingRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationBuiltUpAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationCableAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationCableOverheadRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationCableSubmarineRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationCanalRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationCardinalBeaconRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationCardinalBuoyRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationCargoTranshipmentAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationCausewayRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationCautionAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationCheckpointRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationCoastGuardStationRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationCoastlineRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationCollisionRegulationsLimitRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationContiguousZoneRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationContinentalShelfAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationConveyorRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationCraneRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationCurrentNonGravitationalRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationCustomZoneRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationDamRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationDaymarkRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationDeepWaterRouteRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationDeepWaterRouteCentrelineRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationDeepWaterRoutePartRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationDepthAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationDepthContourRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationDepthNoBottomFoundRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationDiscolouredWaterRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationDistanceMarkRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationDockAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationDolphinRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationDredgedAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationDryDockRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationDumpingGroundRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationDykeRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationEmergencyWreckMarkingBuoyRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationExclusiveEconomicZoneRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationFairwayRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationFairwaySystemRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationFenceWallRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationFerryRouteRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationFisheryZoneRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationFishingFacilityRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationFishingGroundRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationFloatingDockRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationFogSignalRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationFortifiedStructureRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationFoulGroundRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationFreePortAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationGateRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationGridironRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationHarbourAreaAdministrativeRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationHarbourFacilityRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationHelipadRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationHulkRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationIceAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationInformationAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationInshoreTrafficZoneRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationInstallationBuoyRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationIslandGroupRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationIsolatedDangerBeaconRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationIsolatedDangerBuoyRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationLakeRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationLandAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationLandElevationRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationLandmarkRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationLandRegionRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationLateralBeaconRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationLateralBuoyRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationLightAirObstructionRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationLightAllAroundRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationLightFloatRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationLightFogDetectorRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationLightSectoredRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationLightVesselRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationLocalMagneticAnomalyRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationLockBasinRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationLogPondRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationMagneticVariationRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationMarineFarmCultureRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationMarinePollutionRegulationsAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationMilitaryPracticeAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationMooringAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationMooringBuoyRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationMooringTrotRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationNavigationLineRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationObstructionRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationOffshorePlatformRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationOffshoreProductionAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationOilBarrierRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationPhysicalAISAidToNavigationRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationPileRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationPilotageDistrictRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationPilotBoardingPlaceRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationPipelineOverheadRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationPipelineSubmarineOnLandRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationPontoonRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationPrecautionaryAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationProductionStorageAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationPylonBridgeSupportRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationRadarLineRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationRadarRangeRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationRadarReflectorRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationRadarStationRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationRadarTransponderBeaconRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationRadioCallingInPointRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationRadioStationRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationRailwayRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationRangeSystemRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationRapidsRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationRecommendedRouteCentrelineRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationRecommendedTrackRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationRecommendedTrafficLanePartRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationRescueStationRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationRestrictedAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationRetroreflectorRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationRiverRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationRoadRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationRunwayRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationSafeWaterBeaconRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationSafeWaterBuoyRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationSandwaveRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationSeaAreaNamedWaterAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationSeabedAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationSeagrassRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationSeaplaneLandingAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationSeparationZoneOrLineRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationShorelineConstructionRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationSignalStationTrafficRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationSignalStationWarningRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationSiloTankRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationSlopeToplineRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationSlopingGroundRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationSmallCraftFacilityRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationSoundingRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationSpanFixedRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationSpanOpeningRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation), typeof(NonStandardWorkingDay), typeof(ServiceHours)];
        }

        public class theInformationSpecialPurposeGeneralBeaconRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationSpecialPurposeGeneralBuoyRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationSpringRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationStraightTerritorialSeaBaselineRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationStructureOverNavigableWaterRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationSubmarinePipelineAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationSubmarineTransitLaneRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationSweptAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationTerritorialSeaAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationTidalStreamFloodEbbRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationTidalStreamPanelDataRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationTidewayRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationTrafficSeparationSchemeRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationTrafficSeparationSchemeBoundaryRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationTrafficSeparationSchemeCrossingRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationTrafficSeparationSchemeLanePartRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationTrafficSeparationSchemeRoundaboutRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationTunnelRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationTwoWayRouteRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationTwoWayRoutePartRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationUnderwaterAwashRockRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationUnsurveyedAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationVegetationRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationVesselTrafficServiceAreaRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationVirtualAISAidToNavigationRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationWaterfallRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationWaterTurbulenceRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationWeedKelpRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public class theInformationWindTurbineRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(ContactDetails), typeof(NauticalInformation)];
        }

        public class theInformationWreckRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(NauticalInformation)];
        }

        public static InformationAssociationConnector[] _associationConnectorInformations => Handles.AssociationConnectorInformations[typeof(AdditionalInformationViewModel)]();
    }

    public class QualityOfBathymetricDataCompositionViewModel : InformationAssociationViewModel
    {
        public override string Code => "QualityOfBathymetricDataComposition";
        public override string[] Roles => ["theQualityInformation"];

        private InformationBindingViewModel? _theQualityInformation;
        [ExpandableObject]
        public InformationBindingViewModel? theQualityInformation
        {
            get
            {
                return _theQualityInformation;
            }

            set
            {
                this.SetValue(ref _theQualityInformation, value);
            }
        }

        public override InformationAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theQualityInformation = null;
                if (value is not null)
                {
                    theQualityInformation = value.CreateLocalInformationBinding();
                }
            }
        }

        public override InformationAssociationConnector[] associationConnectorInformations => QualityOfBathymetricDataCompositionViewModel._associationConnectorInformations;

        public class theQualityInformationQualityOfBathymetricDataRefIdViewModel : InformationRefIdViewModel
        {
            public Type[] AssociationTypes => [typeof(SpatialQuality)];
        }

        public static InformationAssociationConnector[] _associationConnectorInformations => Handles.AssociationConnectorInformations[typeof(QualityOfBathymetricDataCompositionViewModel)]();
    }

    public class SpatialAssociationViewModel : InformationAssociationViewModel
    {
        public override string Code => "SpatialAssociation";
        public override string[] Roles => ["theQualityInformation"];

        private InformationBindingViewModel? _theQualityInformation;
        [ExpandableObject]
        public InformationBindingViewModel? theQualityInformation
        {
            get
            {
                return _theQualityInformation;
            }

            set
            {
                this.SetValue(ref _theQualityInformation, value);
            }
        }

        public override InformationAssociationConnector? associationConnector
        {
            get
            {
                return _associationConnector;
            }

            set
            {
                this.SetValue(ref _associationConnector, value);
                theQualityInformation = null;
                if (value is not null)
                {
                    theQualityInformation = value.CreateLocalInformationBinding();
                }
            }
        }

        public override InformationAssociationConnector[] associationConnectorInformations => SpatialAssociationViewModel._associationConnectorInformations;
        public static InformationAssociationConnector[] _associationConnectorInformations => Handles.AssociationConnectorInformations[typeof(SpatialAssociationViewModel)]();
    }
}